/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IUserPolicies,
  IUserPoliciesInterface,
} from "../../../../contracts/keyring/interfaces/IUserPolicies";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "Unacceptable",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "whitelisted",
        type: "address",
      },
    ],
    name: "AddTraderWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "policyManager",
        type: "address",
      },
    ],
    name: "Deployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "whitelisted",
        type: "address",
      },
    ],
    name: "RemoveTraderWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "policyId",
        type: "uint32",
      },
    ],
    name: "SetUserPolicy",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "whitelisted",
        type: "address",
      },
    ],
    name: "addWhitelistedTrader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "address",
        name: "counterparty",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "isIndeed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "whitelisted",
        type: "address",
      },
    ],
    name: "removeWhitelistedTrader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "policyId",
        type: "uint32",
      },
    ],
    name: "setUserPolicy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "userPolicies",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "whitelistedTraderAtIndex",
    outputs: [
      {
        internalType: "address",
        name: "whitelisted",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
    ],
    name: "whitelistedTraderCount",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IUserPolicies__factory {
  static readonly abi = _abi;
  static createInterface(): IUserPoliciesInterface {
    return new utils.Interface(_abi) as IUserPoliciesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IUserPolicies {
    return new Contract(address, _abi, signerOrProvider) as IUserPolicies;
  }
}
