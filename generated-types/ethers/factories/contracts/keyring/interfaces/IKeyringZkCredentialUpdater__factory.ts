/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IKeyringZkCredentialUpdater,
  IKeyringZkCredentialUpdaterInterface,
} from "../../../../contracts/keyring/interfaces/IKeyringZkCredentialUpdater";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "Unacceptable",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "signalHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct IKeyringZkVerifier.IdentityMembershipProof",
        name: "membershipProof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "policyDisclosures",
            type: "uint256[2]",
          },
          {
            internalType: "uint256",
            name: "tradingAddress",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct IKeyringZkVerifier.IdentityAuthorisationProof",
        name: "authorizationProof",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rootTime",
        type: "uint256",
      },
    ],
    name: "AcceptCredentialUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "identityTree",
        type: "address",
      },
    ],
    name: "AdmitIdentityTree",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "trustedForwarder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "keyringCache",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "admissionPolicyManager",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "keyringZkVerifier",
        type: "address",
      },
    ],
    name: "CredentialUpdaterDeployed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "identityTree",
        type: "address",
      },
    ],
    name: "RemoveIdentityTree",
    type: "event",
  },
  {
    inputs: [],
    name: "KEYRING_CREDENTIALS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "KEYRING_ZK_VERIFIER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POLICY_MANAGER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "policyId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "attestor",
        type: "address",
      },
    ],
    name: "checkPolicy",
    outputs: [
      {
        internalType: "bool",
        name: "acceptable",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32[12]",
        name: "input",
        type: "uint32[12]",
      },
    ],
    name: "pack12x20",
    outputs: [
      {
        internalType: "uint256",
        name: "packed",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "packed",
        type: "uint256",
      },
    ],
    name: "unpack12x20",
    outputs: [
      {
        internalType: "uint32[12]",
        name: "unpacked",
        type: "uint32[12]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attestor",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "signalHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
        ],
        internalType: "struct IKeyringZkVerifier.IdentityMembershipProof",
        name: "membershipProof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "policyDisclosures",
            type: "uint256[2]",
          },
          {
            internalType: "uint256",
            name: "tradingAddress",
            type: "uint256",
          },
        ],
        internalType: "struct IKeyringZkVerifier.IdentityAuthorisationProof",
        name: "authorizationProof",
        type: "tuple",
      },
    ],
    name: "updateCredentials",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IKeyringZkCredentialUpdater__factory {
  static readonly abi = _abi;
  static createInterface(): IKeyringZkCredentialUpdaterInterface {
    return new utils.Interface(_abi) as IKeyringZkCredentialUpdaterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IKeyringZkCredentialUpdater {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IKeyringZkCredentialUpdater;
  }
}
