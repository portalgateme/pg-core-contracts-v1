/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  KeyringZkVerifier,
  KeyringZkVerifierInterface,
} from "../../../../contracts/keyring/keyringZkVerifier/KeyringZkVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "identityConstructionProofVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "membershipProofVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "authorisationProofVerifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "Unacceptable",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "deployer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "identityConstructionProofVerifier",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "membershipProofVerifier",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "authorisationProofVerifier",
        type: "address",
      },
    ],
    name: "Deployed",
    type: "event",
  },
  {
    inputs: [],
    name: "AUTHORIZATION_PROOF_VERIFIER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IDENTITY_CONSTRUCTION_PROOF_VERIFIER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IDENTITY_MEMBERSHIP_PROOF_VERIFIER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "signalHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
        ],
        internalType: "struct IKeyringZkVerifier.IdentityMembershipProof",
        name: "membershipProof",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "policyDisclosures",
            type: "uint256[2]",
          },
          {
            internalType: "uint256",
            name: "tradingAddress",
            type: "uint256",
          },
        ],
        internalType: "struct IKeyringZkVerifier.IdentityAuthorisationProof",
        name: "authorisationProof",
        type: "tuple",
      },
    ],
    name: "checkClaim",
    outputs: [
      {
        internalType: "bool",
        name: "verified",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256[2]",
            name: "policyDisclosures",
            type: "uint256[2]",
          },
          {
            internalType: "uint256",
            name: "tradingAddress",
            type: "uint256",
          },
        ],
        internalType: "struct IKeyringZkVerifier.IdentityAuthorisationProof",
        name: "authorisationProof",
        type: "tuple",
      },
    ],
    name: "checkIdentityAuthorisationProof",
    outputs: [
      {
        internalType: "bool",
        name: "verified",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "identity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "policyCommitment",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxAddresses",
            type: "uint256",
          },
        ],
        internalType: "struct IKeyringZkVerifier.IdentityConstructionProof",
        name: "constructionProof",
        type: "tuple",
      },
    ],
    name: "checkIdentityConstructionProof",
    outputs: [
      {
        internalType: "bool",
        name: "verified",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "a",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2][2]",
                name: "b",
                type: "uint256[2][2]",
              },
              {
                internalType: "uint256[2]",
                name: "c",
                type: "uint256[2]",
              },
            ],
            internalType: "struct IKeyringZkVerifier.Groth16Proof",
            name: "proof",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "root",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nullifierHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "signalHash",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "externalNullifier",
            type: "uint256",
          },
        ],
        internalType: "struct IKeyringZkVerifier.IdentityMembershipProof",
        name: "membershipProof",
        type: "tuple",
      },
    ],
    name: "checkIdentityMembershipProof",
    outputs: [
      {
        internalType: "bool",
        name: "verified",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e060405234801561001057600080fd5b506040516108a23803806108a283398101604081905261002f916101ff565b6001600160a01b0383166100a557604051636415329d60e01b815260206004820152603160248201527f6964656e74697479436f6e737472756374696f6e50726f6f6656657269666965604482015270722063616e6e6f7420626520656d70747960781b60648201526084015b60405180910390fd5b6001600160a01b03821661010c57604051636415329d60e01b815260206004820152602760248201527f6d656d6265727368697050726f6f6656657269666965722063616e6e6f7420626044820152666520656d70747960c81b606482015260840161009c565b6001600160a01b03811661017657604051636415329d60e01b815260206004820152602a60248201527f617574686f7269736174696f6e50726f6f6656657269666965722063616e6e6f6044820152697420626520656d70747960b01b606482015260840161009c565b6001600160a01b0383811660a0819052838216608081815292841660c081905260408051338152602081019490945283019190915260608201527f6707255b2c5ca81220b2f3e408a269cb83baa6aa7e5e37aa1756883a6cdf06f1910160405180910390a1505050610242565b80516001600160a01b03811681146101fa57600080fd5b919050565b60008060006060848603121561021457600080fd5b61021d846101e3565b925061022b602085016101e3565b9150610239604085016101e3565b90509250925092565b60805160a05160c05161061d6102856000396000818161014e01526101c601526000818161010101526103a101526000818160af01526102e5015261061d6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806393edbc0c1161005b57806393edbc0c146100fc57806396c3e22014610123578063a921788a14610136578063f173b6491461014957600080fd5b806303a65446146100825780636804dd84146100aa578063752892dc146100e9575b600080fd5b6100956100903660046103f9565b610170565b60405190151581526020015b60405180910390f35b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a1565b6100956100f7366004610430565b61024c565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b610095610131366004610467565b61029a565b610095610144366004610484565b610361565b6100d17f000000000000000000000000000000000000000000000000000000000000000081565b6040805160a08101825261010083013581526101208301356020820152610140830135818301526101608301356060820152610180830135608082015281516334baeab960e01b81526000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926334baeab9926102059287929083019160c0840191906004016104c6565b602060405180830381865afa158015610222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102469190610523565b92915050565b60008161012001358361012001351461026757506000610246565b6102708361029a565b61027c57506000610246565b61028582610170565b61029157506000610246565b50600192915050565b60408051608081018252610100830135815261012083013560208201526101408301358183015261016083013560608201528151635fe8c13b60e01b81526000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692635fe8c13b926103249287929083019160c084019190600401610545565b60006040518083038186803b15801561033c57600080fd5b505afa92505050801561034d575060015b61035957506000919050565b506001919050565b60408051606081018252610100830135815261012083013560208201526101408301358183015281516308a3cff560e11b81526000926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926311479fea926102059287929083019160c084019190600401610596565b60006101a082840312156103f357600080fd5b50919050565b60006101a0828403121561040c57600080fd5b61041683836103e0565b9392505050565b600061018082840312156103f357600080fd5b600080610320838503121561044457600080fd5b61044e848461041d565b915061045e8461018085016103e0565b90509250929050565b6000610180828403121561047a57600080fd5b610416838361041d565b600061016082840312156103f357600080fd5b806000805b60028110156104bf5760408084873794850182815294929092019160010161049c565b5050505050565b6101a08101604086833760408201600081526104e28187610497565b5060408460c08401376000610100830181815284915b60058110156105175782518252602092830192909101906001016104f8565b50505095945050505050565b60006020828403121561053557600080fd5b8151801515811461041657600080fd5b6101808101604086833760408201600081526105618187610497565b5060408460c08401376000610100830181815284915b6004811015610517578251825260209283019290910190600101610577565b6101608101604086833760408201600081526105b28187610497565b5060408460c08401376000610100830181815284915b60038110156105175782518252602092830192909101906001016105c856fea26469706673582212209afdb0a1476a32ab3ac130028e604e702efce8056cdb5e78e7124b2a292ad66c64736f6c634300080e0033";

type KeyringZkVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KeyringZkVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KeyringZkVerifier__factory extends ContractFactory {
  constructor(...args: KeyringZkVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "KeyringZkVerifier";
  }

  override deploy(
    identityConstructionProofVerifier: PromiseOrValue<string>,
    membershipProofVerifier: PromiseOrValue<string>,
    authorisationProofVerifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<KeyringZkVerifier> {
    return super.deploy(
      identityConstructionProofVerifier,
      membershipProofVerifier,
      authorisationProofVerifier,
      overrides || {}
    ) as Promise<KeyringZkVerifier>;
  }
  override getDeployTransaction(
    identityConstructionProofVerifier: PromiseOrValue<string>,
    membershipProofVerifier: PromiseOrValue<string>,
    authorisationProofVerifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      identityConstructionProofVerifier,
      membershipProofVerifier,
      authorisationProofVerifier,
      overrides || {}
    );
  }
  override attach(address: string): KeyringZkVerifier {
    return super.attach(address) as KeyringZkVerifier;
  }
  override connect(signer: Signer): KeyringZkVerifier__factory {
    return super.connect(signer) as KeyringZkVerifier__factory;
  }
  static readonly contractName: "KeyringZkVerifier";

  public readonly contractName: "KeyringZkVerifier";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KeyringZkVerifierInterface {
    return new utils.Interface(_abi) as KeyringZkVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KeyringZkVerifier {
    return new Contract(address, _abi, signerOrProvider) as KeyringZkVerifier;
  }
}
