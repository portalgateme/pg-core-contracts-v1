/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC20Tornado,
  ERC20TornadoInterface,
} from "../../../contracts/tornado-core/ERC20Tornado";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IVerifier",
        name: "_verifier",
        type: "address",
      },
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_denomination",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "_merkleTreeHeight",
        type: "uint32",
      },
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "commitment",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "leafIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "nullifierHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "relayer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ROOT_HISTORY_SIZE",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "commitments",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRootIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "denomination",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_commitment",
        type: "bytes32",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    name: "isKnownRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
    ],
    name: "isSpent",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_nullifierHashes",
        type: "bytes32[]",
      },
    ],
    name: "isSpentArray",
    outputs: [
      {
        internalType: "bool[]",
        name: "spent",
        type: "bool[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "nullifierHashes",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "roots",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "contract IVerifier",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_nullifierHash",
        type: "bytes32",
      },
      {
        internalType: "address payable",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_relayer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_refund",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b5060405162002895380380620028958339810160408190526200004491620008c3565b84848484808360008263ffffffff1611620000b25760405162461bcd60e51b815260206004820152602360248201527f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60448201526265726f60e81b60648201526084015b60405180910390fd5b60208263ffffffff16106200010a5760405162461bcd60e51b815260206004820152601e60248201527f5f6c6576656c732073686f756c64206265206c657373207468616e20333200006044820152606401620000a9565b6000805463ffffffff191663ffffffff84161781556001600160a01b0382166080525b8263ffffffff168163ffffffff1610156200017e576200015363ffffffff821662000261565b63ffffffff821660009081526001602052604090205580620001758162000955565b9150506200012d565b506200019c620001906001846200097b565b63ffffffff1662000261565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5550506001600455816200022b5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000a9565b506001600160a01b0392831660a05260055550600880546001600160a01b0319169290911691909117905550620009a292505050565b6000816000036200029357507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103620002c357507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b81600203620002f357507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b816003036200032357507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b816004036200035357507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b816005036200038357507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b81600603620003b357507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b81600703620003e357507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b816008036200041357507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b816009036200044257507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a036200047257507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b03620004a257507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c03620004d257507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d036200050257507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e036200053257507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f036200056257507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b816010036200059257507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b81601103620005c257507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b81601203620005f257507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b816013036200062257507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b816014036200065257507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b816015036200068257507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b81601603620006b257507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b81601703620006e257507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b816018036200071257507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b816019036200074257507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036200077257507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b03620007a257507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c03620007d157507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d036200080157507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e036200083157507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036200086157507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b815260206004820152601360248201527f496e646578206f7574206f6620626f756e6473000000000000000000000000006044820152606401620000a9565b6001600160a01b0381168114620008c057600080fd5b50565b600080600080600060a08688031215620008dc57600080fd5b8551620008e981620008aa565b6020870151909550620008fc81620008aa565b60408701516060880151919550935063ffffffff811681146200091e57600080fd5b60808701519092506200093181620008aa565b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168181036200097157620009716200093f565b6001019392505050565b63ffffffff8281168282160390808211156200099b576200099b6200093f565b5092915050565b60805160a051611ebf620009d6600039600081816101a601526105d001526000818161042701526114b70152611ebf6000f3fe6080604052600436106101355760003560e01c8063b214faa5116100ab578063e82955881161006f578063e8295588146103c1578063ec732959146103e1578063ed33639f14610415578063f178e47c14610449578063fc0c546a14610476578063fc7e9c6f1461049657600080fd5b8063b214faa514610312578063ba70f75714610325578063c2b40ae41461034f578063cd87a3b41461037c578063e5285dcc1461039157600080fd5b80636d9833e3116100fd5780636d9833e314610242578063839df945146102625780638bca6d16146102925780638ea3099e146102a857806390eeb02b146102c85780639fa12d0b146102e557600080fd5b806317cc915c1461013a57806321a0adb61461017f5780632b7ac3f314610194578063414a37ba146101e05780634ecf518b14610210575b600080fd5b34801561014657600080fd5b5061016a610155366004611916565b60066020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61019261018d36600461194f565b6104bb565b005b3480156101a057600080fd5b506101c87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610176565b3480156101ec57600080fd5b50610202600080516020611e6a83398151915281565b604051908152602001610176565b34801561021c57600080fd5b5060005461022d9063ffffffff1681565b60405163ffffffff9091168152602001610176565b34801561024e57600080fd5b5061016a61025d366004611916565b6107d4565b34801561026e57600080fd5b5061016a61027d366004611916565b60076020526000908152604090205460ff1681565b34801561029e57600080fd5b5061020260055481565b3480156102b457600080fd5b506102026102c3366004611a05565b610852565b3480156102d457600080fd5b5060035461022d9063ffffffff1681565b3480156102f157600080fd5b50610305610300366004611a3a565b610a1f565b6040516101769190611aaf565b610192610320366004611916565b610ae5565b34801561033157600080fd5b5060035463ffffffff16600090815260026020526040902054610202565b34801561035b57600080fd5b5061020261036a366004611916565b60026020526000908152604090205481565b34801561038857600080fd5b5061022d601e81565b34801561039d57600080fd5b5061016a6103ac366004611916565b60009081526006602052604090205460ff1690565b3480156103cd57600080fd5b506102026103dc366004611916565b610bd2565b3480156103ed57600080fd5b506102027f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561042157600080fd5b506101c87f000000000000000000000000000000000000000000000000000000000000000081565b34801561045557600080fd5b50610202610464366004611916565b60016020526000908152604090205481565b34801561048257600080fd5b506008546101c8906001600160a01b031681565b3480156104a257600080fd5b5060035461022d90640100000000900463ffffffff1681565b6104c36111f5565b60055482111561051a5760405162461bcd60e51b815260206004820152601a60248201527f4665652065786365656473207472616e736665722076616c756500000000000060448201526064015b60405180910390fd5b60008581526006602052604090205460ff16156105795760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e74006044820152606401610511565b610582866107d4565b6105ce5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f74000000006044820152606401610511565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663695ef6f989896040518060c001604052808b60001c81526020018a60001c815260200189604051602001610645919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f1981840301815291815281516020928301208352516bffffffffffffffffffffffff1960608c901b16818301529101906034016040516020818303038152906040528051906020012060001c8152602001878152602001868152506040518463ffffffff1660e01b81526004016106c493929190611af5565b6020604051808303816000875af11580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190611b53565b61074c5760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b6044820152606401610511565b6000858152600660205260409020805460ff191660011790556107718484848461124e565b604080516001600160a01b03868116825260208201889052918101849052908416907fe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c349319060600160405180910390a26107ca6001600455565b5050505050505050565b60008181036107e557506000919050565b60035463ffffffff16805b63ffffffff81166000908152600260205260409020548403610816575060019392505050565b8063ffffffff166000036108285750601e5b8061083281611b92565b9150508163ffffffff168163ffffffff16036107f0575060009392505050565b6000600080516020611e6a83398151915283106108b15760405162461bcd60e51b815260206004820181905260248201527f5f6c6566742073686f756c6420626520696e7369646520746865206669656c646044820152606401610511565b600080516020611e6a83398151915282106109185760405162461bcd60e51b815260206004820152602160248201527f5f72696768742073686f756c6420626520696e7369646520746865206669656c6044820152601960fa1b6064820152608401610511565b60405163f47d33b560e01b81526004810184905260006024820181905284916001600160a01b0387169063f47d33b5906044016040805180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b9190611bb2565b9092509050600080516020611e6a83398151915284830860405163f47d33b560e01b815260048101829052602481018390529092506001600160a01b0387169063f47d33b5906044016040805180830381865afa1580156109f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a149190611bb2565b509695505050505050565b60608167ffffffffffffffff811115610a3a57610a3a611bec565b604051908082528060200260200182016040528015610a63578160200160208202803683370190505b50905060005b82811015610ade57610aa2848483818110610a8657610a86611c02565b9050602002013560009081526006602052604090205460ff1690565b15610acc576001828281518110610abb57610abb611c02565b911515602092830291909101909101525b80610ad681611c18565b915050610a69565b5092915050565b610aed6111f5565b60008181526007602052604090205460ff1615610b565760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b6064820152608401610511565b6000610b6182611399565b6000838152600760205260409020805460ff191660011790559050610b8461158c565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a250610bcf6001600455565b50565b600081600003610c0357507f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c919050565b81600103610c3257507f256a6135777eee2fd26f54b8b7037a25439d5235caee224154186d2b8a52e31d919050565b81600203610c6157507f1151949895e82ab19924de92c40a3d6f7bcb60d92b00504b8199613683f0c200919050565b81600303610c9057507f20121ee811489ff8d61f09fb89e313f14959a0f28bb428a20dba6b0b068b3bdb919050565b81600403610cbf57507f0a89ca6ffa14cc462cfedb842c30ed221a50a3d6bf022a6a57dc82ab24c157c9919050565b81600503610cee57507f24ca05c2b5cd42e890d6be94c68d0689f4f21c9cec9c0f13fe41d566dfb54959919050565b81600603610d1d57507f1ccb97c932565a92c60156bdba2d08f3bf1377464e025cee765679e604a7315c919050565b81600703610d4c57507f19156fbd7d1a8bf5cba8909367de1b624534ebab4f0f79e003bccdd1b182bdb4919050565b81600803610d7b57507f261af8c1f0912e465744641409f622d466c3920ac6e5ff37e36604cb11dfff80919050565b81600903610da957507e58459724ff6ca5a1652fcbc3e82b93895cf08e975b19beab3f54c217d1c007919050565b81600a03610dd857507f1f04ef20dee48d39984d8eabe768a70eafa6310ad20849d4573c3c40c2ad1e30919050565b81600b03610e0757507f1bea3dec5dab51567ce7e200a30f7ba6d4276aeaa53e2686f962a46c66d511e5919050565b81600c03610e3657507f0ee0f941e2da4b9e31c3ca97a40d8fa9ce68d97c084177071b3cb46cd3372f0f919050565b81600d03610e6557507f1ca9503e8935884501bbaf20be14eb4c46b89772c97b96e3b2ebf3a36a948bbd919050565b81600e03610e9457507f133a80e30697cd55d8f7d4b0965b7be24057ba5dc3da898ee2187232446cb108919050565b81600f03610ec357507f13e6d8fc88839ed76e182c2a779af5b2c0da9dd18c90427a644f7e148a6253b6919050565b81601003610ef257507f1eb16b057a477f4bc8f572ea6bee39561098f78f15bfb3699dcbb7bd8db61854919050565b81601103610f2157507f0da2cb16a1ceaabf1c16b838f7a9e3f2a3a3088d9e0a6debaa748114620696ea919050565b81601203610f5057507f24a3b3d822420b14b5d8cb6c28a574f01e98ea9e940551d2ebd75cee12649f9d919050565b81601303610f7f57507f198622acbd783d1b0d9064105b1fc8e4d8889de95c4c519b3f635809fe6afc05919050565b81601403610fae57507f29d7ed391256ccc3ea596c86e933b89ff339d25ea8ddced975ae2fe30b5296d4919050565b81601503610fdd57507f19be59f2f0413ce78c0c3703a3a5451b1d7f39629fa33abd11548a76065b2967919050565b8160160361100c57507f1ff3f61797e538b70e619310d33f2a063e7eb59104e112e95738da1254dc3453919050565b8160170361103b57507f10c16ae9959cf8358980d9dd9616e48228737310a10e2b6b731c1a548f036c48919050565b8160180361106a57507f0ba433a63174a90ac20992e75e3095496812b652685b5e1a2eae0b1bf4e8fcd1919050565b8160190361109957507f019ddb9df2bc98d987d0dfeca9d2b643deafab8f7036562e627c3667266a044c919050565b81601a036110c857507f2d3c88b23175c5a5565db928414c66d1912b11acf974b2e644caaac04739ce99919050565b81601b036110f757507f2eab55f6ae4e66e32c5189eed5c470840863445760f5ed7e7b69b2a62600f354919050565b81601c0361112557507e2df37a2642621802383cf952bf4dd1f32e05433beeb1fd41031fb7eace979d919050565b81601d0361115457507f104aeb41435db66c3e62feccc1d6f5d98d0a0ed75d1374db457cf462e3a1f427919050565b81601e0361118357507f1f3c6fd858e9a7d4b0d1f38e256a09d81d5a5e3c963987e2d4b814cfab7c6ebb919050565b81601f036111b257507f2c7a07d20dff79d01fecedc1134284a8d08436606c93693b67e333f671bf69cc919050565b60405162461bcd60e51b8152602060048201526013602482015272496e646578206f7574206f6620626f756e647360681b6044820152606401610511565b919050565b6002600454036112475760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610511565b6002600455565b8034146112b65760405162461bcd60e51b815260206004820152603060248201527f496e636f727265637420726566756e6420616d6f756e7420726563656976656460448201526f08189e481d1a194818dbdb9d1c9858dd60821b6064820152608401610511565b6112db84836005546112c89190611c31565b6008546001600160a01b03169190611614565b81156112f8576008546112f8906001600160a01b03168484611614565b8015611393576000846001600160a01b03168260405160006040518083038185875af1925050503d806000811461134b576040519150601f19603f3d011682016040523d82523d6000602084013e611350565b606091505b5050905080611391576040516001600160a01b0385169083156108fc029084906000818181858888f1935050505015801561138f573d6000803e3d6000fd5b505b505b50505050565b60035460008054909163ffffffff6401000000009091048116916113bf91166002611d5b565b63ffffffff168163ffffffff16036114325760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b6064820152608401610511565b8083600080805b60005463ffffffff90811690821610156114fe57611458600286611d70565b63ffffffff16600003611496578392506114778163ffffffff16610bd2565b63ffffffff8216600090815260016020526040902085905591506114b2565b63ffffffff811660009081526001602052604090205492508391505b6114dd7f00000000000000000000000000000000000000000000000000000000000000008484610852565b93506114ea600286611d93565b9450806114f681611db6565b915050611439565b50600354600090601e906115199063ffffffff166001611dd9565b6115239190611d70565b6003805463ffffffff191663ffffffff831690811790915560009081526002602052604090208590559050611559866001611dd9565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905550939695505050505050565b34156115f35760405162461bcd60e51b815260206004820152603060248201527f4554482076616c756520697320737570706f73656420746f206265203020666f60448201526f7220455243323020696e7374616e636560801b6064820152608401610511565b600554600854611612916001600160a01b03909116903390309061167c565b565b6040516001600160a01b03831660248201526044810182905261167790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116b4565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113939085906323b872dd60e01b90608401611640565b6000611709826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117869092919063ffffffff16565b80519091501561167757808060200190518101906117279190611b53565b6116775760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610511565b6060611795848460008561179d565b949350505050565b6060824710156117fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610511565b600080866001600160a01b0316858760405161181a9190611e1a565b60006040518083038185875af1925050503d8060008114611857576040519150601f19603f3d011682016040523d82523d6000602084013e61185c565b606091505b509150915061186d87838387611878565b979650505050505050565b606083156118e75782516000036118e0576001600160a01b0385163b6118e05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610511565b5081611795565b61179583838151156118fc5781518083602001fd5b8060405162461bcd60e51b81526004016105119190611e36565b60006020828403121561192857600080fd5b5035919050565b6001600160a01b0381168114610bcf57600080fd5b80356111f08161192f565b60008060008060008060008060e0898b03121561196b57600080fd5b883567ffffffffffffffff8082111561198357600080fd5b818b0191508b601f83011261199757600080fd5b8135818111156119a657600080fd5b8c60208285010111156119b857600080fd5b60209283019a509850508901359550604089013594506119da60608a01611944565b93506119e860808a01611944565b925060a0890135915060c089013590509295985092959890939650565b600080600060608486031215611a1a57600080fd5b8335611a258161192f565b95602085013595506040909401359392505050565b60008060208385031215611a4d57600080fd5b823567ffffffffffffffff80821115611a6557600080fd5b818501915085601f830112611a7957600080fd5b813581811115611a8857600080fd5b8660208260051b8501011115611a9d57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b81811015611ae9578351151583529284019291840191600101611acb565b50909695505050505050565b60e081528260e08201526000610100848682850137600081868501015280601f19601f87011684010191505060208083018460005b6006811015611b4757815183529183019190830190600101611b2a565b50505050949350505050565b600060208284031215611b6557600080fd5b81518015158114611b7557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff821680611ba857611ba8611b7c565b6000190192915050565b60008060408385031215611bc557600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611c2a57611c2a611b7c565b5060010190565b81810381811115611c4457611c44611b7c565b92915050565b600181815b80851115611c87578163ffffffff04821115611c6d57611c6d611b7c565b80851615611c7a57918102915b93841c9390800290611c4f565b509250929050565b600082611c9e57506001611c44565b81611cab57506000611c44565b8160018114611cc15760028114611ccb57611cfc565b6001915050611c44565b60ff841115611cdc57611cdc611b7c565b6001841b915063ffffffff821115611cf657611cf6611b7c565b50611c44565b5060208310610133831016604e8410600b8410161715611d33575081810a63ffffffff811115611d2e57611d2e611b7c565b611c44565b611d3d8383611c4a565b8063ffffffff04821115611d5357611d53611b7c565b029392505050565b600063ffffffff611795818516828516611c8f565b600063ffffffff80841680611d8757611d87611bd6565b92169190910692915050565b600063ffffffff80841680611daa57611daa611bd6565b92169190910492915050565b600063ffffffff808316818103611dcf57611dcf611b7c565b6001019392505050565b63ffffffff818116838216019080821115610ade57610ade611b7c565b60005b83811015611e11578181015183820152602001611df9565b50506000910152565b60008251611e2c818460208701611df6565b9190910192915050565b6020815260008251806020840152611e55816040850160208701611df6565b601f01601f1916919091016040019291505056fe30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001a26469706673582212201a1300b7483c40ee78d620d3dcb37e09f73894e078680f09f448eec6124b637d64736f6c63430008130033";

type ERC20TornadoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20TornadoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Tornado__factory extends ContractFactory {
  constructor(...args: ERC20TornadoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ERC20Tornado";
  }

  override deploy(
    _verifier: PromiseOrValue<string>,
    _hasher: PromiseOrValue<string>,
    _denomination: PromiseOrValue<BigNumberish>,
    _merkleTreeHeight: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Tornado> {
    return super.deploy(
      _verifier,
      _hasher,
      _denomination,
      _merkleTreeHeight,
      _token,
      overrides || {}
    ) as Promise<ERC20Tornado>;
  }
  override getDeployTransaction(
    _verifier: PromiseOrValue<string>,
    _hasher: PromiseOrValue<string>,
    _denomination: PromiseOrValue<BigNumberish>,
    _merkleTreeHeight: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _verifier,
      _hasher,
      _denomination,
      _merkleTreeHeight,
      _token,
      overrides || {}
    );
  }
  override attach(address: string): ERC20Tornado {
    return super.attach(address) as ERC20Tornado;
  }
  override connect(signer: Signer): ERC20Tornado__factory {
    return super.connect(signer) as ERC20Tornado__factory;
  }
  static readonly contractName: "ERC20Tornado";

  public readonly contractName: "ERC20Tornado";

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20TornadoInterface {
    return new utils.Interface(_abi) as ERC20TornadoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Tornado {
    return new Contract(address, _abi, signerOrProvider) as ERC20Tornado;
  }
}
