/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PGRouterInterface extends utils.Interface {
  functions: {
    "relayerRegistry()": FunctionFragment;
    "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "relayerRegistry"
      | "relayerRegistry()"
      | "withdraw"
      | "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "relayerRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerRegistry()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "relayerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerRegistry()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PGRouter extends BaseContract {
  contractName: "PGRouter";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PGRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    relayerRegistry(overrides?: CallOverrides): Promise<[string]>;

    "relayerRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  relayerRegistry(overrides?: CallOverrides): Promise<string>;

  "relayerRegistry()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _tornado: PromiseOrValue<string>,
    _relayerAddress: PromiseOrValue<string>,
    _proof: PromiseOrValue<BytesLike>,
    _root: PromiseOrValue<BytesLike>,
    _nullifierHash: PromiseOrValue<BytesLike>,
    _recipient: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    _refund: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)"(
    _tornado: PromiseOrValue<string>,
    _relayerAddress: PromiseOrValue<string>,
    _proof: PromiseOrValue<BytesLike>,
    _root: PromiseOrValue<BytesLike>,
    _nullifierHash: PromiseOrValue<BytesLike>,
    _recipient: PromiseOrValue<string>,
    _relayer: PromiseOrValue<string>,
    _fee: PromiseOrValue<BigNumberish>,
    _refund: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    relayerRegistry(overrides?: CallOverrides): Promise<string>;

    "relayerRegistry()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    relayerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "relayerRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    relayerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relayerRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      _tornado: PromiseOrValue<string>,
      _relayerAddress: PromiseOrValue<string>,
      _proof: PromiseOrValue<BytesLike>,
      _root: PromiseOrValue<BytesLike>,
      _nullifierHash: PromiseOrValue<BytesLike>,
      _recipient: PromiseOrValue<string>,
      _relayer: PromiseOrValue<string>,
      _fee: PromiseOrValue<BigNumberish>,
      _refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
