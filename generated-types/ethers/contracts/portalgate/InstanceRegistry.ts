/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace InstanceRegistry {
  export type InstanceStruct = {
    isERC20: PromiseOrValue<boolean>;
    token: PromiseOrValue<string>;
    state: PromiseOrValue<BigNumberish>;
    uniswapPoolSwappingFee: PromiseOrValue<BigNumberish>;
    protocolFeePercentage: PromiseOrValue<BigNumberish>;
    maxDepositAmount: PromiseOrValue<BigNumberish>;
  };

  export type InstanceStructOutput = [
    boolean,
    string,
    number,
    number,
    number,
    BigNumber
  ] & {
    isERC20: boolean;
    token: string;
    state: number;
    uniswapPoolSwappingFee: number;
    protocolFeePercentage: number;
    maxDepositAmount: BigNumber;
  };

  export type TornadoConfigStruct = {
    addr: PromiseOrValue<string>;
    instance: InstanceRegistry.InstanceStruct;
  };

  export type TornadoConfigStructOutput = [
    string,
    InstanceRegistry.InstanceStructOutput
  ] & { addr: string; instance: InstanceRegistry.InstanceStructOutput };
}

export interface InstanceRegistryInterface extends utils.Interface {
  functions: {
    "getAllInstanceAddresses()": FunctionFragment;
    "getAllInstances()": FunctionFragment;
    "getPoolToken(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])": FunctionFragment;
    "instanceIds(uint256)": FunctionFragment;
    "instances(address)": FunctionFragment;
    "removeInstance(uint256)": FunctionFragment;
    "router()": FunctionFragment;
    "setPGRouter(address)": FunctionFragment;
    "setProtocolFee(address,uint32)": FunctionFragment;
    "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))": FunctionFragment;
    "updateInstanceState(address,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllInstanceAddresses"
      | "getAllInstanceAddresses()"
      | "getAllInstances"
      | "getAllInstances()"
      | "getPoolToken"
      | "getPoolToken(address)"
      | "governance"
      | "governance()"
      | "initInstances"
      | "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])"
      | "instanceIds"
      | "instanceIds(uint256)"
      | "instances"
      | "instances(address)"
      | "removeInstance"
      | "removeInstance(uint256)"
      | "router"
      | "router()"
      | "setPGRouter"
      | "setPGRouter(address)"
      | "setProtocolFee"
      | "setProtocolFee(address,uint32)"
      | "updateInstance"
      | "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))"
      | "updateInstanceState"
      | "updateInstanceState(address,uint8)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllInstanceAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInstanceAddresses()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInstances",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInstances()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolToken(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initInstances",
    values: [InstanceRegistry.TornadoConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])",
    values: [InstanceRegistry.TornadoConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "instanceIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "instanceIds(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "instances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "instances(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeInstance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeInstance(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "router()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPGRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPGRouter(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee(address,uint32)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstance",
    values: [InstanceRegistry.TornadoConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))",
    values: [InstanceRegistry.TornadoConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstanceState",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInstanceState(address,uint8)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllInstanceAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInstanceAddresses()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInstances()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolToken(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initInstances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instanceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instanceIds(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instances(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeInstance(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPGRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPGRouter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee(address,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstanceState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInstanceState(address,uint8)",
    data: BytesLike
  ): Result;

  events: {
    "InstanceStateUpdated(address,uint8)": EventFragment;
    "RouterRegistered(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InstanceStateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InstanceStateUpdated(address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRegistered(address)"): EventFragment;
}

export interface InstanceStateUpdatedEventObject {
  instance: string;
  state: number;
}
export type InstanceStateUpdatedEvent = TypedEvent<
  [string, number],
  InstanceStateUpdatedEventObject
>;

export type InstanceStateUpdatedEventFilter =
  TypedEventFilter<InstanceStateUpdatedEvent>;

export interface RouterRegisteredEventObject {
  pgRouter: string;
}
export type RouterRegisteredEvent = TypedEvent<
  [string],
  RouterRegisteredEventObject
>;

export type RouterRegisteredEventFilter =
  TypedEventFilter<RouterRegisteredEvent>;

export interface InstanceRegistry extends BaseContract {
  contractName: "InstanceRegistry";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstanceRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllInstanceAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    "getAllInstanceAddresses()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    getAllInstances(
      overrides?: CallOverrides
    ): Promise<
      [InstanceRegistry.TornadoConfigStructOutput[]] & {
        result: InstanceRegistry.TornadoConfigStructOutput[];
      }
    >;

    "getAllInstances()"(
      overrides?: CallOverrides
    ): Promise<
      [InstanceRegistry.TornadoConfigStructOutput[]] & {
        result: InstanceRegistry.TornadoConfigStructOutput[];
      }
    >;

    getPoolToken(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPoolToken(address)"(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    initInstances(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])"(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    instanceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "instanceIds(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number, number, number, BigNumber] & {
        isERC20: boolean;
        token: string;
        state: number;
        uniswapPoolSwappingFee: number;
        protocolFeePercentage: number;
        maxDepositAmount: BigNumber;
      }
    >;

    "instances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number, number, number, BigNumber] & {
        isERC20: boolean;
        token: string;
        state: number;
        uniswapPoolSwappingFee: number;
        protocolFeePercentage: number;
        maxDepositAmount: BigNumber;
      }
    >;

    removeInstance(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeInstance(uint256)"(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setPGRouter(
      routerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setPGRouter(address)"(
      routerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProtocolFee(address,uint32)"(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInstance(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))"(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInstanceState(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateInstanceState(address,uint8)"(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllInstanceAddresses(overrides?: CallOverrides): Promise<string[]>;

  "getAllInstanceAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  getAllInstances(
    overrides?: CallOverrides
  ): Promise<InstanceRegistry.TornadoConfigStructOutput[]>;

  "getAllInstances()"(
    overrides?: CallOverrides
  ): Promise<InstanceRegistry.TornadoConfigStructOutput[]>;

  getPoolToken(
    instance: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPoolToken(address)"(
    instance: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  initInstances(
    _instances: InstanceRegistry.TornadoConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])"(
    _instances: InstanceRegistry.TornadoConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  instanceIds(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "instanceIds(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  instances(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, number, number, number, BigNumber] & {
      isERC20: boolean;
      token: string;
      state: number;
      uniswapPoolSwappingFee: number;
      protocolFeePercentage: number;
      maxDepositAmount: BigNumber;
    }
  >;

  "instances(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, number, number, number, BigNumber] & {
      isERC20: boolean;
      token: string;
      state: number;
      uniswapPoolSwappingFee: number;
      protocolFeePercentage: number;
      maxDepositAmount: BigNumber;
    }
  >;

  removeInstance(
    _instanceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeInstance(uint256)"(
    _instanceId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setPGRouter(
    routerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setPGRouter(address)"(
    routerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    instance: PromiseOrValue<string>,
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProtocolFee(address,uint32)"(
    instance: PromiseOrValue<string>,
    newFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInstance(
    _tornadoConf: InstanceRegistry.TornadoConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))"(
    _tornadoConf: InstanceRegistry.TornadoConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInstanceState(
    _addr: PromiseOrValue<string>,
    _state: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateInstanceState(address,uint8)"(
    _addr: PromiseOrValue<string>,
    _state: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllInstanceAddresses(overrides?: CallOverrides): Promise<string[]>;

    "getAllInstanceAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    getAllInstances(
      overrides?: CallOverrides
    ): Promise<InstanceRegistry.TornadoConfigStructOutput[]>;

    "getAllInstances()"(
      overrides?: CallOverrides
    ): Promise<InstanceRegistry.TornadoConfigStructOutput[]>;

    getPoolToken(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPoolToken(address)"(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    initInstances(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])"(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    instanceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "instanceIds(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number, number, number, BigNumber] & {
        isERC20: boolean;
        token: string;
        state: number;
        uniswapPoolSwappingFee: number;
        protocolFeePercentage: number;
        maxDepositAmount: BigNumber;
      }
    >;

    "instances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, number, number, number, BigNumber] & {
        isERC20: boolean;
        token: string;
        state: number;
        uniswapPoolSwappingFee: number;
        protocolFeePercentage: number;
        maxDepositAmount: BigNumber;
      }
    >;

    removeInstance(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeInstance(uint256)"(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setPGRouter(
      routerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPGRouter(address)"(
      routerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProtocolFee(address,uint32)"(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInstance(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))"(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateInstanceState(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInstanceState(address,uint8)"(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InstanceStateUpdated(address,uint8)"(
      instance?: PromiseOrValue<string> | null,
      state?: null
    ): InstanceStateUpdatedEventFilter;
    InstanceStateUpdated(
      instance?: PromiseOrValue<string> | null,
      state?: null
    ): InstanceStateUpdatedEventFilter;

    "RouterRegistered(address)"(pgRouter?: null): RouterRegisteredEventFilter;
    RouterRegistered(pgRouter?: null): RouterRegisteredEventFilter;
  };

  estimateGas: {
    getAllInstanceAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllInstanceAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllInstances(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllInstances()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolToken(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolToken(address)"(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    initInstances(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])"(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    instanceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instanceIds(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "instances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeInstance(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeInstance(uint256)"(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPGRouter(
      routerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setPGRouter(address)"(
      routerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProtocolFee(address,uint32)"(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInstance(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))"(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInstanceState(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateInstanceState(address,uint8)"(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllInstanceAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllInstanceAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllInstances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllInstances()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolToken(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolToken(address)"(
      instance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initInstances(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "initInstances((address,(bool,address,uint8,uint24,uint32,uint256))[])"(
      _instances: InstanceRegistry.TornadoConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    instanceIds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "instanceIds(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instances(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "instances(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeInstance(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeInstance(uint256)"(
      _instanceId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPGRouter(
      routerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setPGRouter(address)"(
      routerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProtocolFee(address,uint32)"(
      instance: PromiseOrValue<string>,
      newFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInstance(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateInstance((address,(bool,address,uint8,uint24,uint32,uint256)))"(
      _tornadoConf: InstanceRegistry.TornadoConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInstanceState(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateInstanceState(address,uint8)"(
      _addr: PromiseOrValue<string>,
      _state: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
