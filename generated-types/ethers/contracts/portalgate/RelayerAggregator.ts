/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type RelayerStruct = {
  balance: PromiseOrValue<BigNumberish>;
  isRegistered: PromiseOrValue<boolean>;
};

export type RelayerStructOutput = [BigNumber, boolean] & {
  balance: BigNumber;
  isRegistered: boolean;
};

export interface RelayerAggregatorInterface extends utils.Interface {
  functions: {
    "relayerRegistry()": FunctionFragment;
    "relayersData(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "relayerRegistry"
      | "relayerRegistry()"
      | "relayersData"
      | "relayersData(address[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "relayerRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayerRegistry()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayersData",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "relayersData(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "relayerRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerRegistry()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayersData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayersData(address[])",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RelayerAggregator extends BaseContract {
  contractName: "RelayerAggregator";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RelayerAggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    relayerRegistry(overrides?: CallOverrides): Promise<[string]>;

    "relayerRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    relayersData(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[RelayerStructOutput[]]>;

    "relayersData(address[])"(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[RelayerStructOutput[]]>;
  };

  relayerRegistry(overrides?: CallOverrides): Promise<string>;

  "relayerRegistry()"(overrides?: CallOverrides): Promise<string>;

  relayersData(
    _relayers: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<RelayerStructOutput[]>;

  "relayersData(address[])"(
    _relayers: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<RelayerStructOutput[]>;

  callStatic: {
    relayerRegistry(overrides?: CallOverrides): Promise<string>;

    "relayerRegistry()"(overrides?: CallOverrides): Promise<string>;

    relayersData(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<RelayerStructOutput[]>;

    "relayersData(address[])"(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<RelayerStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    relayerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "relayerRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    relayersData(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "relayersData(address[])"(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    relayerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relayerRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    relayersData(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "relayersData(address[])"(
      _relayers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
