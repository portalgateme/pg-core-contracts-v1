/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ITornadoInstanceInterface extends utils.Interface {
  functions: {
    "denomination()": FunctionFragment;
    "deposit(bytes32)": FunctionFragment;
    "token()": FunctionFragment;
    "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "denomination"
      | "denomination()"
      | "deposit"
      | "deposit(bytes32)"
      | "token"
      | "token()"
      | "withdraw"
      | "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "denomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "denomination()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "token()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "denomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "denomination()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITornadoInstance extends BaseContract {
  contractName: "ITornadoInstance";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITornadoInstanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    denomination(overrides?: CallOverrides): Promise<[BigNumber]>;

    "denomination()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(bytes32)"(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  denomination(overrides?: CallOverrides): Promise<BigNumber>;

  "denomination()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(bytes32)"(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  withdraw(
    proof: PromiseOrValue<BytesLike>,
    root: PromiseOrValue<BytesLike>,
    nullifierHash: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    relayer: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    refund: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
    proof: PromiseOrValue<BytesLike>,
    root: PromiseOrValue<BytesLike>,
    nullifierHash: PromiseOrValue<BytesLike>,
    recipient: PromiseOrValue<string>,
    relayer: PromiseOrValue<string>,
    fee: PromiseOrValue<BigNumberish>,
    refund: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    denomination(overrides?: CallOverrides): Promise<BigNumber>;

    "denomination()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(bytes32)"(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    withdraw(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    denomination(overrides?: CallOverrides): Promise<BigNumber>;

    "denomination()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(bytes32)"(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    denomination(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "denomination()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(bytes32)"(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)"(
      proof: PromiseOrValue<BytesLike>,
      root: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BytesLike>,
      recipient: PromiseOrValue<string>,
      relayer: PromiseOrValue<string>,
      fee: PromiseOrValue<BigNumberish>,
      refund: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
