/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace PolicyStorage {
  export type PolicyScalarStruct = {
    ruleId: PromiseOrValue<BytesLike>;
    descriptionUtf8: PromiseOrValue<string>;
    ttl: PromiseOrValue<BigNumberish>;
    gracePeriod: PromiseOrValue<BigNumberish>;
    acceptRoots: PromiseOrValue<BigNumberish>;
    allowUserWhitelists: PromiseOrValue<boolean>;
    locked: PromiseOrValue<boolean>;
  };

  export type PolicyScalarStructOutput = [
    string,
    string,
    number,
    number,
    number,
    boolean,
    boolean
  ] & {
    ruleId: string;
    descriptionUtf8: string;
    ttl: number;
    gracePeriod: number;
    acceptRoots: number;
    allowUserWhitelists: boolean;
    locked: boolean;
  };
}

export interface IPolicyManagerInterface extends utils.Interface {
  functions: {
    "ROLE_GLOBAL_ATTESTOR_ADMIN()": FunctionFragment;
    "ROLE_GLOBAL_WALLETCHECK_ADMIN()": FunctionFragment;
    "ROLE_POLICY_CREATOR()": FunctionFragment;
    "addPolicyAttestors(uint32,address[],uint256)": FunctionFragment;
    "addPolicyWalletChecks(uint32,address[],uint256)": FunctionFragment;
    "admitAttestor(address,string)": FunctionFragment;
    "admitWalletCheck(address)": FunctionFragment;
    "attestorUri(address)": FunctionFragment;
    "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])": FunctionFragment;
    "globalAttestorAtIndex(uint256)": FunctionFragment;
    "globalAttestorCount()": FunctionFragment;
    "globalWalletCheckAtIndex(uint256)": FunctionFragment;
    "globalWalletCheckCount()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "init()": FunctionFragment;
    "isGlobalAttestor(address)": FunctionFragment;
    "isGlobalWalletCheck(address)": FunctionFragment;
    "isPolicy(uint32)": FunctionFragment;
    "isPolicyAttestor(uint32,address)": FunctionFragment;
    "isPolicyWalletCheck(uint32,address)": FunctionFragment;
    "policy(uint32)": FunctionFragment;
    "policyAcceptRoots(uint32)": FunctionFragment;
    "policyAllowUserWhitelists(uint32)": FunctionFragment;
    "policyAttestorAtIndex(uint32,uint256)": FunctionFragment;
    "policyAttestorCount(uint32)": FunctionFragment;
    "policyAttestors(uint32)": FunctionFragment;
    "policyCount()": FunctionFragment;
    "policyDeadline(uint32)": FunctionFragment;
    "policyDescription(uint32)": FunctionFragment;
    "policyGracePeriod(uint32)": FunctionFragment;
    "policyLocked(uint32)": FunctionFragment;
    "policyOwnerRole(uint32)": FunctionFragment;
    "policyRawData(uint32)": FunctionFragment;
    "policyRuleId(uint32)": FunctionFragment;
    "policyTtl(uint32)": FunctionFragment;
    "policyWalletCheckAtIndex(uint32,uint256)": FunctionFragment;
    "policyWalletCheckCount(uint32)": FunctionFragment;
    "policyWalletChecks(uint32)": FunctionFragment;
    "removeAttestor(address)": FunctionFragment;
    "removePolicyAttestors(uint32,address[],uint256)": FunctionFragment;
    "removePolicyWalletChecks(uint32,address[],uint256)": FunctionFragment;
    "removeWalletCheck(address)": FunctionFragment;
    "ruleRegistry()": FunctionFragment;
    "setDeadline(uint32,uint256)": FunctionFragment;
    "updateAttestorUri(address,string)": FunctionFragment;
    "updatePolicyAcceptRoots(uint32,uint16,uint256)": FunctionFragment;
    "updatePolicyAllowUserWhitelists(uint32,bool,uint256)": FunctionFragment;
    "updatePolicyDescription(uint32,string,uint256)": FunctionFragment;
    "updatePolicyGracePeriod(uint32,uint32,uint256)": FunctionFragment;
    "updatePolicyLock(uint32,bool,uint256)": FunctionFragment;
    "updatePolicyRuleId(uint32,bytes32,uint256)": FunctionFragment;
    "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)": FunctionFragment;
    "updatePolicyTtl(uint32,uint32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROLE_GLOBAL_ATTESTOR_ADMIN"
      | "ROLE_GLOBAL_ATTESTOR_ADMIN()"
      | "ROLE_GLOBAL_WALLETCHECK_ADMIN"
      | "ROLE_GLOBAL_WALLETCHECK_ADMIN()"
      | "ROLE_POLICY_CREATOR"
      | "ROLE_POLICY_CREATOR()"
      | "addPolicyAttestors"
      | "addPolicyAttestors(uint32,address[],uint256)"
      | "addPolicyWalletChecks"
      | "addPolicyWalletChecks(uint32,address[],uint256)"
      | "admitAttestor"
      | "admitAttestor(address,string)"
      | "admitWalletCheck"
      | "admitWalletCheck(address)"
      | "attestorUri"
      | "attestorUri(address)"
      | "createPolicy"
      | "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])"
      | "globalAttestorAtIndex"
      | "globalAttestorAtIndex(uint256)"
      | "globalAttestorCount"
      | "globalAttestorCount()"
      | "globalWalletCheckAtIndex"
      | "globalWalletCheckAtIndex(uint256)"
      | "globalWalletCheckCount"
      | "globalWalletCheckCount()"
      | "hasRole"
      | "hasRole(bytes32,address)"
      | "init"
      | "init()"
      | "isGlobalAttestor"
      | "isGlobalAttestor(address)"
      | "isGlobalWalletCheck"
      | "isGlobalWalletCheck(address)"
      | "isPolicy"
      | "isPolicy(uint32)"
      | "isPolicyAttestor"
      | "isPolicyAttestor(uint32,address)"
      | "isPolicyWalletCheck"
      | "isPolicyWalletCheck(uint32,address)"
      | "policy"
      | "policy(uint32)"
      | "policyAcceptRoots"
      | "policyAcceptRoots(uint32)"
      | "policyAllowUserWhitelists"
      | "policyAllowUserWhitelists(uint32)"
      | "policyAttestorAtIndex"
      | "policyAttestorAtIndex(uint32,uint256)"
      | "policyAttestorCount"
      | "policyAttestorCount(uint32)"
      | "policyAttestors"
      | "policyAttestors(uint32)"
      | "policyCount"
      | "policyCount()"
      | "policyDeadline"
      | "policyDeadline(uint32)"
      | "policyDescription"
      | "policyDescription(uint32)"
      | "policyGracePeriod"
      | "policyGracePeriod(uint32)"
      | "policyLocked"
      | "policyLocked(uint32)"
      | "policyOwnerRole"
      | "policyOwnerRole(uint32)"
      | "policyRawData"
      | "policyRawData(uint32)"
      | "policyRuleId"
      | "policyRuleId(uint32)"
      | "policyTtl"
      | "policyTtl(uint32)"
      | "policyWalletCheckAtIndex"
      | "policyWalletCheckAtIndex(uint32,uint256)"
      | "policyWalletCheckCount"
      | "policyWalletCheckCount(uint32)"
      | "policyWalletChecks"
      | "policyWalletChecks(uint32)"
      | "removeAttestor"
      | "removeAttestor(address)"
      | "removePolicyAttestors"
      | "removePolicyAttestors(uint32,address[],uint256)"
      | "removePolicyWalletChecks"
      | "removePolicyWalletChecks(uint32,address[],uint256)"
      | "removeWalletCheck"
      | "removeWalletCheck(address)"
      | "ruleRegistry"
      | "ruleRegistry()"
      | "setDeadline"
      | "setDeadline(uint32,uint256)"
      | "updateAttestorUri"
      | "updateAttestorUri(address,string)"
      | "updatePolicyAcceptRoots"
      | "updatePolicyAcceptRoots(uint32,uint16,uint256)"
      | "updatePolicyAllowUserWhitelists"
      | "updatePolicyAllowUserWhitelists(uint32,bool,uint256)"
      | "updatePolicyDescription"
      | "updatePolicyDescription(uint32,string,uint256)"
      | "updatePolicyGracePeriod"
      | "updatePolicyGracePeriod(uint32,uint32,uint256)"
      | "updatePolicyLock"
      | "updatePolicyLock(uint32,bool,uint256)"
      | "updatePolicyRuleId"
      | "updatePolicyRuleId(uint32,bytes32,uint256)"
      | "updatePolicyScalar"
      | "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)"
      | "updatePolicyTtl"
      | "updatePolicyTtl(uint32,uint32,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROLE_GLOBAL_ATTESTOR_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GLOBAL_ATTESTOR_ADMIN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GLOBAL_WALLETCHECK_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_GLOBAL_WALLETCHECK_ADMIN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_POLICY_CREATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_POLICY_CREATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPolicyAttestors",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPolicyAttestors(uint32,address[],uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPolicyWalletChecks",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPolicyWalletChecks(uint32,address[],uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "admitAttestor",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "admitAttestor(address,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "admitWalletCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "admitWalletCheck(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "attestorUri",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "attestorUri(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [
      PolicyStorage.PolicyScalarStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])",
    values: [
      PolicyStorage.PolicyScalarStruct,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "globalAttestorAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalAttestorAtIndex(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalAttestorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalAttestorCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalWalletCheckAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalWalletCheckAtIndex(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalWalletCheckCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalWalletCheckCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(functionFragment: "init()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGlobalAttestor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalAttestor(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalWalletCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalWalletCheck(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicy(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyAttestor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyAttestor(uint32,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyWalletCheck",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyWalletCheck(uint32,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "policy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policy(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAcceptRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAcceptRoots(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAllowUserWhitelists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAllowUserWhitelists(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAttestorAtIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAttestorAtIndex(uint32,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAttestorCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAttestorCount(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAttestors",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyAttestors(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "policyCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "policyDeadline",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyDeadline(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyDescription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyDescription(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyGracePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyGracePeriod(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyLocked",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyLocked(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyOwnerRole",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyOwnerRole(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyRawData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyRawData(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyRuleId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyRuleId(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyTtl",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyTtl(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyWalletCheckAtIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyWalletCheckAtIndex(uint32,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyWalletCheckCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyWalletCheckCount(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyWalletChecks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "policyWalletChecks(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAttestor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAttestor(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicyAttestors",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicyAttestors(uint32,address[],uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicyWalletChecks",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removePolicyWalletChecks(uint32,address[],uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWalletCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWalletCheck(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ruleRegistry()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadline",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeadline(uint32,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttestorUri",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAttestorUri(address,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyAcceptRoots",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyAcceptRoots(uint32,uint16,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyAllowUserWhitelists",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyAllowUserWhitelists(uint32,bool,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyDescription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyDescription(uint32,string,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyGracePeriod",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyGracePeriod(uint32,uint32,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyLock",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyLock(uint32,bool,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyRuleId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyRuleId(uint32,bytes32,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyScalar",
    values: [
      PromiseOrValue<BigNumberish>,
      PolicyStorage.PolicyScalarStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PolicyStorage.PolicyScalarStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyTtl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePolicyTtl(uint32,uint32,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLE_GLOBAL_ATTESTOR_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GLOBAL_ATTESTOR_ADMIN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GLOBAL_WALLETCHECK_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_GLOBAL_WALLETCHECK_ADMIN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_POLICY_CREATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_POLICY_CREATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPolicyAttestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPolicyAttestors(uint32,address[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPolicyWalletChecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPolicyWalletChecks(uint32,address[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admitAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admitAttestor(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admitWalletCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admitWalletCheck(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestorUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestorUri(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAttestorAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAttestorAtIndex(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAttestorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAttestorCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalWalletCheckAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalWalletCheckAtIndex(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalWalletCheckCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalWalletCheckCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalAttestor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalWalletCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalWalletCheck(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPolicy(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyAttestor(uint32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyWalletCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyWalletCheck(uint32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policy(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAcceptRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAcceptRoots(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAllowUserWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAllowUserWhitelists(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAttestorAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAttestorAtIndex(uint32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAttestorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAttestorCount(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAttestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyAttestors(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyDeadline(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyDescription(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyGracePeriod(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyLocked(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyOwnerRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyOwnerRole(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyRawData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyRawData(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyRuleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyRuleId(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policyTtl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyTtl(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyWalletCheckAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyWalletCheckAtIndex(uint32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyWalletCheckCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyWalletCheckCount(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyWalletChecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyWalletChecks(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAttestor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAttestor(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicyAttestors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicyAttestors(uint32,address[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicyWalletChecks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePolicyWalletChecks(uint32,address[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWalletCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWalletCheck(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleRegistry()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeadline(uint32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttestorUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAttestorUri(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyAcceptRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyAcceptRoots(uint32,uint16,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyAllowUserWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyAllowUserWhitelists(uint32,bool,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyDescription(uint32,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyGracePeriod(uint32,uint32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyLock(uint32,bool,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyRuleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyRuleId(uint32,bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyTtl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePolicyTtl(uint32,uint32,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "AddPolicyAttestors(address,uint32,address[],uint256)": EventFragment;
    "AddPolicyWalletChecks(address,uint32,address[],uint256)": EventFragment;
    "AdmitAttestor(address,address,string)": EventFragment;
    "AdmitWalletCheck(address,address)": EventFragment;
    "CreatePolicy(address,uint32,tuple,address[],address[],bytes32,bytes32)": EventFragment;
    "PolicyManagerDeployed(address,address,address)": EventFragment;
    "PolicyManagerInitialized(address)": EventFragment;
    "RemoveAttestor(address,address)": EventFragment;
    "RemovePolicyAttestors(address,uint32,address[],uint256)": EventFragment;
    "RemovePolicyWalletChecks(address,uint32,address[],uint256)": EventFragment;
    "RemoveWalletCheck(address,address)": EventFragment;
    "UpdateAttestorUri(address,address,string)": EventFragment;
    "UpdatePolicyAcceptRoots(address,uint32,uint16,uint256)": EventFragment;
    "UpdatePolicyAllowUserWhitelists(address,uint32,bool,uint256)": EventFragment;
    "UpdatePolicyDeadline(address,uint32,uint256)": EventFragment;
    "UpdatePolicyDescription(address,uint32,string,uint256)": EventFragment;
    "UpdatePolicyGracePeriod(address,uint32,uint128,uint256)": EventFragment;
    "UpdatePolicyLock(address,uint32,bool,uint256)": EventFragment;
    "UpdatePolicyRuleId(address,uint32,bytes32,uint256)": EventFragment;
    "UpdatePolicyScalar(address,uint32,tuple,uint256)": EventFragment;
    "UpdatePolicyTtl(address,uint32,uint128,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPolicyAttestors"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddPolicyAttestors(address,uint32,address[],uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddPolicyWalletChecks"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddPolicyWalletChecks(address,uint32,address[],uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdmitAttestor"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdmitAttestor(address,address,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdmitWalletCheck"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdmitWalletCheck(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePolicy"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreatePolicy(address,uint32,tuple,address[],address[],bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyManagerDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PolicyManagerDeployed(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyManagerInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PolicyManagerInitialized(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAttestor"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveAttestor(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovePolicyAttestors"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemovePolicyAttestors(address,uint32,address[],uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovePolicyWalletChecks"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemovePolicyWalletChecks(address,uint32,address[],uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveWalletCheck"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveWalletCheck(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateAttestorUri"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateAttestorUri(address,address,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyAcceptRoots"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyAcceptRoots(address,uint32,uint16,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyAllowUserWhitelists"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyAllowUserWhitelists(address,uint32,bool,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyDeadline"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyDeadline(address,uint32,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyDescription"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyDescription(address,uint32,string,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyGracePeriod"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyGracePeriod(address,uint32,uint128,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyLock"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyLock(address,uint32,bool,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyRuleId"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyRuleId(address,uint32,bytes32,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyScalar"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyScalar(address,uint32,tuple,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePolicyTtl"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePolicyTtl(address,uint32,uint128,uint256)"
  ): EventFragment;
}

export interface AddPolicyAttestorsEventObject {
  owner: string;
  policyId: number;
  attestors: string[];
  deadline: BigNumber;
}
export type AddPolicyAttestorsEvent = TypedEvent<
  [string, number, string[], BigNumber],
  AddPolicyAttestorsEventObject
>;

export type AddPolicyAttestorsEventFilter =
  TypedEventFilter<AddPolicyAttestorsEvent>;

export interface AddPolicyWalletChecksEventObject {
  owner: string;
  policyId: number;
  walletChecks: string[];
  deadline: BigNumber;
}
export type AddPolicyWalletChecksEvent = TypedEvent<
  [string, number, string[], BigNumber],
  AddPolicyWalletChecksEventObject
>;

export type AddPolicyWalletChecksEventFilter =
  TypedEventFilter<AddPolicyWalletChecksEvent>;

export interface AdmitAttestorEventObject {
  admin: string;
  attestor: string;
  uri: string;
}
export type AdmitAttestorEvent = TypedEvent<
  [string, string, string],
  AdmitAttestorEventObject
>;

export type AdmitAttestorEventFilter = TypedEventFilter<AdmitAttestorEvent>;

export interface AdmitWalletCheckEventObject {
  admin: string;
  walletCheck: string;
}
export type AdmitWalletCheckEvent = TypedEvent<
  [string, string],
  AdmitWalletCheckEventObject
>;

export type AdmitWalletCheckEventFilter =
  TypedEventFilter<AdmitWalletCheckEvent>;

export interface CreatePolicyEventObject {
  owner: string;
  policyId: number;
  policyScalar: PolicyStorage.PolicyScalarStructOutput;
  attestors: string[];
  walletChecks: string[];
  policyOwnerRole: string;
  policyUserAdminRole: string;
}
export type CreatePolicyEvent = TypedEvent<
  [
    string,
    number,
    PolicyStorage.PolicyScalarStructOutput,
    string[],
    string[],
    string,
    string
  ],
  CreatePolicyEventObject
>;

export type CreatePolicyEventFilter = TypedEventFilter<CreatePolicyEvent>;

export interface PolicyManagerDeployedEventObject {
  deployer: string;
  trustedForwarder: string;
  ruleRegistry: string;
}
export type PolicyManagerDeployedEvent = TypedEvent<
  [string, string, string],
  PolicyManagerDeployedEventObject
>;

export type PolicyManagerDeployedEventFilter =
  TypedEventFilter<PolicyManagerDeployedEvent>;

export interface PolicyManagerInitializedEventObject {
  admin: string;
}
export type PolicyManagerInitializedEvent = TypedEvent<
  [string],
  PolicyManagerInitializedEventObject
>;

export type PolicyManagerInitializedEventFilter =
  TypedEventFilter<PolicyManagerInitializedEvent>;

export interface RemoveAttestorEventObject {
  admin: string;
  attestor: string;
}
export type RemoveAttestorEvent = TypedEvent<
  [string, string],
  RemoveAttestorEventObject
>;

export type RemoveAttestorEventFilter = TypedEventFilter<RemoveAttestorEvent>;

export interface RemovePolicyAttestorsEventObject {
  owner: string;
  policyId: number;
  attestor: string[];
  deadline: BigNumber;
}
export type RemovePolicyAttestorsEvent = TypedEvent<
  [string, number, string[], BigNumber],
  RemovePolicyAttestorsEventObject
>;

export type RemovePolicyAttestorsEventFilter =
  TypedEventFilter<RemovePolicyAttestorsEvent>;

export interface RemovePolicyWalletChecksEventObject {
  owner: string;
  policyId: number;
  walletChecks: string[];
  deadline: BigNumber;
}
export type RemovePolicyWalletChecksEvent = TypedEvent<
  [string, number, string[], BigNumber],
  RemovePolicyWalletChecksEventObject
>;

export type RemovePolicyWalletChecksEventFilter =
  TypedEventFilter<RemovePolicyWalletChecksEvent>;

export interface RemoveWalletCheckEventObject {
  admin: string;
  walletCheck: string;
}
export type RemoveWalletCheckEvent = TypedEvent<
  [string, string],
  RemoveWalletCheckEventObject
>;

export type RemoveWalletCheckEventFilter =
  TypedEventFilter<RemoveWalletCheckEvent>;

export interface UpdateAttestorUriEventObject {
  admin: string;
  attestor: string;
  uri: string;
}
export type UpdateAttestorUriEvent = TypedEvent<
  [string, string, string],
  UpdateAttestorUriEventObject
>;

export type UpdateAttestorUriEventFilter =
  TypedEventFilter<UpdateAttestorUriEvent>;

export interface UpdatePolicyAcceptRootsEventObject {
  owner: string;
  policyId: number;
  acceptRoots: number;
  deadline: BigNumber;
}
export type UpdatePolicyAcceptRootsEvent = TypedEvent<
  [string, number, number, BigNumber],
  UpdatePolicyAcceptRootsEventObject
>;

export type UpdatePolicyAcceptRootsEventFilter =
  TypedEventFilter<UpdatePolicyAcceptRootsEvent>;

export interface UpdatePolicyAllowUserWhitelistsEventObject {
  owner: string;
  policyId: number;
  allowUserWhitelists: boolean;
  deadline: BigNumber;
}
export type UpdatePolicyAllowUserWhitelistsEvent = TypedEvent<
  [string, number, boolean, BigNumber],
  UpdatePolicyAllowUserWhitelistsEventObject
>;

export type UpdatePolicyAllowUserWhitelistsEventFilter =
  TypedEventFilter<UpdatePolicyAllowUserWhitelistsEvent>;

export interface UpdatePolicyDeadlineEventObject {
  owner: string;
  policyId: number;
  deadline: BigNumber;
}
export type UpdatePolicyDeadlineEvent = TypedEvent<
  [string, number, BigNumber],
  UpdatePolicyDeadlineEventObject
>;

export type UpdatePolicyDeadlineEventFilter =
  TypedEventFilter<UpdatePolicyDeadlineEvent>;

export interface UpdatePolicyDescriptionEventObject {
  owner: string;
  policyId: number;
  description: string;
  deadline: BigNumber;
}
export type UpdatePolicyDescriptionEvent = TypedEvent<
  [string, number, string, BigNumber],
  UpdatePolicyDescriptionEventObject
>;

export type UpdatePolicyDescriptionEventFilter =
  TypedEventFilter<UpdatePolicyDescriptionEvent>;

export interface UpdatePolicyGracePeriodEventObject {
  owner: string;
  policyId: number;
  gracePeriod: BigNumber;
  deadline: BigNumber;
}
export type UpdatePolicyGracePeriodEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  UpdatePolicyGracePeriodEventObject
>;

export type UpdatePolicyGracePeriodEventFilter =
  TypedEventFilter<UpdatePolicyGracePeriodEvent>;

export interface UpdatePolicyLockEventObject {
  owner: string;
  policyId: number;
  locked: boolean;
  deadline: BigNumber;
}
export type UpdatePolicyLockEvent = TypedEvent<
  [string, number, boolean, BigNumber],
  UpdatePolicyLockEventObject
>;

export type UpdatePolicyLockEventFilter =
  TypedEventFilter<UpdatePolicyLockEvent>;

export interface UpdatePolicyRuleIdEventObject {
  owner: string;
  policyId: number;
  ruleId: string;
  deadline: BigNumber;
}
export type UpdatePolicyRuleIdEvent = TypedEvent<
  [string, number, string, BigNumber],
  UpdatePolicyRuleIdEventObject
>;

export type UpdatePolicyRuleIdEventFilter =
  TypedEventFilter<UpdatePolicyRuleIdEvent>;

export interface UpdatePolicyScalarEventObject {
  owner: string;
  policyId: number;
  policyScalar: PolicyStorage.PolicyScalarStructOutput;
  deadline: BigNumber;
}
export type UpdatePolicyScalarEvent = TypedEvent<
  [string, number, PolicyStorage.PolicyScalarStructOutput, BigNumber],
  UpdatePolicyScalarEventObject
>;

export type UpdatePolicyScalarEventFilter =
  TypedEventFilter<UpdatePolicyScalarEvent>;

export interface UpdatePolicyTtlEventObject {
  owner: string;
  policyId: number;
  ttl: BigNumber;
  deadline: BigNumber;
}
export type UpdatePolicyTtlEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  UpdatePolicyTtlEventObject
>;

export type UpdatePolicyTtlEventFilter = TypedEventFilter<UpdatePolicyTtlEvent>;

export interface IPolicyManager extends BaseContract {
  contractName: "IPolicyManager";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPolicyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROLE_GLOBAL_ATTESTOR_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_GLOBAL_ATTESTOR_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ROLE_GLOBAL_WALLETCHECK_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_GLOBAL_WALLETCHECK_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    ROLE_POLICY_CREATOR(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_POLICY_CREATOR()"(overrides?: CallOverrides): Promise<[string]>;

    addPolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addPolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addPolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admitAttestor(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "admitAttestor(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admitWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "admitWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    attestorUri(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "attestorUri(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createPolicy(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])"(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    globalAttestorAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { attestor: string }>;

    "globalAttestorAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { attestor: string }>;

    globalAttestorCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "globalAttestorCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    globalWalletCheckAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { walletCheck: string }>;

    "globalWalletCheckAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { walletCheck: string }>;

    globalWalletCheckCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "globalWalletCheckCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "init()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isGlobalAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    "isGlobalAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    isGlobalWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    "isGlobalWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    isPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    "isPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    isPolicyAttestor(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "isPolicyAttestor(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPolicyWalletCheck(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "isPolicyWalletCheck(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyAcceptRoots(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyAllowUserWhitelists(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyAttestorAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyAttestorAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyAttestorCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyAttestorCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyAttestors(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "policyCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    policyDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyDeadline(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyDescription(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyGracePeriod(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyLocked(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyLocked(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyOwnerRole(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { ownerRole: string }>;

    "policyOwnerRole(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { ownerRole: string }>;

    policyRawData(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        PolicyStorage.PolicyScalarStructOutput,
        PolicyStorage.PolicyScalarStructOutput,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[]
      ] & {
        deadline: BigNumber;
        scalarActive: PolicyStorage.PolicyScalarStructOutput;
        scalarPending: PolicyStorage.PolicyScalarStructOutput;
        attestorsActive: string[];
        attestorsPendingAdditions: string[];
        attestorsPendingRemovals: string[];
        walletChecksActive: string[];
        walletChecksPendingAdditions: string[];
        walletChecksPendingRemovals: string[];
      }
    >;

    "policyRawData(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        PolicyStorage.PolicyScalarStructOutput,
        PolicyStorage.PolicyScalarStructOutput,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[]
      ] & {
        deadline: BigNumber;
        scalarActive: PolicyStorage.PolicyScalarStructOutput;
        scalarPending: PolicyStorage.PolicyScalarStructOutput;
        attestorsActive: string[];
        attestorsPendingAdditions: string[];
        attestorsPendingRemovals: string[];
        walletChecksActive: string[];
        walletChecksPendingAdditions: string[];
        walletChecksPendingRemovals: string[];
      }
    >;

    policyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyRuleId(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyTtl(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyWalletCheckAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyWalletCheckAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyWalletCheckCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyWalletCheckCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    policyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "policyWalletChecks(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removePolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removePolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ruleRegistry(overrides?: CallOverrides): Promise<[string]>;

    "ruleRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    setDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setDeadline(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAttestorUri(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateAttestorUri(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyAcceptRoots(uint32,uint16,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyAllowUserWhitelists(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyDescription(uint32,string,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyGracePeriod(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyLock(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyLock(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyRuleId(uint32,bytes32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyScalar(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePolicyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updatePolicyTtl(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ROLE_GLOBAL_ATTESTOR_ADMIN(overrides?: CallOverrides): Promise<string>;

  "ROLE_GLOBAL_ATTESTOR_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  ROLE_GLOBAL_WALLETCHECK_ADMIN(overrides?: CallOverrides): Promise<string>;

  "ROLE_GLOBAL_WALLETCHECK_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  ROLE_POLICY_CREATOR(overrides?: CallOverrides): Promise<string>;

  "ROLE_POLICY_CREATOR()"(overrides?: CallOverrides): Promise<string>;

  addPolicyAttestors(
    policyId: PromiseOrValue<BigNumberish>,
    attestors: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addPolicyAttestors(uint32,address[],uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    attestors: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPolicyWalletChecks(
    policyId: PromiseOrValue<BigNumberish>,
    walletChecks: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addPolicyWalletChecks(uint32,address[],uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    walletChecks: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admitAttestor(
    attestor: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "admitAttestor(address,string)"(
    attestor: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admitWalletCheck(
    walletCheck: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "admitWalletCheck(address)"(
    walletCheck: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  attestorUri(
    attestor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "attestorUri(address)"(
    attestor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  createPolicy(
    policyScalar: PolicyStorage.PolicyScalarStruct,
    attestors: PromiseOrValue<string>[],
    walletChecks: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])"(
    policyScalar: PolicyStorage.PolicyScalarStruct,
    attestors: PromiseOrValue<string>[],
    walletChecks: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  globalAttestorAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "globalAttestorAtIndex(uint256)"(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  globalAttestorCount(overrides?: CallOverrides): Promise<BigNumber>;

  "globalAttestorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  globalWalletCheckAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "globalWalletCheckAtIndex(uint256)"(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  globalWalletCheckCount(overrides?: CallOverrides): Promise<BigNumber>;

  "globalWalletCheckCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "init()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isGlobalAttestor(
    attestor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGlobalAttestor(address)"(
    attestor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGlobalWalletCheck(
    walletCheck: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGlobalWalletCheck(address)"(
    walletCheck: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPolicy(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPolicy(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPolicyAttestor(
    policyId: PromiseOrValue<BigNumberish>,
    attestor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "isPolicyAttestor(uint32,address)"(
    policyId: PromiseOrValue<BigNumberish>,
    attestor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPolicyWalletCheck(
    policyId: PromiseOrValue<BigNumberish>,
    walletCheck: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "isPolicyWalletCheck(uint32,address)"(
    policyId: PromiseOrValue<BigNumberish>,
    walletCheck: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policy(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policy(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyAcceptRoots(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyAcceptRoots(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyAllowUserWhitelists(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyAllowUserWhitelists(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyAttestorAtIndex(
    policyId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyAttestorAtIndex(uint32,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyAttestorCount(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyAttestorCount(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyAttestors(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyAttestors(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyCount(overrides?: CallOverrides): Promise<BigNumber>;

  "policyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  policyDeadline(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyDeadline(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyDescription(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyDescription(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyGracePeriod(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyGracePeriod(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyLocked(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyLocked(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyOwnerRole(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "policyOwnerRole(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  policyRawData(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      PolicyStorage.PolicyScalarStructOutput,
      PolicyStorage.PolicyScalarStructOutput,
      string[],
      string[],
      string[],
      string[],
      string[],
      string[]
    ] & {
      deadline: BigNumber;
      scalarActive: PolicyStorage.PolicyScalarStructOutput;
      scalarPending: PolicyStorage.PolicyScalarStructOutput;
      attestorsActive: string[];
      attestorsPendingAdditions: string[];
      attestorsPendingRemovals: string[];
      walletChecksActive: string[];
      walletChecksPendingAdditions: string[];
      walletChecksPendingRemovals: string[];
    }
  >;

  "policyRawData(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      PolicyStorage.PolicyScalarStructOutput,
      PolicyStorage.PolicyScalarStructOutput,
      string[],
      string[],
      string[],
      string[],
      string[],
      string[]
    ] & {
      deadline: BigNumber;
      scalarActive: PolicyStorage.PolicyScalarStructOutput;
      scalarPending: PolicyStorage.PolicyScalarStructOutput;
      attestorsActive: string[];
      attestorsPendingAdditions: string[];
      attestorsPendingRemovals: string[];
      walletChecksActive: string[];
      walletChecksPendingAdditions: string[];
      walletChecksPendingRemovals: string[];
    }
  >;

  policyRuleId(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyRuleId(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyTtl(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyTtl(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyWalletCheckAtIndex(
    policyId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyWalletCheckAtIndex(uint32,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyWalletCheckCount(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyWalletCheckCount(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  policyWalletChecks(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "policyWalletChecks(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAttestor(
    attestor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeAttestor(address)"(
    attestor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePolicyAttestors(
    policyId: PromiseOrValue<BigNumberish>,
    attestors: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removePolicyAttestors(uint32,address[],uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    attestors: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePolicyWalletChecks(
    policyId: PromiseOrValue<BigNumberish>,
    walletChecks: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removePolicyWalletChecks(uint32,address[],uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    walletChecks: PromiseOrValue<string>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWalletCheck(
    walletCheck: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeWalletCheck(address)"(
    walletCheck: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ruleRegistry(overrides?: CallOverrides): Promise<string>;

  "ruleRegistry()"(overrides?: CallOverrides): Promise<string>;

  setDeadline(
    policyId: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setDeadline(uint32,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAttestorUri(
    attestor: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateAttestorUri(address,string)"(
    attestor: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyAcceptRoots(
    policyId: PromiseOrValue<BigNumberish>,
    acceptRoots: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyAcceptRoots(uint32,uint16,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    acceptRoots: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyAllowUserWhitelists(
    policyId: PromiseOrValue<BigNumberish>,
    allowUserWhitelists: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyAllowUserWhitelists(uint32,bool,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    allowUserWhitelists: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyDescription(
    policyId: PromiseOrValue<BigNumberish>,
    descriptionUtf8: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyDescription(uint32,string,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    descriptionUtf8: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyGracePeriod(
    policyId: PromiseOrValue<BigNumberish>,
    gracePeriod: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyGracePeriod(uint32,uint32,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    gracePeriod: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyLock(
    policyId: PromiseOrValue<BigNumberish>,
    locked: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyLock(uint32,bool,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    locked: PromiseOrValue<boolean>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyRuleId(
    policyId: PromiseOrValue<BigNumberish>,
    ruleId: PromiseOrValue<BytesLike>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyRuleId(uint32,bytes32,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    ruleId: PromiseOrValue<BytesLike>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyScalar(
    policyId: PromiseOrValue<BigNumberish>,
    policyScalar: PolicyStorage.PolicyScalarStruct,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    policyScalar: PolicyStorage.PolicyScalarStruct,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePolicyTtl(
    policyId: PromiseOrValue<BigNumberish>,
    ttl: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updatePolicyTtl(uint32,uint32,uint256)"(
    policyId: PromiseOrValue<BigNumberish>,
    ttl: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLE_GLOBAL_ATTESTOR_ADMIN(overrides?: CallOverrides): Promise<string>;

    "ROLE_GLOBAL_ATTESTOR_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    ROLE_GLOBAL_WALLETCHECK_ADMIN(overrides?: CallOverrides): Promise<string>;

    "ROLE_GLOBAL_WALLETCHECK_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<string>;

    ROLE_POLICY_CREATOR(overrides?: CallOverrides): Promise<string>;

    "ROLE_POLICY_CREATOR()"(overrides?: CallOverrides): Promise<string>;

    addPolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    admitAttestor(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "admitAttestor(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admitWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "admitWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    attestorUri(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "attestorUri(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    createPolicy(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        policyId: number;
        policyOwnerRoleId: string;
        policyUserAdminRoleId: string;
      }
    >;

    "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])"(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [number, string, string] & {
        policyId: number;
        policyOwnerRoleId: string;
        policyUserAdminRoleId: string;
      }
    >;

    globalAttestorAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "globalAttestorAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    globalAttestorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "globalAttestorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalWalletCheckAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "globalWalletCheckAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    globalWalletCheckCount(overrides?: CallOverrides): Promise<BigNumber>;

    "globalWalletCheckCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(overrides?: CallOverrides): Promise<void>;

    "init()"(overrides?: CallOverrides): Promise<void>;

    isGlobalAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGlobalAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGlobalWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGlobalWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPolicyAttestor(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPolicyAttestor(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPolicyWalletCheck(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPolicyWalletCheck(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    policy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        PolicyStorage.PolicyScalarStructOutput,
        string[],
        string[],
        BigNumber
      ] & {
        scalar: PolicyStorage.PolicyScalarStructOutput;
        attestors: string[];
        walletChecks: string[];
        deadline: BigNumber;
      }
    >;

    "policy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        PolicyStorage.PolicyScalarStructOutput,
        string[],
        string[],
        BigNumber
      ] & {
        scalar: PolicyStorage.PolicyScalarStructOutput;
        attestors: string[];
        walletChecks: string[];
        deadline: BigNumber;
      }
    >;

    policyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    "policyAcceptRoots(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    policyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "policyAllowUserWhitelists(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    policyAttestorAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "policyAttestorAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    policyAttestorCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policyAttestorCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "policyAttestors(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    policyCount(overrides?: CallOverrides): Promise<BigNumber>;

    "policyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    policyDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policyDeadline(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "policyDescription(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    policyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policyGracePeriod(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyLocked(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "policyLocked(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    policyOwnerRole(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "policyOwnerRole(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    policyRawData(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        PolicyStorage.PolicyScalarStructOutput,
        PolicyStorage.PolicyScalarStructOutput,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[]
      ] & {
        deadline: BigNumber;
        scalarActive: PolicyStorage.PolicyScalarStructOutput;
        scalarPending: PolicyStorage.PolicyScalarStructOutput;
        attestorsActive: string[];
        attestorsPendingAdditions: string[];
        attestorsPendingRemovals: string[];
        walletChecksActive: string[];
        walletChecksPendingAdditions: string[];
        walletChecksPendingRemovals: string[];
      }
    >;

    "policyRawData(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        PolicyStorage.PolicyScalarStructOutput,
        PolicyStorage.PolicyScalarStructOutput,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[]
      ] & {
        deadline: BigNumber;
        scalarActive: PolicyStorage.PolicyScalarStructOutput;
        scalarPending: PolicyStorage.PolicyScalarStructOutput;
        attestorsActive: string[];
        attestorsPendingAdditions: string[];
        attestorsPendingRemovals: string[];
        walletChecksActive: string[];
        walletChecksPendingAdditions: string[];
        walletChecksPendingRemovals: string[];
      }
    >;

    policyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "policyRuleId(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    policyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policyTtl(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyWalletCheckAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "policyWalletCheckAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    policyWalletCheckCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policyWalletCheckCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "policyWalletChecks(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    removeAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removePolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removePolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removePolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    ruleRegistry(overrides?: CallOverrides): Promise<string>;

    "ruleRegistry()"(overrides?: CallOverrides): Promise<string>;

    setDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDeadline(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAttestorUri(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateAttestorUri(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyAcceptRoots(uint32,uint16,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyAllowUserWhitelists(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyDescription(uint32,string,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyGracePeriod(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyLock(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyLock(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyRuleId(uint32,bytes32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyScalar(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePolicyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePolicyTtl(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddPolicyAttestors(address,uint32,address[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      attestors?: null,
      deadline?: null
    ): AddPolicyAttestorsEventFilter;
    AddPolicyAttestors(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      attestors?: null,
      deadline?: null
    ): AddPolicyAttestorsEventFilter;

    "AddPolicyWalletChecks(address,uint32,address[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      walletChecks?: null,
      deadline?: null
    ): AddPolicyWalletChecksEventFilter;
    AddPolicyWalletChecks(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      walletChecks?: null,
      deadline?: null
    ): AddPolicyWalletChecksEventFilter;

    "AdmitAttestor(address,address,string)"(
      admin?: PromiseOrValue<string> | null,
      attestor?: PromiseOrValue<string> | null,
      uri?: null
    ): AdmitAttestorEventFilter;
    AdmitAttestor(
      admin?: PromiseOrValue<string> | null,
      attestor?: PromiseOrValue<string> | null,
      uri?: null
    ): AdmitAttestorEventFilter;

    "AdmitWalletCheck(address,address)"(
      admin?: PromiseOrValue<string> | null,
      walletCheck?: PromiseOrValue<string> | null
    ): AdmitWalletCheckEventFilter;
    AdmitWalletCheck(
      admin?: PromiseOrValue<string> | null,
      walletCheck?: PromiseOrValue<string> | null
    ): AdmitWalletCheckEventFilter;

    "CreatePolicy(address,uint32,tuple,address[],address[],bytes32,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      policyScalar?: null,
      attestors?: null,
      walletChecks?: null,
      policyOwnerRole?: null,
      policyUserAdminRole?: null
    ): CreatePolicyEventFilter;
    CreatePolicy(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      policyScalar?: null,
      attestors?: null,
      walletChecks?: null,
      policyOwnerRole?: null,
      policyUserAdminRole?: null
    ): CreatePolicyEventFilter;

    "PolicyManagerDeployed(address,address,address)"(
      deployer?: null,
      trustedForwarder?: null,
      ruleRegistry?: null
    ): PolicyManagerDeployedEventFilter;
    PolicyManagerDeployed(
      deployer?: null,
      trustedForwarder?: null,
      ruleRegistry?: null
    ): PolicyManagerDeployedEventFilter;

    "PolicyManagerInitialized(address)"(
      admin?: null
    ): PolicyManagerInitializedEventFilter;
    PolicyManagerInitialized(admin?: null): PolicyManagerInitializedEventFilter;

    "RemoveAttestor(address,address)"(
      admin?: PromiseOrValue<string> | null,
      attestor?: PromiseOrValue<string> | null
    ): RemoveAttestorEventFilter;
    RemoveAttestor(
      admin?: PromiseOrValue<string> | null,
      attestor?: PromiseOrValue<string> | null
    ): RemoveAttestorEventFilter;

    "RemovePolicyAttestors(address,uint32,address[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      attestor?: null,
      deadline?: null
    ): RemovePolicyAttestorsEventFilter;
    RemovePolicyAttestors(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      attestor?: null,
      deadline?: null
    ): RemovePolicyAttestorsEventFilter;

    "RemovePolicyWalletChecks(address,uint32,address[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      walletChecks?: null,
      deadline?: null
    ): RemovePolicyWalletChecksEventFilter;
    RemovePolicyWalletChecks(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      walletChecks?: null,
      deadline?: null
    ): RemovePolicyWalletChecksEventFilter;

    "RemoveWalletCheck(address,address)"(
      admin?: PromiseOrValue<string> | null,
      walletCheck?: PromiseOrValue<string> | null
    ): RemoveWalletCheckEventFilter;
    RemoveWalletCheck(
      admin?: PromiseOrValue<string> | null,
      walletCheck?: PromiseOrValue<string> | null
    ): RemoveWalletCheckEventFilter;

    "UpdateAttestorUri(address,address,string)"(
      admin?: PromiseOrValue<string> | null,
      attestor?: PromiseOrValue<string> | null,
      uri?: null
    ): UpdateAttestorUriEventFilter;
    UpdateAttestorUri(
      admin?: PromiseOrValue<string> | null,
      attestor?: PromiseOrValue<string> | null,
      uri?: null
    ): UpdateAttestorUriEventFilter;

    "UpdatePolicyAcceptRoots(address,uint32,uint16,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      acceptRoots?: null,
      deadline?: null
    ): UpdatePolicyAcceptRootsEventFilter;
    UpdatePolicyAcceptRoots(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      acceptRoots?: null,
      deadline?: null
    ): UpdatePolicyAcceptRootsEventFilter;

    "UpdatePolicyAllowUserWhitelists(address,uint32,bool,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      allowUserWhitelists?: null,
      deadline?: null
    ): UpdatePolicyAllowUserWhitelistsEventFilter;
    UpdatePolicyAllowUserWhitelists(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      allowUserWhitelists?: null,
      deadline?: null
    ): UpdatePolicyAllowUserWhitelistsEventFilter;

    "UpdatePolicyDeadline(address,uint32,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      deadline?: null
    ): UpdatePolicyDeadlineEventFilter;
    UpdatePolicyDeadline(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      deadline?: null
    ): UpdatePolicyDeadlineEventFilter;

    "UpdatePolicyDescription(address,uint32,string,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      deadline?: null
    ): UpdatePolicyDescriptionEventFilter;
    UpdatePolicyDescription(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      description?: null,
      deadline?: null
    ): UpdatePolicyDescriptionEventFilter;

    "UpdatePolicyGracePeriod(address,uint32,uint128,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      gracePeriod?: null,
      deadline?: null
    ): UpdatePolicyGracePeriodEventFilter;
    UpdatePolicyGracePeriod(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      gracePeriod?: null,
      deadline?: null
    ): UpdatePolicyGracePeriodEventFilter;

    "UpdatePolicyLock(address,uint32,bool,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      locked?: null,
      deadline?: null
    ): UpdatePolicyLockEventFilter;
    UpdatePolicyLock(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      locked?: null,
      deadline?: null
    ): UpdatePolicyLockEventFilter;

    "UpdatePolicyRuleId(address,uint32,bytes32,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      ruleId?: PromiseOrValue<BytesLike> | null,
      deadline?: null
    ): UpdatePolicyRuleIdEventFilter;
    UpdatePolicyRuleId(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      ruleId?: PromiseOrValue<BytesLike> | null,
      deadline?: null
    ): UpdatePolicyRuleIdEventFilter;

    "UpdatePolicyScalar(address,uint32,tuple,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      policyScalar?: null,
      deadline?: null
    ): UpdatePolicyScalarEventFilter;
    UpdatePolicyScalar(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      policyScalar?: null,
      deadline?: null
    ): UpdatePolicyScalarEventFilter;

    "UpdatePolicyTtl(address,uint32,uint128,uint256)"(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      ttl?: null,
      deadline?: null
    ): UpdatePolicyTtlEventFilter;
    UpdatePolicyTtl(
      owner?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null,
      ttl?: null,
      deadline?: null
    ): UpdatePolicyTtlEventFilter;
  };

  estimateGas: {
    ROLE_GLOBAL_ATTESTOR_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_GLOBAL_ATTESTOR_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ROLE_GLOBAL_WALLETCHECK_ADMIN(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ROLE_GLOBAL_WALLETCHECK_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ROLE_POLICY_CREATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_POLICY_CREATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    addPolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addPolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addPolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admitAttestor(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "admitAttestor(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admitWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "admitWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    attestorUri(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "attestorUri(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolicy(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])"(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    globalAttestorAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "globalAttestorAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalAttestorCount(overrides?: CallOverrides): Promise<BigNumber>;

    "globalAttestorCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    globalWalletCheckAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "globalWalletCheckAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalWalletCheckCount(overrides?: CallOverrides): Promise<BigNumber>;

    "globalWalletCheckCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "init()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isGlobalAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGlobalAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGlobalWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGlobalWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPolicyAttestor(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "isPolicyAttestor(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPolicyWalletCheck(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "isPolicyWalletCheck(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyAcceptRoots(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyAllowUserWhitelists(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyAttestorAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyAttestorAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyAttestorCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyAttestorCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyAttestors(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyCount(overrides?: CallOverrides): Promise<BigNumber>;

    "policyCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    policyDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyDeadline(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyDescription(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyGracePeriod(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyLocked(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyLocked(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyOwnerRole(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policyOwnerRole(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyRawData(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policyRawData(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyRuleId(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyTtl(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyWalletCheckAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyWalletCheckAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyWalletCheckCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyWalletCheckCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    policyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "policyWalletChecks(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removePolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removePolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ruleRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "ruleRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setDeadline(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAttestorUri(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateAttestorUri(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyAcceptRoots(uint32,uint16,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyAllowUserWhitelists(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyDescription(uint32,string,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyGracePeriod(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyLock(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyLock(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyRuleId(uint32,bytes32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyScalar(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePolicyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updatePolicyTtl(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLE_GLOBAL_ATTESTOR_ADMIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_GLOBAL_ATTESTOR_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_GLOBAL_WALLETCHECK_ADMIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_GLOBAL_WALLETCHECK_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROLE_POLICY_CREATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_POLICY_CREATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addPolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addPolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admitAttestor(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "admitAttestor(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admitWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "admitWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    attestorUri(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "attestorUri(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPolicy(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createPolicy((bytes32,string,uint32,uint32,uint16,bool,bool),address[],address[])"(
      policyScalar: PolicyStorage.PolicyScalarStruct,
      attestors: PromiseOrValue<string>[],
      walletChecks: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    globalAttestorAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalAttestorAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalAttestorCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalAttestorCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalWalletCheckAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalWalletCheckAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalWalletCheckCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalWalletCheckCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "init()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isGlobalAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGlobalAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGlobalWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGlobalWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPolicyAttestor(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "isPolicyAttestor(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPolicyWalletCheck(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "isPolicyWalletCheck(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyAcceptRoots(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyAllowUserWhitelists(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyAttestorAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyAttestorAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyAttestorCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyAttestorCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyAttestors(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "policyCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyDeadline(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyDescription(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyGracePeriod(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyLocked(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyLocked(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyOwnerRole(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "policyOwnerRole(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policyRawData(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "policyRawData(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyRuleId(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyTtl(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyWalletCheckAtIndex(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyWalletCheckAtIndex(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyWalletCheckCount(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyWalletCheckCount(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    policyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "policyWalletChecks(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAttestor(
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeAttestor(address)"(
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePolicyAttestors(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removePolicyAttestors(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestors: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePolicyWalletChecks(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removePolicyWalletChecks(uint32,address[],uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      walletChecks: PromiseOrValue<string>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWalletCheck(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeWalletCheck(address)"(
      walletCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ruleRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ruleRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDeadline(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setDeadline(uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAttestorUri(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateAttestorUri(address,string)"(
      attestor: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyAcceptRoots(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyAcceptRoots(uint32,uint16,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      acceptRoots: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyAllowUserWhitelists(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyAllowUserWhitelists(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      allowUserWhitelists: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyDescription(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyDescription(uint32,string,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      descriptionUtf8: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyGracePeriod(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyGracePeriod(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      gracePeriod: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyLock(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyLock(uint32,bool,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      locked: PromiseOrValue<boolean>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyRuleId(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyRuleId(uint32,bytes32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ruleId: PromiseOrValue<BytesLike>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyScalar(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyScalar(uint32,(bytes32,string,uint32,uint32,uint16,bool,bool),uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      policyScalar: PolicyStorage.PolicyScalarStruct,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePolicyTtl(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updatePolicyTtl(uint32,uint32,uint256)"(
      policyId: PromiseOrValue<BigNumberish>,
      ttl: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
