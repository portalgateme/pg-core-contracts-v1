/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IUserPoliciesInterface extends utils.Interface {
  functions: {
    "addWhitelistedTrader(address)": FunctionFragment;
    "isWhitelisted(address,address)": FunctionFragment;
    "removeWhitelistedTrader(address)": FunctionFragment;
    "setUserPolicy(uint32)": FunctionFragment;
    "userPolicies(address)": FunctionFragment;
    "whitelistedTraderAtIndex(address,uint256)": FunctionFragment;
    "whitelistedTraderCount(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addWhitelistedTrader"
      | "addWhitelistedTrader(address)"
      | "isWhitelisted"
      | "isWhitelisted(address,address)"
      | "removeWhitelistedTrader"
      | "removeWhitelistedTrader(address)"
      | "setUserPolicy"
      | "setUserPolicy(uint32)"
      | "userPolicies"
      | "userPolicies(address)"
      | "whitelistedTraderAtIndex"
      | "whitelistedTraderAtIndex(address,uint256)"
      | "whitelistedTraderCount"
      | "whitelistedTraderCount(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addWhitelistedTrader",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistedTrader(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedTrader",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedTrader(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserPolicy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserPolicy(uint32)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userPolicies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userPolicies(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTraderAtIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTraderAtIndex(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTraderCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTraderCount(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelistedTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistedTrader(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedTrader(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserPolicy(uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPolicies(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTraderAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTraderAtIndex(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTraderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTraderCount(address)",
    data: BytesLike
  ): Result;

  events: {
    "AddTraderWhitelisted(address,address)": EventFragment;
    "Deployed(address,address)": EventFragment;
    "RemoveTraderWhitelisted(address,address)": EventFragment;
    "SetUserPolicy(address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddTraderWhitelisted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddTraderWhitelisted(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deployed(address,address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveTraderWhitelisted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveTraderWhitelisted(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUserPolicy"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetUserPolicy(address,uint32)"
  ): EventFragment;
}

export interface AddTraderWhitelistedEventObject {
  arg0: string;
  whitelisted: string;
}
export type AddTraderWhitelistedEvent = TypedEvent<
  [string, string],
  AddTraderWhitelistedEventObject
>;

export type AddTraderWhitelistedEventFilter =
  TypedEventFilter<AddTraderWhitelistedEvent>;

export interface DeployedEventObject {
  trustedForwarder: string;
  policyManager: string;
}
export type DeployedEvent = TypedEvent<[string, string], DeployedEventObject>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface RemoveTraderWhitelistedEventObject {
  arg0: string;
  whitelisted: string;
}
export type RemoveTraderWhitelistedEvent = TypedEvent<
  [string, string],
  RemoveTraderWhitelistedEventObject
>;

export type RemoveTraderWhitelistedEventFilter =
  TypedEventFilter<RemoveTraderWhitelistedEvent>;

export interface SetUserPolicyEventObject {
  trader: string;
  policyId: number;
}
export type SetUserPolicyEvent = TypedEvent<
  [string, number],
  SetUserPolicyEventObject
>;

export type SetUserPolicyEventFilter = TypedEventFilter<SetUserPolicyEvent>;

export interface IUserPolicies extends BaseContract {
  contractName: "IUserPolicies";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUserPoliciesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "addWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWhitelisted(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    "isWhitelisted(address,address)"(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    removeWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "removeWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUserPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setUserPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userPolicies(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "userPolicies(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    whitelistedTraderAtIndex(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { whitelisted: string }>;

    "whitelistedTraderAtIndex(address,uint256)"(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { whitelisted: string }>;

    whitelistedTraderCount(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "whitelistedTraderCount(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  addWhitelistedTrader(
    whitelisted: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "addWhitelistedTrader(address)"(
    whitelisted: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWhitelisted(
    trader: PromiseOrValue<string>,
    counterparty: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelisted(address,address)"(
    trader: PromiseOrValue<string>,
    counterparty: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeWhitelistedTrader(
    whitelisted: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "removeWhitelistedTrader(address)"(
    whitelisted: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUserPolicy(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setUserPolicy(uint32)"(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userPolicies(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  "userPolicies(address)"(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  whitelistedTraderAtIndex(
    trader: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "whitelistedTraderAtIndex(address,uint256)"(
    trader: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  whitelistedTraderCount(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "whitelistedTraderCount(address)"(
    trader: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "addWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelisted(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelisted(address,address)"(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUserPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userPolicies(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    "userPolicies(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    whitelistedTraderAtIndex(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "whitelistedTraderAtIndex(address,uint256)"(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    whitelistedTraderCount(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedTraderCount(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddTraderWhitelisted(address,address)"(
      arg0?: PromiseOrValue<string> | null,
      whitelisted?: PromiseOrValue<string> | null
    ): AddTraderWhitelistedEventFilter;
    AddTraderWhitelisted(
      arg0?: PromiseOrValue<string> | null,
      whitelisted?: PromiseOrValue<string> | null
    ): AddTraderWhitelistedEventFilter;

    "Deployed(address,address)"(
      trustedForwarder?: null,
      policyManager?: null
    ): DeployedEventFilter;
    Deployed(
      trustedForwarder?: null,
      policyManager?: null
    ): DeployedEventFilter;

    "RemoveTraderWhitelisted(address,address)"(
      arg0?: PromiseOrValue<string> | null,
      whitelisted?: PromiseOrValue<string> | null
    ): RemoveTraderWhitelistedEventFilter;
    RemoveTraderWhitelisted(
      arg0?: PromiseOrValue<string> | null,
      whitelisted?: PromiseOrValue<string> | null
    ): RemoveTraderWhitelistedEventFilter;

    "SetUserPolicy(address,uint32)"(
      trader?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null
    ): SetUserPolicyEventFilter;
    SetUserPolicy(
      trader?: PromiseOrValue<string> | null,
      policyId?: PromiseOrValue<BigNumberish> | null
    ): SetUserPolicyEventFilter;
  };

  estimateGas: {
    addWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "addWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWhitelisted(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelisted(address,address)"(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "removeWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUserPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setUserPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userPolicies(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userPolicies(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTraderAtIndex(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedTraderAtIndex(address,uint256)"(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTraderCount(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedTraderCount(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "addWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelisted(address,address)"(
      trader: PromiseOrValue<string>,
      counterparty: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeWhitelistedTrader(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "removeWhitelistedTrader(address)"(
      whitelisted: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUserPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setUserPolicy(uint32)"(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userPolicies(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userPolicies(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTraderAtIndex(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedTraderAtIndex(address,uint256)"(
      trader: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTraderCount(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedTraderCount(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
