/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IWalletCheckInterface extends utils.Interface {
  functions: {
    "ROLE_WALLETCHECK_ADMIN()": FunctionFragment;
    "birthday(address)": FunctionFragment;
    "setWalletWhitelist(address,bool,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROLE_WALLETCHECK_ADMIN"
      | "ROLE_WALLETCHECK_ADMIN()"
      | "birthday"
      | "birthday(address)"
      | "setWalletWhitelist"
      | "setWalletWhitelist(address,bool,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROLE_WALLETCHECK_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_WALLETCHECK_ADMIN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "birthday",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "birthday(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletWhitelist",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletWhitelist(address,bool,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLE_WALLETCHECK_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_WALLETCHECK_ADMIN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "birthday", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "birthday(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletWhitelist(address,bool,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address,address)": EventFragment;
    "SetWalletWhitelist(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deployed(address,address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWalletWhitelist"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetWalletWhitelist(address,address,bool)"
  ): EventFragment;
}

export interface DeployedEventObject {
  admin: string;
  trustedForwarder: string;
}
export type DeployedEvent = TypedEvent<[string, string], DeployedEventObject>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface SetWalletWhitelistEventObject {
  admin: string;
  wallet: string;
  isWhitelisted: boolean;
}
export type SetWalletWhitelistEvent = TypedEvent<
  [string, string, boolean],
  SetWalletWhitelistEventObject
>;

export type SetWalletWhitelistEventFilter =
  TypedEventFilter<SetWalletWhitelistEvent>;

export interface IWalletCheck extends BaseContract {
  contractName: "IWalletCheck";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWalletCheckInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROLE_WALLETCHECK_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_WALLETCHECK_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    birthday(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    "birthday(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timestamp: BigNumber }>;

    setWalletWhitelist(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setWalletWhitelist(address,bool,uint256)"(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ROLE_WALLETCHECK_ADMIN(overrides?: CallOverrides): Promise<string>;

  "ROLE_WALLETCHECK_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  birthday(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "birthday(address)"(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setWalletWhitelist(
    wallet: PromiseOrValue<string>,
    whitelisted: PromiseOrValue<boolean>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setWalletWhitelist(address,bool,uint256)"(
    wallet: PromiseOrValue<string>,
    whitelisted: PromiseOrValue<boolean>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLE_WALLETCHECK_ADMIN(overrides?: CallOverrides): Promise<string>;

    "ROLE_WALLETCHECK_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    birthday(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "birthday(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setWalletWhitelist(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWalletWhitelist(address,bool,uint256)"(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deployed(address,address)"(
      admin?: null,
      trustedForwarder?: null
    ): DeployedEventFilter;
    Deployed(admin?: null, trustedForwarder?: null): DeployedEventFilter;

    "SetWalletWhitelist(address,address,bool)"(
      admin?: null,
      wallet?: null,
      isWhitelisted?: null
    ): SetWalletWhitelistEventFilter;
    SetWalletWhitelist(
      admin?: null,
      wallet?: null,
      isWhitelisted?: null
    ): SetWalletWhitelistEventFilter;
  };

  estimateGas: {
    ROLE_WALLETCHECK_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_WALLETCHECK_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    birthday(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "birthday(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setWalletWhitelist(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setWalletWhitelist(address,bool,uint256)"(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLE_WALLETCHECK_ADMIN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_WALLETCHECK_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    birthday(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "birthday(address)"(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setWalletWhitelist(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setWalletWhitelist(address,bool,uint256)"(
      wallet: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
