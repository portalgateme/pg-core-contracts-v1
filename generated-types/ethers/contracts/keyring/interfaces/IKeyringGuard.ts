/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IKeyringGuardInterface extends utils.Interface {
  functions: {
    "checkCache(address)": FunctionFragment;
    "checkGuard(address,address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "whitelistAddressAtIndex(uint256)": FunctionFragment;
    "whitelistAddressCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkCache"
      | "checkCache(address)"
      | "checkGuard"
      | "checkGuard(address,address)"
      | "isWhitelisted"
      | "isWhitelisted(address)"
      | "whitelistAddressAtIndex"
      | "whitelistAddressAtIndex(uint256)"
      | "whitelistAddressCount"
      | "whitelistAddressCount()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkCache",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkCache(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkGuard",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkGuard(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddressAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddressAtIndex(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddressCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddressCount()",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "checkCache", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkCache(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkGuard(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddressAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddressAtIndex(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddressCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddressCount()",
    data: BytesLike
  ): Result;

  events: {
    "KeyringGuardConfigured(address,address,address,uint32,bytes32,bytes32)": EventFragment;
    "WhitelistAddress(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KeyringGuardConfigured"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "KeyringGuardConfigured(address,address,address,uint32,bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAddress(address)"): EventFragment;
}

export interface KeyringGuardConfiguredEventObject {
  keyringCredentials: string;
  policyManager: string;
  userPolicies: string;
  admissionPolicyId: number;
  universeRule: string;
  emptyRule: string;
}
export type KeyringGuardConfiguredEvent = TypedEvent<
  [string, string, string, number, string, string],
  KeyringGuardConfiguredEventObject
>;

export type KeyringGuardConfiguredEventFilter =
  TypedEventFilter<KeyringGuardConfiguredEvent>;

export interface WhitelistAddressEventObject {
  admin: string;
}
export type WhitelistAddressEvent = TypedEvent<
  [string],
  WhitelistAddressEventObject
>;

export type WhitelistAddressEventFilter =
  TypedEventFilter<WhitelistAddressEvent>;

export interface IKeyringGuard extends BaseContract {
  contractName: "IKeyringGuard";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKeyringGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkCache(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "checkCache(address)"(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkGuard(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "checkGuard(address,address)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWhitelisted(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    "isWhitelisted(address)"(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    whitelistAddressAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { whitelisted: string }>;

    "whitelistAddressAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { whitelisted: string }>;

    whitelistAddressCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "whitelistAddressCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  checkCache(
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "checkCache(address)"(
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkGuard(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "checkGuard(address,address)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWhitelisted(
    checkAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWhitelisted(address)"(
    checkAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistAddressAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "whitelistAddressAtIndex(uint256)"(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  whitelistAddressCount(overrides?: CallOverrides): Promise<BigNumber>;

  "whitelistAddressCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkCache(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkCache(address)"(
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkGuard(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkGuard(address,address)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWhitelisted(address)"(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistAddressAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "whitelistAddressAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    whitelistAddressCount(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistAddressCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "KeyringGuardConfigured(address,address,address,uint32,bytes32,bytes32)"(
      keyringCredentials?: null,
      policyManager?: null,
      userPolicies?: null,
      admissionPolicyId?: null,
      universeRule?: null,
      emptyRule?: null
    ): KeyringGuardConfiguredEventFilter;
    KeyringGuardConfigured(
      keyringCredentials?: null,
      policyManager?: null,
      userPolicies?: null,
      admissionPolicyId?: null,
      universeRule?: null,
      emptyRule?: null
    ): KeyringGuardConfiguredEventFilter;

    "WhitelistAddress(address)"(admin?: null): WhitelistAddressEventFilter;
    WhitelistAddress(admin?: null): WhitelistAddressEventFilter;
  };

  estimateGas: {
    checkCache(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "checkCache(address)"(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkGuard(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "checkGuard(address,address)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWhitelisted(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWhitelisted(address)"(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistAddressAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistAddressAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistAddressCount(overrides?: CallOverrides): Promise<BigNumber>;

    "whitelistAddressCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkCache(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "checkCache(address)"(
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkGuard(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "checkGuard(address,address)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWhitelisted(address)"(
      checkAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistAddressAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistAddressAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistAddressCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistAddressCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
