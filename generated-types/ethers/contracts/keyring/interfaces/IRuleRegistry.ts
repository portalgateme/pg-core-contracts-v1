/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IRuleRegistryInterface extends utils.Interface {
  functions: {
    "ROLE_RULE_ADMIN()": FunctionFragment;
    "createRule(string,string,uint8,bytes32[])": FunctionFragment;
    "generateRuleId(string,uint8,bytes32[])": FunctionFragment;
    "genesis()": FunctionFragment;
    "init(string,string,string,string)": FunctionFragment;
    "isRule(bytes32)": FunctionFragment;
    "rule(bytes32)": FunctionFragment;
    "ruleAtIndex(uint256)": FunctionFragment;
    "ruleCount()": FunctionFragment;
    "ruleDescription(bytes32)": FunctionFragment;
    "ruleIsToxic(bytes32)": FunctionFragment;
    "ruleOperandAtIndex(bytes32,uint256)": FunctionFragment;
    "ruleOperandCount(bytes32)": FunctionFragment;
    "ruleOperator(bytes32)": FunctionFragment;
    "ruleUri(bytes32)": FunctionFragment;
    "setToxic(bytes32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROLE_RULE_ADMIN"
      | "ROLE_RULE_ADMIN()"
      | "createRule"
      | "createRule(string,string,uint8,bytes32[])"
      | "generateRuleId"
      | "generateRuleId(string,uint8,bytes32[])"
      | "genesis"
      | "genesis()"
      | "init"
      | "init(string,string,string,string)"
      | "isRule"
      | "isRule(bytes32)"
      | "rule"
      | "rule(bytes32)"
      | "ruleAtIndex"
      | "ruleAtIndex(uint256)"
      | "ruleCount"
      | "ruleCount()"
      | "ruleDescription"
      | "ruleDescription(bytes32)"
      | "ruleIsToxic"
      | "ruleIsToxic(bytes32)"
      | "ruleOperandAtIndex"
      | "ruleOperandAtIndex(bytes32,uint256)"
      | "ruleOperandCount"
      | "ruleOperandCount(bytes32)"
      | "ruleOperator"
      | "ruleOperator(bytes32)"
      | "ruleUri"
      | "ruleUri(bytes32)"
      | "setToxic"
      | "setToxic(bytes32,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROLE_RULE_ADMIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_RULE_ADMIN()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRule",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRule(string,string,uint8,bytes32[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRuleId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRuleId(string,uint8,bytes32[])",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "genesis", values?: undefined): string;
  encodeFunctionData(functionFragment: "genesis()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init(string,string,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRule",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRule(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rule",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rule(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleAtIndex(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "ruleCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ruleCount()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ruleDescription",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleDescription(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleIsToxic",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleIsToxic(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOperandAtIndex",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOperandAtIndex(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOperandCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOperandCount(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOperator",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleOperator(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleUri",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ruleUri(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToxic",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToxic(bytes32,bool)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLE_RULE_ADMIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_RULE_ADMIN()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createRule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRule(string,string,uint8,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRuleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRuleId(string,uint8,bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "genesis", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "genesis()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "init(string,string,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRule(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rule(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleAtIndex(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ruleCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruleCount()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleDescription(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleIsToxic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleIsToxic(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOperandAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOperandAtIndex(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOperandCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOperandCount(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ruleOperator(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ruleUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ruleUri(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToxic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setToxic(bytes32,bool)",
    data: BytesLike
  ): Result;

  events: {
    "CreateRule(address,bytes32,string,string,bool,uint8,bytes32[])": EventFragment;
    "RuleRegistryDeployed(address,address)": EventFragment;
    "RuleRegistryInitialized(address,string,string,string,string,bytes32,bytes32)": EventFragment;
    "SetToxic(address,bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateRule"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CreateRule(address,bytes32,string,string,bool,uint8,bytes32[])"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleRegistryDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RuleRegistryDeployed(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RuleRegistryInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RuleRegistryInitialized(address,string,string,string,string,bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetToxic"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetToxic(address,bytes32,bool)"
  ): EventFragment;
}

export interface CreateRuleEventObject {
  user: string;
  ruleId: string;
  description: string;
  uri: string;
  toxic: boolean;
  operator: number;
  operands: string[];
}
export type CreateRuleEvent = TypedEvent<
  [string, string, string, string, boolean, number, string[]],
  CreateRuleEventObject
>;

export type CreateRuleEventFilter = TypedEventFilter<CreateRuleEvent>;

export interface RuleRegistryDeployedEventObject {
  deployer: string;
  trustedForwarder: string;
}
export type RuleRegistryDeployedEvent = TypedEvent<
  [string, string],
  RuleRegistryDeployedEventObject
>;

export type RuleRegistryDeployedEventFilter =
  TypedEventFilter<RuleRegistryDeployedEvent>;

export interface RuleRegistryInitializedEventObject {
  admin: string;
  universeDescription: string;
  universeUri: string;
  emptyDescription: string;
  emptyUri: string;
  universeRule: string;
  emptyRule: string;
}
export type RuleRegistryInitializedEvent = TypedEvent<
  [string, string, string, string, string, string, string],
  RuleRegistryInitializedEventObject
>;

export type RuleRegistryInitializedEventFilter =
  TypedEventFilter<RuleRegistryInitializedEvent>;

export interface SetToxicEventObject {
  admin: string;
  ruleId: string;
  isToxic: boolean;
}
export type SetToxicEvent = TypedEvent<
  [string, string, boolean],
  SetToxicEventObject
>;

export type SetToxicEventFilter = TypedEventFilter<SetToxicEvent>;

export interface IRuleRegistry extends BaseContract {
  contractName: "IRuleRegistry";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRuleRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROLE_RULE_ADMIN(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_RULE_ADMIN()"(overrides?: CallOverrides): Promise<[string]>;

    createRule(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createRule(string,string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    generateRuleId(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string] & { ruleId: string }>;

    "generateRuleId(string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[string] & { ruleId: string }>;

    genesis(
      overrides?: CallOverrides
    ): Promise<[string, string] & { universeRule: string; emptyRule: string }>;

    "genesis()"(
      overrides?: CallOverrides
    ): Promise<[string, string] & { universeRule: string; emptyRule: string }>;

    init(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "init(string,string,string,string)"(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    "isRule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    rule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        description: string;
        uri: string;
        operator: number;
        operandCount: BigNumber;
      }
    >;

    "rule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        description: string;
        uri: string;
        operator: number;
        operandCount: BigNumber;
      }
    >;

    ruleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { ruleId: string }>;

    "ruleAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { ruleId: string }>;

    ruleCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "ruleCount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    ruleDescription(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { description: string }>;

    "ruleDescription(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { description: string }>;

    ruleIsToxic(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    "ruleIsToxic(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isIndeed: boolean }>;

    ruleOperandAtIndex(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { operandId: string }>;

    "ruleOperandAtIndex(bytes32,uint256)"(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { operandId: string }>;

    ruleOperandCount(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    "ruleOperandCount(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    ruleOperator(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { operator: number }>;

    "ruleOperator(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { operator: number }>;

    ruleUri(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { uri: string }>;

    "ruleUri(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { uri: string }>;

    setToxic(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setToxic(bytes32,bool)"(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ROLE_RULE_ADMIN(overrides?: CallOverrides): Promise<string>;

  "ROLE_RULE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

  createRule(
    description: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    operator: PromiseOrValue<BigNumberish>,
    operands: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createRule(string,string,uint8,bytes32[])"(
    description: PromiseOrValue<string>,
    uri: PromiseOrValue<string>,
    operator: PromiseOrValue<BigNumberish>,
    operands: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  generateRuleId(
    description: PromiseOrValue<string>,
    operator: PromiseOrValue<BigNumberish>,
    operands: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  "generateRuleId(string,uint8,bytes32[])"(
    description: PromiseOrValue<string>,
    operator: PromiseOrValue<BigNumberish>,
    operands: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<string>;

  genesis(
    overrides?: CallOverrides
  ): Promise<[string, string] & { universeRule: string; emptyRule: string }>;

  "genesis()"(
    overrides?: CallOverrides
  ): Promise<[string, string] & { universeRule: string; emptyRule: string }>;

  init(
    universeDescription: PromiseOrValue<string>,
    universeUri: PromiseOrValue<string>,
    emptyDescription: PromiseOrValue<string>,
    emptyUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "init(string,string,string,string)"(
    universeDescription: PromiseOrValue<string>,
    universeUri: PromiseOrValue<string>,
    emptyDescription: PromiseOrValue<string>,
    emptyUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRule(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isRule(bytes32)"(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rule(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber] & {
      description: string;
      uri: string;
      operator: number;
      operandCount: BigNumber;
    }
  >;

  "rule(bytes32)"(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number, BigNumber] & {
      description: string;
      uri: string;
      operator: number;
      operandCount: BigNumber;
    }
  >;

  ruleAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ruleAtIndex(uint256)"(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  ruleCount(overrides?: CallOverrides): Promise<BigNumber>;

  "ruleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  ruleDescription(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ruleDescription(bytes32)"(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  ruleIsToxic(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "ruleIsToxic(bytes32)"(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ruleOperandAtIndex(
    ruleId: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ruleOperandAtIndex(bytes32,uint256)"(
    ruleId: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  ruleOperandCount(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ruleOperandCount(bytes32)"(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ruleOperator(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  "ruleOperator(bytes32)"(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  ruleUri(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "ruleUri(bytes32)"(
    ruleId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  setToxic(
    ruleId: PromiseOrValue<BytesLike>,
    toxic: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setToxic(bytes32,bool)"(
    ruleId: PromiseOrValue<BytesLike>,
    toxic: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLE_RULE_ADMIN(overrides?: CallOverrides): Promise<string>;

    "ROLE_RULE_ADMIN()"(overrides?: CallOverrides): Promise<string>;

    createRule(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    "createRule(string,string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    generateRuleId(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    "generateRuleId(string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string>;

    genesis(
      overrides?: CallOverrides
    ): Promise<[string, string] & { universeRule: string; emptyRule: string }>;

    "genesis()"(
      overrides?: CallOverrides
    ): Promise<[string, string] & { universeRule: string; emptyRule: string }>;

    init(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(string,string,string,string)"(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isRule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isRule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        description: string;
        uri: string;
        operator: number;
        operandCount: BigNumber;
      }
    >;

    "rule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number, BigNumber] & {
        description: string;
        uri: string;
        operator: number;
        operandCount: BigNumber;
      }
    >;

    ruleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ruleAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    ruleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ruleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ruleDescription(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ruleDescription(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    ruleIsToxic(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "ruleIsToxic(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ruleOperandAtIndex(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ruleOperandAtIndex(bytes32,uint256)"(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    ruleOperandCount(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleOperandCount(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleOperator(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    "ruleOperator(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    ruleUri(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "ruleUri(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    setToxic(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setToxic(bytes32,bool)"(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreateRule(address,bytes32,string,string,bool,uint8,bytes32[])"(
      user?: PromiseOrValue<string> | null,
      ruleId?: PromiseOrValue<BytesLike> | null,
      description?: null,
      uri?: null,
      toxic?: null,
      operator?: null,
      operands?: null
    ): CreateRuleEventFilter;
    CreateRule(
      user?: PromiseOrValue<string> | null,
      ruleId?: PromiseOrValue<BytesLike> | null,
      description?: null,
      uri?: null,
      toxic?: null,
      operator?: null,
      operands?: null
    ): CreateRuleEventFilter;

    "RuleRegistryDeployed(address,address)"(
      deployer?: null,
      trustedForwarder?: null
    ): RuleRegistryDeployedEventFilter;
    RuleRegistryDeployed(
      deployer?: null,
      trustedForwarder?: null
    ): RuleRegistryDeployedEventFilter;

    "RuleRegistryInitialized(address,string,string,string,string,bytes32,bytes32)"(
      admin?: null,
      universeDescription?: null,
      universeUri?: null,
      emptyDescription?: null,
      emptyUri?: null,
      universeRule?: null,
      emptyRule?: null
    ): RuleRegistryInitializedEventFilter;
    RuleRegistryInitialized(
      admin?: null,
      universeDescription?: null,
      universeUri?: null,
      emptyDescription?: null,
      emptyUri?: null,
      universeRule?: null,
      emptyRule?: null
    ): RuleRegistryInitializedEventFilter;

    "SetToxic(address,bytes32,bool)"(
      admin?: null,
      ruleId?: null,
      isToxic?: null
    ): SetToxicEventFilter;
    SetToxic(admin?: null, ruleId?: null, isToxic?: null): SetToxicEventFilter;
  };

  estimateGas: {
    ROLE_RULE_ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_RULE_ADMIN()"(overrides?: CallOverrides): Promise<BigNumber>;

    createRule(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createRule(string,string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    generateRuleId(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "generateRuleId(string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    "genesis()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "init(string,string,string,string)"(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isRule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "ruleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    ruleDescription(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleDescription(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleIsToxic(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleIsToxic(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleOperandAtIndex(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleOperandAtIndex(bytes32,uint256)"(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleOperandCount(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleOperandCount(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleOperator(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleOperator(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ruleUri(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ruleUri(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setToxic(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setToxic(bytes32,bool)"(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLE_RULE_ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ROLE_RULE_ADMIN()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRule(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createRule(string,string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      uri: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    generateRuleId(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "generateRuleId(string,uint8,bytes32[])"(
      description: PromiseOrValue<string>,
      operator: PromiseOrValue<BigNumberish>,
      operands: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesis()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "init(string,string,string,string)"(
      universeDescription: PromiseOrValue<string>,
      universeUri: PromiseOrValue<string>,
      emptyDescription: PromiseOrValue<string>,
      emptyUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isRule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rule(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rule(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ruleAtIndex(uint256)"(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ruleCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ruleDescription(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ruleDescription(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleIsToxic(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ruleIsToxic(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleOperandAtIndex(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ruleOperandAtIndex(bytes32,uint256)"(
      ruleId: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleOperandCount(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ruleOperandCount(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleOperator(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ruleOperator(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ruleUri(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ruleUri(bytes32)"(
      ruleId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setToxic(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setToxic(bytes32,bool)"(
      ruleId: PromiseOrValue<BytesLike>,
      toxic: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
