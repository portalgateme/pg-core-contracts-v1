/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IKeyringCredentialsInterface extends utils.Interface {
  functions: {
    "ROLE_CREDENTIAL_UPDATER()": FunctionFragment;
    "cache(uint8,address,uint32)": FunctionFragment;
    "getCredential(uint8,address,uint32)": FunctionFragment;
    "init()": FunctionFragment;
    "setCredential(address,uint32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ROLE_CREDENTIAL_UPDATER"
      | "ROLE_CREDENTIAL_UPDATER()"
      | "cache"
      | "cache(uint8,address,uint32)"
      | "getCredential"
      | "getCredential(uint8,address,uint32)"
      | "init"
      | "init()"
      | "setCredential"
      | "setCredential(address,uint32,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ROLE_CREDENTIAL_UPDATER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_CREDENTIAL_UPDATER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cache",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cache(uint8,address,uint32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredential",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredential(uint8,address,uint32)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(functionFragment: "init()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCredential",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCredential(address,uint32,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ROLE_CREDENTIAL_UPDATER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_CREDENTIAL_UPDATER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cache", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cache(uint8,address,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredential(uint8,address,uint32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCredential(address,uint32,uint256)",
    data: BytesLike
  ): Result;

  events: {
    "CredentialsDeployed(address,address,address)": EventFragment;
    "CredentialsInitialized(address)": EventFragment;
    "UpdateCredential(uint8,address,address,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CredentialsDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CredentialsDeployed(address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CredentialsInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CredentialsInitialized(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCredential"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateCredential(uint8,address,address,uint32)"
  ): EventFragment;
}

export interface CredentialsDeployedEventObject {
  deployer: string;
  trustedForwarder: string;
  policyManager: string;
}
export type CredentialsDeployedEvent = TypedEvent<
  [string, string, string],
  CredentialsDeployedEventObject
>;

export type CredentialsDeployedEventFilter =
  TypedEventFilter<CredentialsDeployedEvent>;

export interface CredentialsInitializedEventObject {
  admin: string;
}
export type CredentialsInitializedEvent = TypedEvent<
  [string],
  CredentialsInitializedEventObject
>;

export type CredentialsInitializedEventFilter =
  TypedEventFilter<CredentialsInitializedEvent>;

export interface UpdateCredentialEventObject {
  version: number;
  updater: string;
  trader: string;
  admissionPolicyId: number;
}
export type UpdateCredentialEvent = TypedEvent<
  [number, string, string, number],
  UpdateCredentialEventObject
>;

export type UpdateCredentialEventFilter =
  TypedEventFilter<UpdateCredentialEvent>;

export interface IKeyringCredentials extends BaseContract {
  contractName: "IKeyringCredentials";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKeyringCredentialsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ROLE_CREDENTIAL_UPDATER(overrides?: CallOverrides): Promise<[string]>;

    "ROLE_CREDENTIAL_UPDATER()"(overrides?: CallOverrides): Promise<[string]>;

    cache(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "cache(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCredential(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getCredential(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "init()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCredential(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setCredential(address,uint32,uint256)"(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ROLE_CREDENTIAL_UPDATER(overrides?: CallOverrides): Promise<string>;

  "ROLE_CREDENTIAL_UPDATER()"(overrides?: CallOverrides): Promise<string>;

  cache(
    version: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    admissionPolicyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "cache(uint8,address,uint32)"(
    version: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    admissionPolicyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCredential(
    version: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    admissionPolicyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCredential(uint8,address,uint32)"(
    version: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    admissionPolicyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "init()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCredential(
    trader: PromiseOrValue<string>,
    admissionPolicyId: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setCredential(address,uint32,uint256)"(
    trader: PromiseOrValue<string>,
    admissionPolicyId: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ROLE_CREDENTIAL_UPDATER(overrides?: CallOverrides): Promise<string>;

    "ROLE_CREDENTIAL_UPDATER()"(overrides?: CallOverrides): Promise<string>;

    cache(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cache(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCredential(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCredential(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(overrides?: CallOverrides): Promise<void>;

    "init()"(overrides?: CallOverrides): Promise<void>;

    setCredential(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCredential(address,uint32,uint256)"(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CredentialsDeployed(address,address,address)"(
      deployer?: null,
      trustedForwarder?: null,
      policyManager?: null
    ): CredentialsDeployedEventFilter;
    CredentialsDeployed(
      deployer?: null,
      trustedForwarder?: null,
      policyManager?: null
    ): CredentialsDeployedEventFilter;

    "CredentialsInitialized(address)"(
      admin?: null
    ): CredentialsInitializedEventFilter;
    CredentialsInitialized(admin?: null): CredentialsInitializedEventFilter;

    "UpdateCredential(uint8,address,address,uint32)"(
      version?: null,
      updater?: null,
      trader?: PromiseOrValue<string> | null,
      admissionPolicyId?: PromiseOrValue<BigNumberish> | null
    ): UpdateCredentialEventFilter;
    UpdateCredential(
      version?: null,
      updater?: null,
      trader?: PromiseOrValue<string> | null,
      admissionPolicyId?: PromiseOrValue<BigNumberish> | null
    ): UpdateCredentialEventFilter;
  };

  estimateGas: {
    ROLE_CREDENTIAL_UPDATER(overrides?: CallOverrides): Promise<BigNumber>;

    "ROLE_CREDENTIAL_UPDATER()"(overrides?: CallOverrides): Promise<BigNumber>;

    cache(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cache(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCredential(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCredential(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "init()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCredential(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setCredential(address,uint32,uint256)"(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ROLE_CREDENTIAL_UPDATER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROLE_CREDENTIAL_UPDATER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cache(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cache(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCredential(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCredential(uint8,address,uint32)"(
      version: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "init()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCredential(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setCredential(address,uint32,uint256)"(
      trader: PromiseOrValue<string>,
      admissionPolicyId: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
