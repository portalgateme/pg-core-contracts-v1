/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IKeyringZkVerifier {
  export type Groth16ProofStruct = {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type Groth16ProofStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
  };

  export type IdentityMembershipProofStruct = {
    proof: IKeyringZkVerifier.Groth16ProofStruct;
    root: PromiseOrValue<BigNumberish>;
    nullifierHash: PromiseOrValue<BigNumberish>;
    signalHash: PromiseOrValue<BigNumberish>;
    externalNullifier: PromiseOrValue<BigNumberish>;
  };

  export type IdentityMembershipProofStructOutput = [
    IKeyringZkVerifier.Groth16ProofStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proof: IKeyringZkVerifier.Groth16ProofStructOutput;
    root: BigNumber;
    nullifierHash: BigNumber;
    signalHash: BigNumber;
    externalNullifier: BigNumber;
  };

  export type IdentityAuthorisationProofStruct = {
    proof: IKeyringZkVerifier.Groth16ProofStruct;
    externalNullifier: PromiseOrValue<BigNumberish>;
    nullifierHash: PromiseOrValue<BigNumberish>;
    policyDisclosures: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    tradingAddress: PromiseOrValue<BigNumberish>;
  };

  export type IdentityAuthorisationProofStructOutput = [
    IKeyringZkVerifier.Groth16ProofStructOutput,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber],
    BigNumber
  ] & {
    proof: IKeyringZkVerifier.Groth16ProofStructOutput;
    externalNullifier: BigNumber;
    nullifierHash: BigNumber;
    policyDisclosures: [BigNumber, BigNumber];
    tradingAddress: BigNumber;
  };
}

export interface KeyringZkCredentialUpdaterInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEYRING_CREDENTIALS()": FunctionFragment;
    "KEYRING_ZK_VERIFIER()": FunctionFragment;
    "POLICY_MANAGER()": FunctionFragment;
    "checkPolicy(uint32,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "pack12x20(uint32[12])": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpack12x20(uint256)": FunctionFragment;
    "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE()"
      | "KEYRING_CREDENTIALS"
      | "KEYRING_CREDENTIALS()"
      | "KEYRING_ZK_VERIFIER"
      | "KEYRING_ZK_VERIFIER()"
      | "POLICY_MANAGER"
      | "POLICY_MANAGER()"
      | "checkPolicy"
      | "checkPolicy(uint32,address)"
      | "getRoleAdmin"
      | "getRoleAdmin(bytes32)"
      | "grantRole"
      | "grantRole(bytes32,address)"
      | "hasRole"
      | "hasRole(bytes32,address)"
      | "isTrustedForwarder"
      | "isTrustedForwarder(address)"
      | "pack12x20"
      | "pack12x20(uint32[12])"
      | "renounceRole"
      | "renounceRole(bytes32,address)"
      | "revokeRole"
      | "revokeRole(bytes32,address)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "unpack12x20"
      | "unpack12x20(uint256)"
      | "updateCredentials"
      | "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEYRING_CREDENTIALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEYRING_CREDENTIALS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEYRING_ZK_VERIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEYRING_ZK_VERIFIER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLICY_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POLICY_MANAGER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkPolicy",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPolicy(uint32,address)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pack12x20",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pack12x20(uint32[12])",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpack12x20",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpack12x20(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCredentials",
    values: [
      PromiseOrValue<string>,
      IKeyringZkVerifier.IdentityMembershipProofStruct,
      IKeyringZkVerifier.IdentityAuthorisationProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))",
    values: [
      PromiseOrValue<string>,
      IKeyringZkVerifier.IdentityMembershipProofStruct,
      IKeyringZkVerifier.IdentityAuthorisationProofStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEYRING_CREDENTIALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEYRING_CREDENTIALS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEYRING_ZK_VERIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEYRING_ZK_VERIFIER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLICY_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POLICY_MANAGER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPolicy(uint32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pack12x20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pack12x20(uint32[12])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpack12x20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpack12x20(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCredentials",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))",
    data: BytesLike
  ): Result;

  events: {
    "AcceptCredentialUpdate(address,address,tuple,tuple,uint256)": EventFragment;
    "AdmitIdentityTree(address,address)": EventFragment;
    "CredentialUpdaterDeployed(address,address,address,address,address)": EventFragment;
    "RemoveIdentityTree(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptCredentialUpdate"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AcceptCredentialUpdate(address,address,tuple,tuple,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdmitIdentityTree"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AdmitIdentityTree(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CredentialUpdaterDeployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CredentialUpdaterDeployed(address,address,address,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveIdentityTree"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RemoveIdentityTree(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleAdminChanged(bytes32,bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleGranted(bytes32,address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleRevoked(bytes32,address,address)"
  ): EventFragment;
}

export interface AcceptCredentialUpdateEventObject {
  sender: string;
  trader: string;
  membershipProof: IKeyringZkVerifier.IdentityMembershipProofStructOutput;
  authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStructOutput;
  rootTime: BigNumber;
}
export type AcceptCredentialUpdateEvent = TypedEvent<
  [
    string,
    string,
    IKeyringZkVerifier.IdentityMembershipProofStructOutput,
    IKeyringZkVerifier.IdentityAuthorisationProofStructOutput,
    BigNumber
  ],
  AcceptCredentialUpdateEventObject
>;

export type AcceptCredentialUpdateEventFilter =
  TypedEventFilter<AcceptCredentialUpdateEvent>;

export interface AdmitIdentityTreeEventObject {
  admin: string;
  identityTree: string;
}
export type AdmitIdentityTreeEvent = TypedEvent<
  [string, string],
  AdmitIdentityTreeEventObject
>;

export type AdmitIdentityTreeEventFilter =
  TypedEventFilter<AdmitIdentityTreeEvent>;

export interface CredentialUpdaterDeployedEventObject {
  deployer: string;
  trustedForwarder: string;
  keyringCache: string;
  admissionPolicyManager: string;
  keyringZkVerifier: string;
}
export type CredentialUpdaterDeployedEvent = TypedEvent<
  [string, string, string, string, string],
  CredentialUpdaterDeployedEventObject
>;

export type CredentialUpdaterDeployedEventFilter =
  TypedEventFilter<CredentialUpdaterDeployedEvent>;

export interface RemoveIdentityTreeEventObject {
  admin: string;
  identityTree: string;
}
export type RemoveIdentityTreeEvent = TypedEvent<
  [string, string],
  RemoveIdentityTreeEventObject
>;

export type RemoveIdentityTreeEventFilter =
  TypedEventFilter<RemoveIdentityTreeEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface KeyringZkCredentialUpdater extends BaseContract {
  contractName: "KeyringZkCredentialUpdater";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeyringZkCredentialUpdaterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    KEYRING_CREDENTIALS(overrides?: CallOverrides): Promise<[string]>;

    "KEYRING_CREDENTIALS()"(overrides?: CallOverrides): Promise<[string]>;

    KEYRING_ZK_VERIFIER(overrides?: CallOverrides): Promise<[string]>;

    "KEYRING_ZK_VERIFIER()"(overrides?: CallOverrides): Promise<[string]>;

    POLICY_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    "POLICY_MANAGER()"(overrides?: CallOverrides): Promise<[string]>;

    checkPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "checkPolicy(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedForwarder(address)"(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pack12x20(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { packed: BigNumber }>;

    "pack12x20(uint32[12])"(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { packed: BigNumber }>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpack12x20(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { unpacked: number[] }>;

    "unpack12x20(uint256)"(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number[]] & { unpacked: number[] }>;

    updateCredentials(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  KEYRING_CREDENTIALS(overrides?: CallOverrides): Promise<string>;

  "KEYRING_CREDENTIALS()"(overrides?: CallOverrides): Promise<string>;

  KEYRING_ZK_VERIFIER(overrides?: CallOverrides): Promise<string>;

  "KEYRING_ZK_VERIFIER()"(overrides?: CallOverrides): Promise<string>;

  POLICY_MANAGER(overrides?: CallOverrides): Promise<string>;

  "POLICY_MANAGER()"(overrides?: CallOverrides): Promise<string>;

  checkPolicy(
    policyId: PromiseOrValue<BigNumberish>,
    attestor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "checkPolicy(uint32,address)"(
    policyId: PromiseOrValue<BigNumberish>,
    attestor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedForwarder(address)"(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pack12x20(
    input: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pack12x20(uint32[12])"(
    input: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpack12x20(
    packed: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  "unpack12x20(uint256)"(
    packed: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number[]>;

  updateCredentials(
    attestor: PromiseOrValue<string>,
    membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
    authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
    attestor: PromiseOrValue<string>,
    membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
    authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    KEYRING_CREDENTIALS(overrides?: CallOverrides): Promise<string>;

    "KEYRING_CREDENTIALS()"(overrides?: CallOverrides): Promise<string>;

    KEYRING_ZK_VERIFIER(overrides?: CallOverrides): Promise<string>;

    "KEYRING_ZK_VERIFIER()"(overrides?: CallOverrides): Promise<string>;

    POLICY_MANAGER(overrides?: CallOverrides): Promise<string>;

    "POLICY_MANAGER()"(overrides?: CallOverrides): Promise<string>;

    checkPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkPolicy(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedForwarder(address)"(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pack12x20(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pack12x20(uint32[12])"(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpack12x20(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    "unpack12x20(uint256)"(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number[]>;

    updateCredentials(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptCredentialUpdate(address,address,tuple,tuple,uint256)"(
      sender?: null,
      trader?: null,
      membershipProof?: null,
      authorizationProof?: null,
      rootTime?: null
    ): AcceptCredentialUpdateEventFilter;
    AcceptCredentialUpdate(
      sender?: null,
      trader?: null,
      membershipProof?: null,
      authorizationProof?: null,
      rootTime?: null
    ): AcceptCredentialUpdateEventFilter;

    "AdmitIdentityTree(address,address)"(
      admin?: null,
      identityTree?: null
    ): AdmitIdentityTreeEventFilter;
    AdmitIdentityTree(
      admin?: null,
      identityTree?: null
    ): AdmitIdentityTreeEventFilter;

    "CredentialUpdaterDeployed(address,address,address,address,address)"(
      deployer?: null,
      trustedForwarder?: null,
      keyringCache?: null,
      admissionPolicyManager?: null,
      keyringZkVerifier?: null
    ): CredentialUpdaterDeployedEventFilter;
    CredentialUpdaterDeployed(
      deployer?: null,
      trustedForwarder?: null,
      keyringCache?: null,
      admissionPolicyManager?: null,
      keyringZkVerifier?: null
    ): CredentialUpdaterDeployedEventFilter;

    "RemoveIdentityTree(address,address)"(
      admin?: null,
      identityTree?: null
    ): RemoveIdentityTreeEventFilter;
    RemoveIdentityTree(
      admin?: null,
      identityTree?: null
    ): RemoveIdentityTreeEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    KEYRING_CREDENTIALS(overrides?: CallOverrides): Promise<BigNumber>;

    "KEYRING_CREDENTIALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    KEYRING_ZK_VERIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    "KEYRING_ZK_VERIFIER()"(overrides?: CallOverrides): Promise<BigNumber>;

    POLICY_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    "POLICY_MANAGER()"(overrides?: CallOverrides): Promise<BigNumber>;

    checkPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "checkPolicy(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedForwarder(address)"(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pack12x20(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pack12x20(uint32[12])"(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpack12x20(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unpack12x20(uint256)"(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCredentials(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEYRING_CREDENTIALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "KEYRING_CREDENTIALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEYRING_ZK_VERIFIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "KEYRING_ZK_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    POLICY_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "POLICY_MANAGER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "checkPolicy(uint32,address)"(
      policyId: PromiseOrValue<BigNumberish>,
      attestor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedForwarder(address)"(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pack12x20(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pack12x20(uint32[12])"(
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpack12x20(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unpack12x20(uint256)"(
      packed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCredentials(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateCredentials(address,((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      attestor: PromiseOrValue<string>,
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorizationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
