/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IKeyringZkVerifier {
  export type Groth16ProofStruct = {
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ];
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  };

  export type Groth16ProofStructOutput = [
    [BigNumber, BigNumber],
    [[BigNumber, BigNumber], [BigNumber, BigNumber]],
    [BigNumber, BigNumber]
  ] & {
    a: [BigNumber, BigNumber];
    b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
    c: [BigNumber, BigNumber];
  };

  export type IdentityMembershipProofStruct = {
    proof: IKeyringZkVerifier.Groth16ProofStruct;
    root: PromiseOrValue<BigNumberish>;
    nullifierHash: PromiseOrValue<BigNumberish>;
    signalHash: PromiseOrValue<BigNumberish>;
    externalNullifier: PromiseOrValue<BigNumberish>;
  };

  export type IdentityMembershipProofStructOutput = [
    IKeyringZkVerifier.Groth16ProofStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proof: IKeyringZkVerifier.Groth16ProofStructOutput;
    root: BigNumber;
    nullifierHash: BigNumber;
    signalHash: BigNumber;
    externalNullifier: BigNumber;
  };

  export type IdentityAuthorisationProofStruct = {
    proof: IKeyringZkVerifier.Groth16ProofStruct;
    externalNullifier: PromiseOrValue<BigNumberish>;
    nullifierHash: PromiseOrValue<BigNumberish>;
    policyDisclosures: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    tradingAddress: PromiseOrValue<BigNumberish>;
  };

  export type IdentityAuthorisationProofStructOutput = [
    IKeyringZkVerifier.Groth16ProofStructOutput,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber],
    BigNumber
  ] & {
    proof: IKeyringZkVerifier.Groth16ProofStructOutput;
    externalNullifier: BigNumber;
    nullifierHash: BigNumber;
    policyDisclosures: [BigNumber, BigNumber];
    tradingAddress: BigNumber;
  };

  export type IdentityConstructionProofStruct = {
    proof: IKeyringZkVerifier.Groth16ProofStruct;
    identity: PromiseOrValue<BigNumberish>;
    policyCommitment: PromiseOrValue<BigNumberish>;
    maxAddresses: PromiseOrValue<BigNumberish>;
  };

  export type IdentityConstructionProofStructOutput = [
    IKeyringZkVerifier.Groth16ProofStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proof: IKeyringZkVerifier.Groth16ProofStructOutput;
    identity: BigNumber;
    policyCommitment: BigNumber;
    maxAddresses: BigNumber;
  };
}

export interface KeyringZkVerifierInterface extends utils.Interface {
  functions: {
    "AUTHORIZATION_PROOF_VERIFIER()": FunctionFragment;
    "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()": FunctionFragment;
    "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()": FunctionFragment;
    "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))": FunctionFragment;
    "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))": FunctionFragment;
    "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))": FunctionFragment;
    "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AUTHORIZATION_PROOF_VERIFIER"
      | "AUTHORIZATION_PROOF_VERIFIER()"
      | "IDENTITY_CONSTRUCTION_PROOF_VERIFIER"
      | "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()"
      | "IDENTITY_MEMBERSHIP_PROOF_VERIFIER"
      | "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()"
      | "checkClaim"
      | "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"
      | "checkIdentityAuthorisationProof"
      | "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"
      | "checkIdentityConstructionProof"
      | "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))"
      | "checkIdentityMembershipProof"
      | "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AUTHORIZATION_PROOF_VERIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTHORIZATION_PROOF_VERIFIER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IDENTITY_CONSTRUCTION_PROOF_VERIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IDENTITY_MEMBERSHIP_PROOF_VERIFIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaim",
    values: [
      IKeyringZkVerifier.IdentityMembershipProofStruct,
      IKeyringZkVerifier.IdentityAuthorisationProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))",
    values: [
      IKeyringZkVerifier.IdentityMembershipProofStruct,
      IKeyringZkVerifier.IdentityAuthorisationProofStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityAuthorisationProof",
    values: [IKeyringZkVerifier.IdentityAuthorisationProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))",
    values: [IKeyringZkVerifier.IdentityAuthorisationProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityConstructionProof",
    values: [IKeyringZkVerifier.IdentityConstructionProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))",
    values: [IKeyringZkVerifier.IdentityConstructionProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityMembershipProof",
    values: [IKeyringZkVerifier.IdentityMembershipProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))",
    values: [IKeyringZkVerifier.IdentityMembershipProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHORIZATION_PROOF_VERIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUTHORIZATION_PROOF_VERIFIER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IDENTITY_CONSTRUCTION_PROOF_VERIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IDENTITY_MEMBERSHIP_PROOF_VERIFIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityAuthorisationProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityConstructionProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityMembershipProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Deployed(address,address,address,address)"
  ): EventFragment;
}

export interface DeployedEventObject {
  deployer: string;
  identityConstructionProofVerifier: string;
  membershipProofVerifier: string;
  authorisationProofVerifier: string;
}
export type DeployedEvent = TypedEvent<
  [string, string, string, string],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface KeyringZkVerifier extends BaseContract {
  contractName: "KeyringZkVerifier";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KeyringZkVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTHORIZATION_PROOF_VERIFIER(overrides?: CallOverrides): Promise<[string]>;

    "AUTHORIZATION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    IDENTITY_CONSTRUCTION_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    IDENTITY_MEMBERSHIP_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    checkClaim(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    checkIdentityAuthorisationProof(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    checkIdentityConstructionProof(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))"(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    checkIdentityMembershipProof(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;

    "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { verified: boolean }>;
  };

  AUTHORIZATION_PROOF_VERIFIER(overrides?: CallOverrides): Promise<string>;

  "AUTHORIZATION_PROOF_VERIFIER()"(overrides?: CallOverrides): Promise<string>;

  IDENTITY_CONSTRUCTION_PROOF_VERIFIER(
    overrides?: CallOverrides
  ): Promise<string>;

  "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()"(
    overrides?: CallOverrides
  ): Promise<string>;

  IDENTITY_MEMBERSHIP_PROOF_VERIFIER(
    overrides?: CallOverrides
  ): Promise<string>;

  "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()"(
    overrides?: CallOverrides
  ): Promise<string>;

  checkClaim(
    membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
    authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
    membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
    authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkIdentityAuthorisationProof(
    authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
    authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkIdentityConstructionProof(
    constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))"(
    constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkIdentityMembershipProof(
    membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))"(
    membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AUTHORIZATION_PROOF_VERIFIER(overrides?: CallOverrides): Promise<string>;

    "AUTHORIZATION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<string>;

    IDENTITY_CONSTRUCTION_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<string>;

    "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<string>;

    IDENTITY_MEMBERSHIP_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<string>;

    "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<string>;

    checkClaim(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkIdentityAuthorisationProof(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkIdentityConstructionProof(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))"(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkIdentityMembershipProof(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Deployed(address,address,address,address)"(
      deployer?: null,
      identityConstructionProofVerifier?: null,
      membershipProofVerifier?: null,
      authorisationProofVerifier?: null
    ): DeployedEventFilter;
    Deployed(
      deployer?: null,
      identityConstructionProofVerifier?: null,
      membershipProofVerifier?: null,
      authorisationProofVerifier?: null
    ): DeployedEventFilter;
  };

  estimateGas: {
    AUTHORIZATION_PROOF_VERIFIER(overrides?: CallOverrides): Promise<BigNumber>;

    "AUTHORIZATION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IDENTITY_CONSTRUCTION_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IDENTITY_MEMBERSHIP_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkClaim(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIdentityAuthorisationProof(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIdentityConstructionProof(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))"(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIdentityMembershipProof(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTHORIZATION_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "AUTHORIZATION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IDENTITY_CONSTRUCTION_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IDENTITY_CONSTRUCTION_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IDENTITY_MEMBERSHIP_PROOF_VERIFIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "IDENTITY_MEMBERSHIP_PROOF_VERIFIER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkClaim(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkClaim(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256),((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIdentityAuthorisationProof(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkIdentityAuthorisationProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256[2],uint256))"(
      authorisationProof: IKeyringZkVerifier.IdentityAuthorisationProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIdentityConstructionProof(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkIdentityConstructionProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256))"(
      constructionProof: IKeyringZkVerifier.IdentityConstructionProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIdentityMembershipProof(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkIdentityMembershipProof(((uint256[2],uint256[2][2],uint256[2]),uint256,uint256,uint256,uint256))"(
      membershipProof: IKeyringZkVerifier.IdentityMembershipProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
