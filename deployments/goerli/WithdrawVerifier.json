{
  "address": "0x8A0F93F4c7D89F3bF44c24cdEA86439b6126308B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[7]",
          "name": "input",
          "type": "uint256[7]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x67f957e63b8a82cbdd9a189e666ff44b83e6da92e7670ec5732eb0939c9ef483",
  "receipt": {
    "to": null,
    "from": "0xE356854c04927202C0188830424283ef1e34BAb0",
    "contractAddress": "0x8A0F93F4c7D89F3bF44c24cdEA86439b6126308B",
    "transactionIndex": 85,
    "gasUsed": "820761",
    "logsBloom": "0x
    "blockHash": "0x5932cc91b73aa0a379f1e70a37e83cbc68ca8f42512357c3f7dbb35464fa1e9c",
    "transactionHash": "0x67f957e63b8a82cbdd9a189e666ff44b83e6da92e7670ec5732eb0939c9ef483",
    "logs": [],
    "blockNumber": 9173655,
    "cumulativeGasUsed": "14013743",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8d34748ce00290c1f749d3b08a294bc2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[7]\",\"name\":\"input\",\"type\":\"uint256[7]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/WithdrawVerifier.sol\":\"WithdrawVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/WithdrawVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input = [\\n            p1.X, p1.Y,\\n            p2.X, p2.Y\\n        ];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n     *         points p.\\n     */\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input = [p.X, p.Y, s];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        uint256[24] memory input = [\\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract WithdrawVerifier {\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[8] IC;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(uint256(11813195599117868692718921039257601522104900295886670455781143885718057574958), uint256(20717234195802319960872169427379680873758130354235976240262430663151857580091));\\n        vk.beta2 = Pairing.G2Point([uint256(12677941052677084096140899617980105153401346294971345160415122510801321760178), uint256(8695393036368681387928331983412980298665193311623663612160324794535637465742)], [uint256(4556492003314371291066690675142672870190031384693582439042196220167415948202), uint256(21352853843784065170211631458304422797796841555241530653471978564541046618234)]);\\n        vk.gamma2 = Pairing.G2Point([uint256(15391343471335128157685466384198797761215228929218774222640332553088751509389), uint256(3735804362141249111584353105080473490718664558929901436707462662123140603855)], [uint256(18469189133766828749256446173900176110374115905169008811489460217134414105067), uint256(13076126612524040842741012085410238258427959620149315434604834262869253853725)]);\\n        vk.delta2 = Pairing.G2Point([uint256(15714958864187884968634908315006589101162919074415258185008784712834467288163), uint256(3999184936668005120044843376926110360169150166134765810567168054736792687823)], [uint256(17403957741910670753629844282039752987762834387900984600080964437824686652313), uint256(5749912835526189870354310618843964178039129734296169721257265275686704111761)]);\\n        vk.IC[0] = Pairing.G1Point(uint256(3398377635676649412985937706615805608857506849075859144512867313059894684182), uint256(19490724824840674885445159169611518578849508498355371422341582629517131790356));\\n        vk.IC[1] = Pairing.G1Point(uint256(3882683493167970023836458970822705246681306853862787668934526220651007886273), uint256(5684869405452777491573124096193742718187101359099907030258698944255375549730));\\n        vk.IC[2] = Pairing.G1Point(uint256(4607483231631277591557014148486371890316097113809534090995325646491518311687), uint256(19603192877931829617281684447035020709203270214881197497330911838856020714754));\\n        vk.IC[3] = Pairing.G1Point(uint256(16683874598934791900101246965753296414237943263404264498070180328260429112911), uint256(1315173717428258534000456582725619693585261398421291358140604163770163290817));\\n        vk.IC[4] = Pairing.G1Point(uint256(21413785436704303506546582707198253388595690085777277090316524037618325037219), uint256(9744730472025254855221341524033157718892673907649971388975306355506202678319));\\n        vk.IC[5] = Pairing.G1Point(uint256(11886294186517926006582184363372548144618466365914965354647425238603436130939), uint256(18360268687919251317467854318333683759696803119657609439264844369149157307011));\\n        vk.IC[6] = Pairing.G1Point(uint256(1384826431524672889600803840917436208647952999489913193942564735011674636501), uint256(2670574633484613092866093704280936341407456946710978550091814353965778586601));\\n        vk.IC[7] = Pairing.G1Point(uint256(16677998408771086150990521795014081035189638675423072772769494246389055619479), uint256(13808434869432361391266076387603043667750987607142165488531045574501660960596));\\n\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        bytes memory proof,\\n        uint256[7] memory input\\n    ) public view returns (bool) {\\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n        for (uint8 i = 0; i < p.length; i++) {\\n            // Make sure that each element in the proof is less than the prime q\\n            require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n        }\\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\\n\\n        VerifyingKey memory vk = verifyingKey();\\n        // Compute the linear combination vkX\\n        Pairing.G1Point memory vkX = vk.IC[0];\\n        for (uint256 i = 0; i < input.length; i++) {\\n            // Make sure that every input is less than the snark scalar field\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-input-gte-snark-scalar-field\\\");\\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\\n        }\\n\\n        return Pairing.pairing(\\n            Pairing.negate(proofA),\\n            proofB,\\n            vk.alfa1,\\n            vk.beta2,\\n            vkX,\\n            vk.gamma2,\\n            proofC,\\n            vk.delta2\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0xf6323983d1e33b205aa9a1b0310137611411f13c3496654da8433c39f86c77a5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610ddf806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063598da1d114610030575b600080fd5b610103600480360361010081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160e081810190925293969594818101949350915060079083908390808284376000920191909152509194506101179350505050565b604080519115158252519081900360200190f35b6000610121610bf8565b8380602001905161010081101561013757600080fd5b50905060005b60088160ff1610156101c2577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017957fe5b6020020151106101ba5760405162461bcd60e51b8152600401808060200182810382526022815260200180610d886022913960400191505060405180910390fd5b60010161013d565b506101cb610c17565b506040805180820190915281518152602080830151908201526101ec610c31565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610237610c17565b506040805180820190915260c0840151815260e0840151602082015261025b610c56565b610263610368565b905061026d610c17565b5060808101515160005b6007811015610332577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600781106102ad57fe5b6020020151106102ee5760405162461bcd60e51b8152600401808060200182810382526025815260200180610d636025913960400191505060405180910390fd5b610328826103238560800151846001016008811061030857fe5b60200201518c856007811061031957fe5b602002015161088a565b61092f565b9150600101610277565b5061035b61033f866109d3565b8584600001518560200151858760400151898960600151610a7a565b9998505050505050505050565b610370610c56565b6040805180820182527f1a1e0821c155d2009a25a3d002c2454e8e504a73844f22bceb0fb05ec186e22e81527f2dcd89fd0b033014c4739f8bf87fe603a831f70d128b3583dad499f826aa383b6020808301919091529083528151608080820184527f1c0775d94e71cdfce8cd3887d0aa24e476f8dd0e422c0da9327fc02faa0a95b28285019081527f13396b0554d8c8a6046da5a081ff47fb4abd419b30a52ff21ab32f8beda8ba8e606080850191909152908352845180860186527f0a12e211a47c013f7ec468fbe8cbd2998143f93b5835778b10b24890296063aa81527f2f3549781ef588349a7f6d68b1ccc9344d83d636c26e9ddf39648bc643fc787a818601528385015285840192909252835180820185527f22073112b6520c30bf34b37da1756c6f604b98d76a12cb2a9c93753bd2be1f8d8186019081527f084263ed2d9e010f5710ce51ce26f7794dbc3ebb632fdcfa6d6483ab6b7edfcf828501528152845180860186527f28d530cb54ef04179ee743db046a24daf81e87110faf6547448756ab133109eb81527f1ce8d34c955ac85e6a44830bb5e91d93fa768be6a5ffd7e250ff4d4c515c921d818601528185015285850152835180820185527f22be59fcc4b97a494550c0f04e6160001b3acefae751b411f04f433a4bdcd4638186019081527f08d7755da5f401d409815a232b97bcb956ed2521b187dbe00021062bbb1594cf828501528152845180860186527f267a4a7f06a74c1d7137067ff015c3c7b6058df19eff52995db99b52caa5fb9981527f0cb655d88df3e7c3e3b3c9e138e1a14140f58e2fb4c99003c36bace0f68fe091818601528185015282860152835180850185527f078369e0493e1d6cbefb1b5aef22b8c8e94fa4964e92fbfa4cb5e2a371146a1681527f2b175bfc043ca67ec717668bce309ad1bf096bf8359b0103b03a0f5efb40381481850152818601805191909152845180860186527f0895855ef0b84253e445b28d793e71304d116bb5441a65989314c650e424c3c181527f0c9185a5a54629f52acdf6acaf1cc63ff79e1b0ef3823d08da7d1bf087fda522818601528151850152845180860186527f0a2fbe3b6b68369b1c56c20e658ed1b9ed373eb72c9f4606b3a399ad55391d0781527f2b570393f59901e2a4ddb3f784eaf75c8004ba0a222eb4ff2137ae5b8a0b6502818601528151860152845180860186527f24e2bd06cbf247d148022729a6940cbe2f775ea1f79f106b44d4871db26f664f81527f02e85ca86b48647eb0817919af4f512ef12c17284fabf1ad2941f26d642e62c181860152815190930192909252835180850185527f2f57c5e68363ea199b55035b767343da044366ad61424372ce0c94a979e4a0a381527f158b526e09492197c30c402869f9459449a18e677df734d17e758b8a358e142f81850152825190910152825180840184527f1a4767730e1ca076cd5d548d6964dbf85e5454cc80534f9bdb1044f11a94027b81527f28978b37747d57f0f60b3ea65d9b401aab90c565590942d05d0e4fb70751f28381840152815160a00152825180840184527f030fc8b32ca94c8f262001170613c639668487a688a6417eb57c265124afc0d581527f05e77dde905c5c9f3d30e0448c56bff944fb5f569397c479649010b3d1f5cbe981840152815160c0015282518084019093527f24df699eca28f3fe55d58f870cc257e488fbfc7c753e9ad977f6a6317112019783527f1e874c137d9b5a7178bac60dddb5fb2464f234073ded6503c63b02e658bd2754918301919091525160e0015290565b610892610c17565b61089a610c9d565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156108dd576108df565bfe5b5080610927576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610937610c17565b61093f610cbb565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156108dd575080610927576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6109db610c17565b81511580156109ec57506020820151155b15610a0b57506040805180820190915260008082526020820152610a75565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015181610a4d57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610a84610cd9565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610b81610cf8565b60006020826103008560086107d05a03fa90508080156108dd575080610be6576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610c44610d16565b8152602001610c51610d16565b905290565b6040518060a00160405280610c69610c17565b8152602001610c76610c31565b8152602001610c83610c31565b8152602001610c90610c31565b8152602001610c51610d34565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518061010001604052806008905b610d4c610c17565b815260200190600190039081610d44579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a26469706673582212206d345681a985b3c5757c4d59acdf36c06ca39af185e1a9a722386f7c6e944e8e64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063598da1d114610030575b600080fd5b610103600480360361010081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160e081810190925293969594818101949350915060079083908390808284376000920191909152509194506101179350505050565b604080519115158252519081900360200190f35b6000610121610bf8565b8380602001905161010081101561013757600080fd5b50905060005b60088160ff1610156101c2577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017957fe5b6020020151106101ba5760405162461bcd60e51b8152600401808060200182810382526022815260200180610d886022913960400191505060405180910390fd5b60010161013d565b506101cb610c17565b506040805180820190915281518152602080830151908201526101ec610c31565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610237610c17565b506040805180820190915260c0840151815260e0840151602082015261025b610c56565b610263610368565b905061026d610c17565b5060808101515160005b6007811015610332577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600781106102ad57fe5b6020020151106102ee5760405162461bcd60e51b8152600401808060200182810382526025815260200180610d636025913960400191505060405180910390fd5b610328826103238560800151846001016008811061030857fe5b60200201518c856007811061031957fe5b602002015161088a565b61092f565b9150600101610277565b5061035b61033f866109d3565b8584600001518560200151858760400151898960600151610a7a565b9998505050505050505050565b610370610c56565b6040805180820182527f1a1e0821c155d2009a25a3d002c2454e8e504a73844f22bceb0fb05ec186e22e81527f2dcd89fd0b033014c4739f8bf87fe603a831f70d128b3583dad499f826aa383b6020808301919091529083528151608080820184527f1c0775d94e71cdfce8cd3887d0aa24e476f8dd0e422c0da9327fc02faa0a95b28285019081527f13396b0554d8c8a6046da5a081ff47fb4abd419b30a52ff21ab32f8beda8ba8e606080850191909152908352845180860186527f0a12e211a47c013f7ec468fbe8cbd2998143f93b5835778b10b24890296063aa81527f2f3549781ef588349a7f6d68b1ccc9344d83d636c26e9ddf39648bc643fc787a818601528385015285840192909252835180820185527f22073112b6520c30bf34b37da1756c6f604b98d76a12cb2a9c93753bd2be1f8d8186019081527f084263ed2d9e010f5710ce51ce26f7794dbc3ebb632fdcfa6d6483ab6b7edfcf828501528152845180860186527f28d530cb54ef04179ee743db046a24daf81e87110faf6547448756ab133109eb81527f1ce8d34c955ac85e6a44830bb5e91d93fa768be6a5ffd7e250ff4d4c515c921d818601528185015285850152835180820185527f22be59fcc4b97a494550c0f04e6160001b3acefae751b411f04f433a4bdcd4638186019081527f08d7755da5f401d409815a232b97bcb956ed2521b187dbe00021062bbb1594cf828501528152845180860186527f267a4a7f06a74c1d7137067ff015c3c7b6058df19eff52995db99b52caa5fb9981527f0cb655d88df3e7c3e3b3c9e138e1a14140f58e2fb4c99003c36bace0f68fe091818601528185015282860152835180850185527f078369e0493e1d6cbefb1b5aef22b8c8e94fa4964e92fbfa4cb5e2a371146a1681527f2b175bfc043ca67ec717668bce309ad1bf096bf8359b0103b03a0f5efb40381481850152818601805191909152845180860186527f0895855ef0b84253e445b28d793e71304d116bb5441a65989314c650e424c3c181527f0c9185a5a54629f52acdf6acaf1cc63ff79e1b0ef3823d08da7d1bf087fda522818601528151850152845180860186527f0a2fbe3b6b68369b1c56c20e658ed1b9ed373eb72c9f4606b3a399ad55391d0781527f2b570393f59901e2a4ddb3f784eaf75c8004ba0a222eb4ff2137ae5b8a0b6502818601528151860152845180860186527f24e2bd06cbf247d148022729a6940cbe2f775ea1f79f106b44d4871db26f664f81527f02e85ca86b48647eb0817919af4f512ef12c17284fabf1ad2941f26d642e62c181860152815190930192909252835180850185527f2f57c5e68363ea199b55035b767343da044366ad61424372ce0c94a979e4a0a381527f158b526e09492197c30c402869f9459449a18e677df734d17e758b8a358e142f81850152825190910152825180840184527f1a4767730e1ca076cd5d548d6964dbf85e5454cc80534f9bdb1044f11a94027b81527f28978b37747d57f0f60b3ea65d9b401aab90c565590942d05d0e4fb70751f28381840152815160a00152825180840184527f030fc8b32ca94c8f262001170613c639668487a688a6417eb57c265124afc0d581527f05e77dde905c5c9f3d30e0448c56bff944fb5f569397c479649010b3d1f5cbe981840152815160c0015282518084019093527f24df699eca28f3fe55d58f870cc257e488fbfc7c753e9ad977f6a6317112019783527f1e874c137d9b5a7178bac60dddb5fb2464f234073ded6503c63b02e658bd2754918301919091525160e0015290565b610892610c17565b61089a610c9d565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156108dd576108df565bfe5b5080610927576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610937610c17565b61093f610cbb565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156108dd575080610927576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6109db610c17565b81511580156109ec57506020820151155b15610a0b57506040805180820190915260008082526020820152610a75565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015181610a4d57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610a84610cd9565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610b81610cf8565b60006020826103008560086107d05a03fa90508080156108dd575080610be6576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610c44610d16565b8152602001610c51610d16565b905290565b6040518060a00160405280610c69610c17565b8152602001610c76610c31565b8152602001610c83610c31565b8152602001610c90610c31565b8152602001610c51610d34565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518061010001604052806008905b610d4c610c17565b815260200190600190039081610d44579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a26469706673582212206d345681a985b3c5757c4d59acdf36c06ca39af185e1a9a722386f7c6e944e8e64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}