{
  "address": "0x8763fdd1852EFF77698dA81e53fa8453B5D057d8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[7]",
          "name": "input",
          "type": "uint256[7]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcff8ca39384f259fbb760357beae887704fa7183164d059c4d5da7dd28e86ab5",
  "receipt": {
    "to": null,
    "from": "0x777BEeF85E717Ab18e44cd054B1a1E33a4A93b83",
    "contractAddress": "0x8763fdd1852EFF77698dA81e53fa8453B5D057d8",
    "transactionIndex": 26,
    "gasUsed": "820545",
    "logsBloom": "0x
    "blockHash": "0x6896efe4937721277950abcd5084ee883baf3f2f14bf979bb1370993bad4a74f",
    "transactionHash": "0xcff8ca39384f259fbb760357beae887704fa7183164d059c4d5da7dd28e86ab5",
    "logs": [],
    "blockNumber": 9604954,
    "cumulativeGasUsed": "6621983",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "4697f49d30c3a3a4fbbaa33b118c0669",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[7]\",\"name\":\"input\",\"type\":\"uint256[7]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/WithdrawVerifier.sol\":\"WithdrawVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/WithdrawVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input = [\\n            p1.X, p1.Y,\\n            p2.X, p2.Y\\n        ];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n     *         points p.\\n     */\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input = [p.X, p.Y, s];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        uint256[24] memory input = [\\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract WithdrawVerifier {\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[8] IC;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(uint256(15540120345449947505299080187067931629598527921351252737033990193042380682945), uint256(8523251510391691808302438917334181810823234027014421923767352562784949770040));\\n        vk.beta2 = Pairing.G2Point([uint256(5633856421012522574887370906436955687122585322387616854449109134843678981228), uint256(981277233986796854936768504722223338699708951416501446553124376798596359708)], [uint256(1304343559969075177189349793451641473062045650296110111391911955880239250222), uint256(3362418206888381247449825205735988788683677468055000155322908639470756431360)]);\\n        vk.gamma2 = Pairing.G2Point([uint256(13888079064107411847028651442901376978330316520133779493133229960931433278131), uint256(8649494206786632921210043413246368006638244087450217155592541183320336354013)], [uint256(364691332512283463799028384857378158045854294668677002588655505762208338168), uint256(7533431922199912017895566561282954768589026034832602507860702856096431639368)]);\\n        vk.delta2 = Pairing.G2Point([uint256(15039311771287847602480374424493056260887768033986497968985089167494630727483), uint256(4603971675911395478986446615723463091706502458187233161423727026013252426038)], [uint256(21816795277479586902486868054469614474941361690266959488231998922789786708771), uint256(4449495842370790452929651076719926116035876934986100302232975416233225246418)]);\\n        vk.IC[0] = Pairing.G1Point(uint256(12344779728425970146381806631978913595420181218009012273574820003182872310895), uint256(8237285253648109063511194806983958790719235948072583360407937150916642207291));\\n        vk.IC[1] = Pairing.G1Point(uint256(14697253909423005031368062321101879586610507207701870062687010166024515094383), uint256(5676280596089458627821029243519235596373789907232542312840717295900892507598));\\n        vk.IC[2] = Pairing.G1Point(uint256(14844185319121245167150509295864256979297728311586281807071361710097610813059), uint256(10007004570288704143130330210235966798812133101114468964092571496856422199065));\\n        vk.IC[3] = Pairing.G1Point(uint256(9971701808402797958530093667464064569731205992837944215855477976494676069332), uint256(5870046352548475709097802390745253308359865283225967375221437730303225473035));\\n        vk.IC[4] = Pairing.G1Point(uint256(3876907876966104420022879704779376467004649281349350898282176681130097968426), uint256(12907626886313665136964177229966929867054616562600277015696645002656590713336));\\n        vk.IC[5] = Pairing.G1Point(uint256(10829462360371373028716457987788733407969770512008117033841976422372606674619), uint256(2143234818021919918421380386877376238990786539053707422082347321896344177732));\\n        vk.IC[6] = Pairing.G1Point(uint256(20297415516132448112660509958669228811476568251062868511468723750107968101093), uint256(17421560242651555455743453541739064300552577178552037689580534242587368101065));\\n        vk.IC[7] = Pairing.G1Point(uint256(8955386165271624704162871021932204913101015391468854515812405790300760419465), uint256(6310752536841021454674695555874468050222511979124036847875720869488006234184));\\n\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        bytes memory proof,\\n        uint256[7] memory input\\n    ) public view returns (bool) {\\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n        for (uint8 i = 0; i < p.length; i++) {\\n            // Make sure that each element in the proof is less than the prime q\\n            require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n        }\\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\\n\\n        VerifyingKey memory vk = verifyingKey();\\n        // Compute the linear combination vkX\\n        Pairing.G1Point memory vkX = vk.IC[0];\\n        for (uint256 i = 0; i < input.length; i++) {\\n            // Make sure that every input is less than the snark scalar field\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-input-gte-snark-scalar-field\\\");\\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\\n        }\\n\\n        return Pairing.pairing(\\n            Pairing.negate(proofA),\\n            proofB,\\n            vk.alfa1,\\n            vk.beta2,\\n            vkX,\\n            vk.gamma2,\\n            proofC,\\n            vk.delta2\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0x69f24d8ef1fc537bb434bc87268140a3b515e9c7174b34bf4617a5a722bb5cc2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610dde806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063598da1d114610030575b600080fd5b610103600480360361010081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160e081810190925293969594818101949350915060079083908390808284376000920191909152509194506101179350505050565b604080519115158252519081900360200190f35b6000610121610bf7565b8380602001905161010081101561013757600080fd5b50905060005b60088160ff1610156101c2577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017957fe5b6020020151106101ba5760405162461bcd60e51b8152600401808060200182810382526022815260200180610d876022913960400191505060405180910390fd5b60010161013d565b506101cb610c16565b506040805180820190915281518152602080830151908201526101ec610c30565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610237610c16565b506040805180820190915260c0840151815260e0840151602082015261025b610c55565b610263610368565b905061026d610c16565b5060808101515160005b6007811015610332577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600781106102ad57fe5b6020020151106102ee5760405162461bcd60e51b8152600401808060200182810382526025815260200180610d626025913960400191505060405180910390fd5b610328826103238560800151846001016008811061030857fe5b60200201518c856007811061031957fe5b6020020151610889565b61092e565b9150600101610277565b5061035b61033f866109d2565b8584600001518560200151858760400151898960600151610a79565b9998505050505050505050565b610370610c55565b6040805180820182527f225b657bad7aeaa71cc80633ecb9e748acc065937b04c20aca50bdc4b8adf6c181527f12d7fd494312e6f92a4fcd23f0e8e1e25af56c577dadfa59041dd10f8a7017386020808301919091529083528151608080820184527f0c74a654e39bb60d8479e4f44228fd0a41efb343d78407178f0e1a39c63e7c6c8285019081527f022b621b84b183eb719deb44a463841e95385837aaaf4889bedcb3695966e61c606080850191909152908352845180860186527f02e23b778d6e8e82f29d2793dfffeafc235a1dae5ee9294c1e24d6aab3993b2e81527f076f0faef115b62b4d5de0a3f42b516da7508f691a21f2bad93c580401fe0600818601528385015285840192909252835180820185527f1eb45fcadbb3450a6cac71c054b21ca551c510ae0a68754b79d4e82ad2606ab38186019081527f131f70b31f1971654119ef18e87ffff28ee4fe73ebe8acc334c3131eba23cadd828501528152845180860186527ece687156296bc52c1054cec496ca3d2fd5456bdecbf444002bf1be649650f881527f10a7c57837519809417fb34ed65bcaaff4fefec5688f1c48af6cdafaa8d68b48818601528185015285850152835180820185527f213ff2e53dddd66bb776b055f441d7d0fd0585c70708b84680025e5b68bddf3b8186019081527f0a2dc170942d09e636f16cbdf063e2653853c32c0ed27581e06217b0b83d1936828501528152845180860186527f303bde5850ae0b916514b34608574e0cbfd622ff9ceb5643f7b65f0a36836b2381527f09d6534d75b559eeeb48d52254717416173719b8cd52247baf5b7d97b0ea56d2818601528185015282860152835180850185527f1b4ae5d0f9c044ceb2a52790491ffee12528f69cc9d628dcf778adf4cca3346f81527f123623634729ef41ca6f1e690942c8e34a76d5c3cf5b43ee1da2e489375ff63b81850152818601805191909152845180860186527f207e59d5fd8f2749ea7b6391ffbf2a972f8e4aded6b8bedc39e6c4ac561c076f81527f0c8ca935001bf8f23c5bb04a9dff903f6d4883bea9202e425ea408d6bcaaadce818601528151850152845180860186527f20d182dae0542d9904e7b537aefe771da42069917969520ffffb415397dfae8381527f161fc38d054de784aaa80c12143f72c15cbb63581079ad0fa73dabee4bbc2f19818601528151860152845180860186527f160bc880ce344ab2c9aa61c1cc8eeed34d6577e9c949221942467b9727834bd481527f0cfa54185b5fcf6552048a3591c88e56ac7fb7d42692569209a6e6a6abe1a80b81860152815190930192909252835180850185527f089240896dcd2b20e2b12bb89b29366f33e270fe9d7d4121173b7eaf3569052a81527f1c89753a5ffb659f0f264aa1dd50d41a1c40bfea16363910682bb6964985d1f881850152825190910152825180840184527f17f1422bf50feb8baa05bf6c6c28984999b88d3371c27d4355cecdd1ed1b06bb81527f04bd0725b1992b2575491267fae2f34ec0742809fb156364ad5465cdb3174c4481840152815160a00152825180840184527f2cdfee18c145918f94fc48c5bb13ac936105ce3b8852b41b947645dbb3c6dae581527f268440f010eef0df2a2f32e076035fa699d69f96c0e5e0f522ca9bf7ec2614c981840152815160c0015282518084019093527f13cc91a675c6da64544bae4c6504b85e34f44f7e3637f23fb22ff543ad2fac8983527f0df3c265404ca76791aa8e735d60e999e41ebe34f298f0ce9bb5d8475c338048918301919091525160e0015290565b610891610c16565b610899610c9c565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156108dc576108de565bfe5b5080610926576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610936610c16565b61093e610cba565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156108dc575080610926576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6109da610c16565b81511580156109eb57506020820151155b15610a0a57506040805180820190915260008082526020820152610a74565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015181610a4c57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610a83610cd8565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610b80610cf7565b60006020826103008560086107d05a03fa90508080156108dc575080610be5576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610c43610d15565b8152602001610c50610d15565b905290565b6040518060a00160405280610c68610c16565b8152602001610c75610c30565b8152602001610c82610c30565b8152602001610c8f610c30565b8152602001610c50610d33565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518061010001604052806008905b610d4b610c16565b815260200190600190039081610d43579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a26469706673582212209168be4f96bec856ecab3f56a330207facc28a922df0104b6f2c6d85d8cf0d7c64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063598da1d114610030575b600080fd5b610103600480360361010081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040805160e081810190925293969594818101949350915060079083908390808284376000920191909152509194506101179350505050565b604080519115158252519081900360200190f35b6000610121610bf7565b8380602001905161010081101561013757600080fd5b50905060005b60088160ff1610156101c2577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017957fe5b6020020151106101ba5760405162461bcd60e51b8152600401808060200182810382526022815260200180610d876022913960400191505060405180910390fd5b60010161013d565b506101cb610c16565b506040805180820190915281518152602080830151908201526101ec610c30565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610237610c16565b506040805180820190915260c0840151815260e0840151602082015261025b610c55565b610263610368565b905061026d610c16565b5060808101515160005b6007811015610332577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600781106102ad57fe5b6020020151106102ee5760405162461bcd60e51b8152600401808060200182810382526025815260200180610d626025913960400191505060405180910390fd5b610328826103238560800151846001016008811061030857fe5b60200201518c856007811061031957fe5b6020020151610889565b61092e565b9150600101610277565b5061035b61033f866109d2565b8584600001518560200151858760400151898960600151610a79565b9998505050505050505050565b610370610c55565b6040805180820182527f225b657bad7aeaa71cc80633ecb9e748acc065937b04c20aca50bdc4b8adf6c181527f12d7fd494312e6f92a4fcd23f0e8e1e25af56c577dadfa59041dd10f8a7017386020808301919091529083528151608080820184527f0c74a654e39bb60d8479e4f44228fd0a41efb343d78407178f0e1a39c63e7c6c8285019081527f022b621b84b183eb719deb44a463841e95385837aaaf4889bedcb3695966e61c606080850191909152908352845180860186527f02e23b778d6e8e82f29d2793dfffeafc235a1dae5ee9294c1e24d6aab3993b2e81527f076f0faef115b62b4d5de0a3f42b516da7508f691a21f2bad93c580401fe0600818601528385015285840192909252835180820185527f1eb45fcadbb3450a6cac71c054b21ca551c510ae0a68754b79d4e82ad2606ab38186019081527f131f70b31f1971654119ef18e87ffff28ee4fe73ebe8acc334c3131eba23cadd828501528152845180860186527ece687156296bc52c1054cec496ca3d2fd5456bdecbf444002bf1be649650f881527f10a7c57837519809417fb34ed65bcaaff4fefec5688f1c48af6cdafaa8d68b48818601528185015285850152835180820185527f213ff2e53dddd66bb776b055f441d7d0fd0585c70708b84680025e5b68bddf3b8186019081527f0a2dc170942d09e636f16cbdf063e2653853c32c0ed27581e06217b0b83d1936828501528152845180860186527f303bde5850ae0b916514b34608574e0cbfd622ff9ceb5643f7b65f0a36836b2381527f09d6534d75b559eeeb48d52254717416173719b8cd52247baf5b7d97b0ea56d2818601528185015282860152835180850185527f1b4ae5d0f9c044ceb2a52790491ffee12528f69cc9d628dcf778adf4cca3346f81527f123623634729ef41ca6f1e690942c8e34a76d5c3cf5b43ee1da2e489375ff63b81850152818601805191909152845180860186527f207e59d5fd8f2749ea7b6391ffbf2a972f8e4aded6b8bedc39e6c4ac561c076f81527f0c8ca935001bf8f23c5bb04a9dff903f6d4883bea9202e425ea408d6bcaaadce818601528151850152845180860186527f20d182dae0542d9904e7b537aefe771da42069917969520ffffb415397dfae8381527f161fc38d054de784aaa80c12143f72c15cbb63581079ad0fa73dabee4bbc2f19818601528151860152845180860186527f160bc880ce344ab2c9aa61c1cc8eeed34d6577e9c949221942467b9727834bd481527f0cfa54185b5fcf6552048a3591c88e56ac7fb7d42692569209a6e6a6abe1a80b81860152815190930192909252835180850185527f089240896dcd2b20e2b12bb89b29366f33e270fe9d7d4121173b7eaf3569052a81527f1c89753a5ffb659f0f264aa1dd50d41a1c40bfea16363910682bb6964985d1f881850152825190910152825180840184527f17f1422bf50feb8baa05bf6c6c28984999b88d3371c27d4355cecdd1ed1b06bb81527f04bd0725b1992b2575491267fae2f34ec0742809fb156364ad5465cdb3174c4481840152815160a00152825180840184527f2cdfee18c145918f94fc48c5bb13ac936105ce3b8852b41b947645dbb3c6dae581527f268440f010eef0df2a2f32e076035fa699d69f96c0e5e0f522ca9bf7ec2614c981840152815160c0015282518084019093527f13cc91a675c6da64544bae4c6504b85e34f44f7e3637f23fb22ff543ad2fac8983527f0df3c265404ca76791aa8e735d60e999e41ebe34f298f0ce9bb5d8475c338048918301919091525160e0015290565b610891610c16565b610899610c9c565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156108dc576108de565bfe5b5080610926576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610936610c16565b61093e610cba565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156108dc575080610926576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6109da610c16565b81511580156109eb57506020820151155b15610a0a57506040805180820190915260008082526020820152610a74565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015181610a4c57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610a83610cd8565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610b80610cf7565b60006020826103008560086107d05a03fa90508080156108dc575080610be5576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610c43610d15565b8152602001610c50610d15565b905290565b6040518060a00160405280610c68610c16565b8152602001610c75610c30565b8152602001610c82610c30565b8152602001610c8f610c30565b8152602001610c50610d33565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518061010001604052806008905b610d4b610c16565b815260200190600190039081610d43579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a26469706673582212209168be4f96bec856ecab3f56a330207facc28a922df0104b6f2c6d85d8cf0d7c64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}