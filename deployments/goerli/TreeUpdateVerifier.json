{
  "address": "0x9FcC3022c40ddC54797fE9E40d88810fE8Ff465c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[4]",
          "name": "input",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x48508c3aaed03daa1f2e38204c352221b92dab9a29b9ca8d3d34eac9f837c4ce",
  "receipt": {
    "to": null,
    "from": "0x777BEeF85E717Ab18e44cd054B1a1E33a4A93b83",
    "contractAddress": "0x9FcC3022c40ddC54797fE9E40d88810fE8Ff465c",
    "transactionIndex": 14,
    "gasUsed": "764785",
    "logsBloom": "0x
    "blockHash": "0xf0c7696ab81f19253b333dbfc54405485e1d553b55f4b46c6832d8a06d82044d",
    "transactionHash": "0x48508c3aaed03daa1f2e38204c352221b92dab9a29b9ca8d3d34eac9f837c4ce",
    "logs": [],
    "blockNumber": 9604960,
    "cumulativeGasUsed": "4519602",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "062683c16bee42514f7d34448b1873a2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/TreeUpdateVerifier.sol\":\"TreeUpdateVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/TreeUpdateVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input = [\\n            p1.X, p1.Y,\\n            p2.X, p2.Y\\n        ];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n     *         points p.\\n     */\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input = [p.X, p.Y, s];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        uint256[24] memory input = [\\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract TreeUpdateVerifier {\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[5] IC;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(uint256(9489640840752914925986375401189670487686185787300195869011991641321560341642), uint256(19710191485452971195918124552050096136912471576134001803539616265988777161280));\\n        vk.beta2 = Pairing.G2Point([uint256(14110428173245042419217011258097569732703420124673699365526455512673986404396), uint256(21585825404930297496348715739649646541705409284865367415410920933882126483274)], [uint256(3172322739795838374115140414313257642417461849264680911153485066416093573218), uint256(12323504501755337297514433237987638463650699243125093212680014300426975476719)]);\\n        vk.gamma2 = Pairing.G2Point([uint256(19109724787066342612495166053246420846510893351379582892421729418469649583361), uint256(21624433491903693895866802244850461209947621049712299728552939831475392723181)], [uint256(21633237373346144887762028978255163091607277743675216839843964712284554388998), uint256(484409027508094513574561313651801345968843579205202846384971366731812640036)]);\\n        vk.delta2 = Pairing.G2Point([uint256(11278174816516659946165198309976873868206167082495169571352955273220393739658), uint256(6533054851111064727009488621067478603225330797874564841381485214368113786293)], [uint256(19343877574543726997577476146634240476207422184155237101105327199449923801189), uint256(17343249975111067126101857723301741214345387209869525654223520097335015965666)]);\\n        vk.IC[0] = Pairing.G1Point(uint256(14558767918933769697468372634823792936243549360399814096771972615509241647044), uint256(7058388473132799419144655667963988149375011124546232221672446483066647276570));\\n        vk.IC[1] = Pairing.G1Point(uint256(5548220178993112867238810920317593272706535340821299155228060925235971093140), uint256(13339543197017302895963545621230735038106391272792818150353050214086247376146));\\n        vk.IC[2] = Pairing.G1Point(uint256(5846428521210422551650641705641640423177687674915446522132743834625512651591), uint256(6946849182836284240263115190289093725706732116277221224538656956353058077970));\\n        vk.IC[3] = Pairing.G1Point(uint256(13139235728646144013930168400047923802907098087253710764196528879722110703942), uint256(16470731901076238718844655807035963923780899493857012676098218145649354566817));\\n        vk.IC[4] = Pairing.G1Point(uint256(7647927944279368786116583056382367897801910309161597451063677547815340829058), uint256(2864516266549478125578914288820055492786202988562034820135802008489966923342));\\n\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        bytes memory proof,\\n        uint256[4] memory input\\n    ) public view returns (bool) {\\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n        for (uint8 i = 0; i < p.length; i++) {\\n            // Make sure that each element in the proof is less than the prime q\\n            require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n        }\\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\\n\\n        VerifyingKey memory vk = verifyingKey();\\n        // Compute the linear combination vkX\\n        Pairing.G1Point memory vkX = vk.IC[0];\\n        for (uint256 i = 0; i < input.length; i++) {\\n            // Make sure that every input is less than the snark scalar field\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-input-gte-snark-scalar-field\\\");\\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\\n        }\\n\\n        return Pairing.pairing(\\n            Pairing.negate(proofA),\\n            proofB,\\n            vk.alfa1,\\n            vk.beta2,\\n            vkX,\\n            vk.gamma2,\\n            proofC,\\n            vk.delta2\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0x6f12ad6485ac37e7e0efafefe8b0d5ac0bb65e2bce5096ddd7fd0a9b755cb8c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cdc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636bf062b214610030575b600080fd5b610102600480360360a081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051608081810190925293969594818101949350915060049083908390808284376000920191909152509194506101169350505050565b604080519115158252519081900360200190f35b6000610120610af6565b8380602001905161010081101561013657600080fd5b50905060005b60088160ff1610156101c1577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017857fe5b6020020151106101b95760405162461bcd60e51b8152600401808060200182810382526022815260200180610c856022913960400191505060405180910390fd5b60010161013c565b506101ca610b15565b506040805180820190915281518152602080830151908201526101eb610b2f565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610236610b15565b506040805180820190915260c0840151815260e0840151602082015261025a610b54565b610262610367565b905061026c610b15565b5060808101515160005b6004811015610331577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600481106102ac57fe5b6020020151106102ed5760405162461bcd60e51b8152600401808060200182810382526025815260200180610c606025913960400191505060405180910390fd5b610327826103228560800151846001016005811061030757fe5b60200201518c856004811061031857fe5b6020020151610788565b61082d565b9150600101610276565b5061035a61033e866108d1565b8584600001518560200151858760400151898960600151610978565b9998505050505050505050565b61036f610b54565b6040805180820182527f14faf245be4c5bed94955cd45309462a877ea31091098649837bf30a559ffc8a81527f2b9392b2e40443189b0ce84ff7ddebfa1507e60dcd17badd37cf42d6a4a3b2406020808301919091529083528151608080820184527f1f323825b0b9d9fc07d091d99411903c8d3e77cd102cfc4779cf4460f03de02c8285019081527f2fb924eb98a898b2ab339d49d224bc492aa76934e966862e81d968d93c4d3f4a606080850191909152908352845180860186527f070378962f254dbf8ff0c70899fbd80d490dbd322d74956a1f2af8cb4ddeb06281527f1b3edb3af597fa1a32b01b1da79b01b0013c979e1d56cec45cdfe51421227bef818601528385015285840192909252835180820185527f2a3fb88f2e69e84fc6ba7bfc0a78076e76274732b6c9fc1e42f56e7903068d018186019081527f2fcefee1220c747332e2a2375937f0e586bae24b240c874667085089e923b8ed828501528152845180860186527f2fd3fa7b3eb6098555577fb1b17545c890d94f416a1a64de80e9fe044bfde60681527f01122a71715c590587d4c91c32cc340ed904f67db37f5ef1fa0de049c1131524818601528185015285850152835180820185527f18ef3881fac18b59371001a6b42f97e84c5d7f2debcde2ae74fc435ede63258a8186019081527f0e7193f85d7d6439049ebfe6783cb16c17f556d622b0468127af198222ca7db5828501528152845180860186527f2ac43f28c6c381eab1e652044794965b7bbc4b4ee26081f43009d493898d506581527f2657ee7ece5067a38ba8a5062ea5fe1fff7c3e85542500d9a55305c1c81d03e2818601528185015282860152835180850185527f202ff87b1d07aedd231cbf0eaf7ef79ff959668401cc924266551e7b2f8e4fc481527f0f9ae8036285c6c0e2731f1ed70d0c4cf19490b2465c87f2d91a5e7a185cec1a81850152818601805191909152845180860186527f0c442e6c220549f6f7a381e749a953740236d53f53b2c20dfea711fedad9f29481527f1d7de9f4bcc45d602819e5f88c927964d47479c46cee39c2e18195a07a22e512818601528151850152845180860186527f0cecf6164de556269ad1136b296149266ac1e3aaee7b2167b93ec59319213b4781527f0f5bc6fd2b32b2754a50006001fbe0072c2c8e7fe10e0587c9d2dd6b221e7d12818601528151860152845180860186527f1d0c8b3bccddf8760fa8583a26b38367c249ae9ce9679ae1144c33bc3960d94681527f246a1a98bceaa00c314f7e68ec1de05e214fb2c10409a9bb9122a91959db6ca18186015281519093019290925283518085019094527f10e892e5b5981ea4cfe4a252aa2bce8f6def979daa8d0118d323f544f637698284527f0655423d8bd9fc1685ae9cc114b88a46795b3bd4a9ff6662ad44255aff8f6e4e9284019290925251015290565b610790610b15565b610798610b9b565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156107db576107dd565bfe5b5080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610835610b15565b61083d610bb9565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156107db575080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6108d9610b15565b81511580156108ea57506020820151155b1561090957506040805180820190915260008082526020820152610973565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784602001518161094b57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610982610bd7565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610a7f610bf6565b60006020826103008560086107d05a03fa90508080156107db575080610ae4576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610b42610c14565b8152602001610b4f610c14565b905290565b6040518060a00160405280610b67610b15565b8152602001610b74610b2f565b8152602001610b81610b2f565b8152602001610b8e610b2f565b8152602001610b4f610c32565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005905b610c49610b15565b815260200190600190039081610c41579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a264697066735822122051d36a2488a65cfde1f4c47ec5f28fd99dc879430864b4e86a44c6d95e092d1364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636bf062b214610030575b600080fd5b610102600480360360a081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051608081810190925293969594818101949350915060049083908390808284376000920191909152509194506101169350505050565b604080519115158252519081900360200190f35b6000610120610af6565b8380602001905161010081101561013657600080fd5b50905060005b60088160ff1610156101c1577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017857fe5b6020020151106101b95760405162461bcd60e51b8152600401808060200182810382526022815260200180610c856022913960400191505060405180910390fd5b60010161013c565b506101ca610b15565b506040805180820190915281518152602080830151908201526101eb610b2f565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610236610b15565b506040805180820190915260c0840151815260e0840151602082015261025a610b54565b610262610367565b905061026c610b15565b5060808101515160005b6004811015610331577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600481106102ac57fe5b6020020151106102ed5760405162461bcd60e51b8152600401808060200182810382526025815260200180610c606025913960400191505060405180910390fd5b610327826103228560800151846001016005811061030757fe5b60200201518c856004811061031857fe5b6020020151610788565b61082d565b9150600101610276565b5061035a61033e866108d1565b8584600001518560200151858760400151898960600151610978565b9998505050505050505050565b61036f610b54565b6040805180820182527f14faf245be4c5bed94955cd45309462a877ea31091098649837bf30a559ffc8a81527f2b9392b2e40443189b0ce84ff7ddebfa1507e60dcd17badd37cf42d6a4a3b2406020808301919091529083528151608080820184527f1f323825b0b9d9fc07d091d99411903c8d3e77cd102cfc4779cf4460f03de02c8285019081527f2fb924eb98a898b2ab339d49d224bc492aa76934e966862e81d968d93c4d3f4a606080850191909152908352845180860186527f070378962f254dbf8ff0c70899fbd80d490dbd322d74956a1f2af8cb4ddeb06281527f1b3edb3af597fa1a32b01b1da79b01b0013c979e1d56cec45cdfe51421227bef818601528385015285840192909252835180820185527f2a3fb88f2e69e84fc6ba7bfc0a78076e76274732b6c9fc1e42f56e7903068d018186019081527f2fcefee1220c747332e2a2375937f0e586bae24b240c874667085089e923b8ed828501528152845180860186527f2fd3fa7b3eb6098555577fb1b17545c890d94f416a1a64de80e9fe044bfde60681527f01122a71715c590587d4c91c32cc340ed904f67db37f5ef1fa0de049c1131524818601528185015285850152835180820185527f18ef3881fac18b59371001a6b42f97e84c5d7f2debcde2ae74fc435ede63258a8186019081527f0e7193f85d7d6439049ebfe6783cb16c17f556d622b0468127af198222ca7db5828501528152845180860186527f2ac43f28c6c381eab1e652044794965b7bbc4b4ee26081f43009d493898d506581527f2657ee7ece5067a38ba8a5062ea5fe1fff7c3e85542500d9a55305c1c81d03e2818601528185015282860152835180850185527f202ff87b1d07aedd231cbf0eaf7ef79ff959668401cc924266551e7b2f8e4fc481527f0f9ae8036285c6c0e2731f1ed70d0c4cf19490b2465c87f2d91a5e7a185cec1a81850152818601805191909152845180860186527f0c442e6c220549f6f7a381e749a953740236d53f53b2c20dfea711fedad9f29481527f1d7de9f4bcc45d602819e5f88c927964d47479c46cee39c2e18195a07a22e512818601528151850152845180860186527f0cecf6164de556269ad1136b296149266ac1e3aaee7b2167b93ec59319213b4781527f0f5bc6fd2b32b2754a50006001fbe0072c2c8e7fe10e0587c9d2dd6b221e7d12818601528151860152845180860186527f1d0c8b3bccddf8760fa8583a26b38367c249ae9ce9679ae1144c33bc3960d94681527f246a1a98bceaa00c314f7e68ec1de05e214fb2c10409a9bb9122a91959db6ca18186015281519093019290925283518085019094527f10e892e5b5981ea4cfe4a252aa2bce8f6def979daa8d0118d323f544f637698284527f0655423d8bd9fc1685ae9cc114b88a46795b3bd4a9ff6662ad44255aff8f6e4e9284019290925251015290565b610790610b15565b610798610b9b565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156107db576107dd565bfe5b5080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610835610b15565b61083d610bb9565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156107db575080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6108d9610b15565b81511580156108ea57506020820151155b1561090957506040805180820190915260008082526020820152610973565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784602001518161094b57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610982610bd7565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610a7f610bf6565b60006020826103008560086107d05a03fa90508080156107db575080610ae4576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610b42610c14565b8152602001610b4f610c14565b905290565b6040518060a00160405280610b67610b15565b8152602001610b74610b2f565b8152602001610b81610b2f565b8152602001610b8e610b2f565b8152602001610b4f610c32565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005905b610c49610b15565b815260200190600190039081610c41579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a264697066735822122051d36a2488a65cfde1f4c47ec5f28fd99dc879430864b4e86a44c6d95e092d1364736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}