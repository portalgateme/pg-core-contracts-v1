{
  "address": "0xCC8ee09026B4260dCE62A560cF004395EE55Cd6d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[4]",
          "name": "input",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98db927fb955064d5933b5f741b3b87d1963df56078109acc5e06b874e2ca2b1",
  "receipt": {
    "to": null,
    "from": "0xE356854c04927202C0188830424283ef1e34BAb0",
    "contractAddress": "0xCC8ee09026B4260dCE62A560cF004395EE55Cd6d",
    "transactionIndex": 37,
    "gasUsed": "764773",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xeb0bca93b8d3abeaba8801da4d6f2d56f7dbbbf2d5d78afc0adadd08eaa19827",
    "transactionHash": "0x98db927fb955064d5933b5f741b3b87d1963df56078109acc5e06b874e2ca2b1",
    "logs": [],
    "blockNumber": 9293924,
    "cumulativeGasUsed": "9858238",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4587a396688e902f70eb4973a31709cf",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[4]\",\"name\":\"input\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/TreeUpdateVerifier.sol\":\"TreeUpdateVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/TreeUpdateVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input = [\\n            p1.X, p1.Y,\\n            p2.X, p2.Y\\n        ];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n     *         points p.\\n     */\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input = [p.X, p.Y, s];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        uint256[24] memory input = [\\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract TreeUpdateVerifier {\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[5] IC;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(uint256(20746404117788435838188142510700622569533031787485945419367188967965230824814), uint256(5574669526184307006117554065833124620875662874782996787028562048301970040544));\\n        vk.beta2 = Pairing.G2Point([uint256(11240411316301963491917861168169557281796846321669440122296263026078130202896), uint256(10576481654157731319584435141501519089834237563846497435656840707848748732062)], [uint256(11101439535638989317703476078646005485107699014218351915509808154645023556752), uint256(16659151812536506718009033942248028521401022780430643298325789398858662302517)]);\\n        vk.gamma2 = Pairing.G2Point([uint256(21112387308233603288518975646754247088987644156629224485183871404376089426883), uint256(15394122061830107080392591058604681507311156159717950579038362326533788036341)], [uint256(10968191664481788657899652139677975226036895216845086870888987923289626307084), uint256(13939850659708891024364616949603649230430611107374510551281066534210770881811)]);\\n        vk.delta2 = Pairing.G2Point([uint256(6002865756626756918925780911592979350970805502158355820620125107926881043973), uint256(6658718289786654668526358232199812075296709201651778438750765294708432875475)], [uint256(20866390995528467478661169142558158866330627663523098675366996675062232756326), uint256(18295775545059644727164117148086109728313232626874786874470564320196145332160)]);\\n        vk.IC[0] = Pairing.G1Point(uint256(13268632555499178025252335311633741479152648287387387946096082447182793337695), uint256(1782530892715263568925059959143419355695139956177149045682785553820927593860));\\n        vk.IC[1] = Pairing.G1Point(uint256(18605734480230939380180148981664216683489897945838499770915208440367981382180), uint256(11610724947533108273652563116440011943393011507037802047545391652849619823394));\\n        vk.IC[2] = Pairing.G1Point(uint256(2457506596930113259505016830828482825102462451987102359848862963725471082286), uint256(10171715795285831214182654256904528966013820362582644117606529531173016723106));\\n        vk.IC[3] = Pairing.G1Point(uint256(1796115300508707274416810658410948528670879498320188467165848816139118491013), uint256(16835658584129451587972479671577049271664595138228110206201984740010116827197));\\n        vk.IC[4] = Pairing.G1Point(uint256(13278444889080895683431060569326021217639136713145754222669463879550905578731), uint256(7489720191593232587998681409678411761250796898963522709965625436604255476963));\\n\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        bytes memory proof,\\n        uint256[4] memory input\\n    ) public view returns (bool) {\\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n        for (uint8 i = 0; i < p.length; i++) {\\n            // Make sure that each element in the proof is less than the prime q\\n            require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n        }\\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\\n\\n        VerifyingKey memory vk = verifyingKey();\\n        // Compute the linear combination vkX\\n        Pairing.G1Point memory vkX = vk.IC[0];\\n        for (uint256 i = 0; i < input.length; i++) {\\n            // Make sure that every input is less than the snark scalar field\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-input-gte-snark-scalar-field\\\");\\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\\n        }\\n\\n        return Pairing.pairing(\\n            Pairing.negate(proofA),\\n            proofB,\\n            vk.alfa1,\\n            vk.beta2,\\n            vkX,\\n            vk.gamma2,\\n            proofC,\\n            vk.delta2\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0xbd32a1a0bd927c1beb4149c6ff9d06ac5868ed7ae6eeb6548463f998092bdb5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610cdc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636bf062b214610030575b600080fd5b610102600480360360a081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051608081810190925293969594818101949350915060049083908390808284376000920191909152509194506101169350505050565b604080519115158252519081900360200190f35b6000610120610af6565b8380602001905161010081101561013657600080fd5b50905060005b60088160ff1610156101c1577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017857fe5b6020020151106101b95760405162461bcd60e51b8152600401808060200182810382526022815260200180610c856022913960400191505060405180910390fd5b60010161013c565b506101ca610b15565b506040805180820190915281518152602080830151908201526101eb610b2f565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610236610b15565b506040805180820190915260c0840151815260e0840151602082015261025a610b54565b610262610367565b905061026c610b15565b5060808101515160005b6004811015610331577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600481106102ac57fe5b6020020151106102ed5760405162461bcd60e51b8152600401808060200182810382526025815260200180610c606025913960400191505060405180910390fd5b610327826103228560800151846001016005811061030757fe5b60200201518c856004811061031857fe5b6020020151610788565b61082d565b9150600101610276565b5061035a61033e866108d1565b8584600001518560200151858760400151898960600151610978565b9998505050505050505050565b61036f610b54565b6040805180820182527f2dde0c71955ec1c0df4b78ead3c210201c4c41be3bddb13236167080eabefd6e81527f0c5326b0f21b1371e6bc691433b6cce7d325525d53e510d78700ecc3325926e06020808301919091529083528151608080820184527f18d9d8ebe8267e7e99032f19927b0ab5483c6559498b9228c5fe4675f57d69108285019081527f176213940ad72434238cec1a5b9d495ec0e4e877c3253f2636fa0494c7ad0e9e606080850191909152908352845180860186527f188b312e121dc0e84de43ad7c8645eadd34b2c16407647ce7672d6c782ea049081527f24d4beebaed6692f8f4c7fdbe49ac129d831be10ea4058ae33eeb6cd17de5335818601528385015285840192909252835180820185527f2ead3010980d31d6fb3b6cc605657f9307f5fc78973fa5d071714c1f1a23fbc38186019081527f2208c3aa5c9a718c99459c855955bda43e8509621ba8dffaec90d6306dda6cf5828501528152845180860186527f183fc6c7d69093a3db2b35a0d9de74aeb783974da0dfd194c55a7a587c22ea0c81527f1ed1ad06110a4a66b3a107198efdb9eca8e4e896ec0c45354bd50ca0738ccd13818601528185015285850152835180820185527f0d458069dcc043092fd12682cd334996adeb3dafdcb4598a8393966e960486058186019081527f0eb8b3745c995882c68c8e8fb72f2e78983a17de0fdead96330819065b58afd3828501528152845180860186527f2e21f5723b8d85231f1655f990fd8953d937598cebcfc82b9818fe72ebb7b06681527f28730abfd5544aa3d548be679e69d9d75a5452d963b82cc209862592c0aa3fc0818601528185015282860152835180850185527f1d55c7a6dc561ecf6bdfdefad4ce3158f90b4b8ec77bb0ad16654310eee0eb5f81527f03f0e07182affe7d59a677e80f1a8edc0abd2e046d6875d6d82e48fdefdf0d8481850152818601805191909152845180860186527f292278f7b8a6e06b9ea92d84c8b06a87d00954537c6e4dc27d1aac10750dca2481527f19ab6ffbe4af1b93451dcec99c33bf16e8988b6c4569416af0aa88a6f61feb22818601528151850152845180860186527f056ee641d8cd2fc10f91bbc1e124972d02b4160d2a782b3effcf2ca0b260672e81527f167cfcb3e8c06a17dc359fc216f2334906124a1f33561c8fff7c02d7cb005ea2818601528151860152845180860186527f03f890b3332d181a87a7f97409acab4864262c0d60d0d54746c5d312c11ab58581527f2538a523b6156d79a431a43bd6ad1a0724efc0482d46683c18024bf84364c83d8186015281519093019290925283518085019094527f1d5b555e8a9b08b3e3131baa5381cb6f05aa7fc3227ab946555e31a1c35f74eb84527f108f080a040f006132617ddc970e62a36783be0e6874cadb71cc201231409ce39284019290925251015290565b610790610b15565b610798610b9b565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156107db576107dd565bfe5b5080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610835610b15565b61083d610bb9565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156107db575080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6108d9610b15565b81511580156108ea57506020820151155b1561090957506040805180820190915260008082526020820152610973565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784602001518161094b57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610982610bd7565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610a7f610bf6565b60006020826103008560086107d05a03fa90508080156107db575080610ae4576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610b42610c14565b8152602001610b4f610c14565b905290565b6040518060a00160405280610b67610b15565b8152602001610b74610b2f565b8152602001610b81610b2f565b8152602001610b8e610b2f565b8152602001610b4f610c32565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005905b610c49610b15565b815260200190600190039081610c41579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a2646970667358221220989b72e7fa2df10ee5b03ea49e4af19202f29a6a568a460ca4212fa713915d0964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80636bf062b214610030575b600080fd5b610102600480360360a081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051608081810190925293969594818101949350915060049083908390808284376000920191909152509194506101169350505050565b604080519115158252519081900360200190f35b6000610120610af6565b8380602001905161010081101561013657600080fd5b50905060005b60088160ff1610156101c1577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017857fe5b6020020151106101b95760405162461bcd60e51b8152600401808060200182810382526022815260200180610c856022913960400191505060405180910390fd5b60010161013c565b506101ca610b15565b506040805180820190915281518152602080830151908201526101eb610b2f565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610236610b15565b506040805180820190915260c0840151815260e0840151602082015261025a610b54565b610262610367565b905061026c610b15565b5060808101515160005b6004811015610331577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600481106102ac57fe5b6020020151106102ed5760405162461bcd60e51b8152600401808060200182810382526025815260200180610c606025913960400191505060405180910390fd5b610327826103228560800151846001016005811061030757fe5b60200201518c856004811061031857fe5b6020020151610788565b61082d565b9150600101610276565b5061035a61033e866108d1565b8584600001518560200151858760400151898960600151610978565b9998505050505050505050565b61036f610b54565b6040805180820182527f2dde0c71955ec1c0df4b78ead3c210201c4c41be3bddb13236167080eabefd6e81527f0c5326b0f21b1371e6bc691433b6cce7d325525d53e510d78700ecc3325926e06020808301919091529083528151608080820184527f18d9d8ebe8267e7e99032f19927b0ab5483c6559498b9228c5fe4675f57d69108285019081527f176213940ad72434238cec1a5b9d495ec0e4e877c3253f2636fa0494c7ad0e9e606080850191909152908352845180860186527f188b312e121dc0e84de43ad7c8645eadd34b2c16407647ce7672d6c782ea049081527f24d4beebaed6692f8f4c7fdbe49ac129d831be10ea4058ae33eeb6cd17de5335818601528385015285840192909252835180820185527f2ead3010980d31d6fb3b6cc605657f9307f5fc78973fa5d071714c1f1a23fbc38186019081527f2208c3aa5c9a718c99459c855955bda43e8509621ba8dffaec90d6306dda6cf5828501528152845180860186527f183fc6c7d69093a3db2b35a0d9de74aeb783974da0dfd194c55a7a587c22ea0c81527f1ed1ad06110a4a66b3a107198efdb9eca8e4e896ec0c45354bd50ca0738ccd13818601528185015285850152835180820185527f0d458069dcc043092fd12682cd334996adeb3dafdcb4598a8393966e960486058186019081527f0eb8b3745c995882c68c8e8fb72f2e78983a17de0fdead96330819065b58afd3828501528152845180860186527f2e21f5723b8d85231f1655f990fd8953d937598cebcfc82b9818fe72ebb7b06681527f28730abfd5544aa3d548be679e69d9d75a5452d963b82cc209862592c0aa3fc0818601528185015282860152835180850185527f1d55c7a6dc561ecf6bdfdefad4ce3158f90b4b8ec77bb0ad16654310eee0eb5f81527f03f0e07182affe7d59a677e80f1a8edc0abd2e046d6875d6d82e48fdefdf0d8481850152818601805191909152845180860186527f292278f7b8a6e06b9ea92d84c8b06a87d00954537c6e4dc27d1aac10750dca2481527f19ab6ffbe4af1b93451dcec99c33bf16e8988b6c4569416af0aa88a6f61feb22818601528151850152845180860186527f056ee641d8cd2fc10f91bbc1e124972d02b4160d2a782b3effcf2ca0b260672e81527f167cfcb3e8c06a17dc359fc216f2334906124a1f33561c8fff7c02d7cb005ea2818601528151860152845180860186527f03f890b3332d181a87a7f97409acab4864262c0d60d0d54746c5d312c11ab58581527f2538a523b6156d79a431a43bd6ad1a0724efc0482d46683c18024bf84364c83d8186015281519093019290925283518085019094527f1d5b555e8a9b08b3e3131baa5381cb6f05aa7fc3227ab946555e31a1c35f74eb84527f108f080a040f006132617ddc970e62a36783be0e6874cadb71cc201231409ce39284019290925251015290565b610790610b15565b610798610b9b565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa90508080156107db576107dd565bfe5b5080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610835610b15565b61083d610bb9565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa90508080156107db575080610825576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b6108d9610b15565b81511580156108ea57506020820151155b1561090957506040805180820190915260008082526020820152610973565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784602001518161094b57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610982610bd7565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610a7f610bf6565b60006020826103008560086107d05a03fa90508080156107db575080610ae4576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610b42610c14565b8152602001610b4f610c14565b905290565b6040518060a00160405280610b67610b15565b8152602001610b74610b2f565b8152602001610b81610b2f565b8152602001610b8e610b2f565b8152602001610b4f610c32565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6040518060a001604052806005905b610c49610b15565b815260200190600190039081610c41579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a2646970667358221220989b72e7fa2df10ee5b03ea49e4af19202f29a6a568a460ca4212fa713915d0964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}