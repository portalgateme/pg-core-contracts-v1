{
  "language": "Solidity",
  "sources": {
    "contracts/verifiers/RewardVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nlibrary Pairing {\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /*\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\n        }\n    }\n\n    /*\n     * @return r the sum of two points of G1\n     */\n    function plus(\n        G1Point memory p1,\n        G1Point memory p2\n    ) internal view returns (G1Point memory r) {\n        uint256[4] memory input = [\n            p1.X, p1.Y,\n            p2.X, p2.Y\n        ];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * @return r the product of a point on G1 and a scalar, i.e.\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\n     *         points p.\n     */\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input = [p.X, p.Y, s];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /* @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        uint256[24] memory input = [\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\n        ];\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n}\n\ncontract RewardVerifier {\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n    using Pairing for *;\n\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[13] IC;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(uint256(21767931899953041681759601379837797584457457282453337227656829866095582529264), uint256(9466436435023955222455576225738606765539482440554283094915986072822730787233));\n        vk.beta2 = Pairing.G2Point([uint256(1330265914530177073028840669185761750979879464345604278879476550491244348457), uint256(441002670633819971226826329498090721132349810583954426643170308780448495692)], [uint256(12690372317138182900040347965530152427328493310439662224906485992425479650602), uint256(973122018465981542820364311153317269202723761184347164196351293494173610515)]);\n        vk.gamma2 = Pairing.G2Point([uint256(5110542380301897940114447967721561579168740270522740378562958349240441190484), uint256(20759283826259115606086648410926369638332522864824607975730937745472716916266)], [uint256(4687844688719783951452431839314668347514786516327220255264045605779386427230), uint256(8119277948275866708666453571685907253040085557721531228516006929085317281148)]);\n        vk.delta2 = Pairing.G2Point([uint256(6207442708719601143350946501402672591480207534616860232079032684839678667377), uint256(11431947886789837829473969517525605396322738191990832604142968073317601137430)], [uint256(17063582622500709416080133663482805990029860333107667717017061026552010708908), uint256(19391815225082231888829952390468033327170707219869957775786290578399374111435)]);\n        vk.IC[0] = Pairing.G1Point(uint256(2865147057917990777320753618226745276517613100159470009305094177002749190110), uint256(12179625807639549964880867976515865378121490432973570189450976296301335140804));\n        vk.IC[1] = Pairing.G1Point(uint256(19206308104257391081460687173068265154292961337207670407458040953709818095189), uint256(8816518260891228337829150663512801399293017878594185742466238481419986146751));\n        vk.IC[2] = Pairing.G1Point(uint256(8345183369914217739750364832598373337990557879944980415857678379305515568370), uint256(2851927953597632076205162377780959158366417050294577014871075053100190134929));\n        vk.IC[3] = Pairing.G1Point(uint256(19100670749990169196303811175343092080409738060244012272021009840826077538637), uint256(2906071904744376183052195983576044395170944988035714905469984643662877459071));\n        vk.IC[4] = Pairing.G1Point(uint256(4406552687686839725412430304010875269858973180872393791514479224040301828756), uint256(21759398509985869905338211312312399636225962289356902642126755092183603318385));\n        vk.IC[5] = Pairing.G1Point(uint256(19768624138315902378809085444496505744282639543002092384883248072373052493769), uint256(12029401483131543710544860726662531712516700628500386514388446862668650504361));\n        vk.IC[6] = Pairing.G1Point(uint256(17182470511009684268337899492133222500795904425887652074809473187027335339567), uint256(7173468811871551206444905229640387793131713664401116776855971150956693450180));\n        vk.IC[7] = Pairing.G1Point(uint256(1056586803112479137469985189000689354177977967136901345739108248087390630653), uint256(5574351679981638167587639183832962518591477454193086834952724322023893744399));\n        vk.IC[8] = Pairing.G1Point(uint256(364027875581336045105959044071120791570503246327955970535634438689701435867), uint256(17648151551420595666236809248417454310445762878473518974022930710078528127213));\n        vk.IC[9] = Pairing.G1Point(uint256(19182071465208031981148947368635865581981172597968448460532872516545979609829), uint256(2297873816430136843860747740444820324671714852818729916310566774715898993041));\n        vk.IC[10] = Pairing.G1Point(uint256(10992425124276072728773297311096842923469347549039305037438137693623273063299), uint256(16172652711330632259955821904444647608970869947990342070069161878895350934476));\n        vk.IC[11] = Pairing.G1Point(uint256(15130180832261033122548013692142625477465988280712897766817927156277848920011), uint256(6333999738665181509705542841567875509829348430911518854491084659374296861454));\n        vk.IC[12] = Pairing.G1Point(uint256(19825433435326586685041966504926970246441663221872651107151085674281128129952), uint256(3524583184174380994840140720222698995878660855557870779871199620060280243883));\n\n    }\n\n    /*\n     * @returns Whether the proof is valid given the hardcoded verifying key\n     *          above and the public inputs\n     */\n    function verifyProof(\n        bytes memory proof,\n        uint256[12] memory input\n    ) public view returns (bool) {\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\n        for (uint8 i = 0; i < p.length; i++) {\n            // Make sure that each element in the proof is less than the prime q\n            require(p[i] < PRIME_Q, \"verifier-proof-element-gte-prime-q\");\n        }\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\n\n        VerifyingKey memory vk = verifyingKey();\n        // Compute the linear combination vkX\n        Pairing.G1Point memory vkX = vk.IC[0];\n        for (uint256 i = 0; i < input.length; i++) {\n            // Make sure that every input is less than the snark scalar field\n            require(input[i] < SNARK_SCALAR_FIELD, \"verifier-input-gte-snark-scalar-field\");\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\n        }\n\n        return Pairing.pairing(\n            Pairing.negate(proofA),\n            proofB,\n            vk.alfa1,\n            vk.beta2,\n            vkX,\n            vk.gamma2,\n            proofC,\n            vk.delta2\n        );\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}