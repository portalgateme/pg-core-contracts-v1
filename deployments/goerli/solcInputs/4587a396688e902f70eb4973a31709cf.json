{
  "language": "Solidity",
  "sources": {
    "contracts/verifiers/TreeUpdateVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nlibrary Pairing {\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /*\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\n        }\n    }\n\n    /*\n     * @return r the sum of two points of G1\n     */\n    function plus(\n        G1Point memory p1,\n        G1Point memory p2\n    ) internal view returns (G1Point memory r) {\n        uint256[4] memory input = [\n            p1.X, p1.Y,\n            p2.X, p2.Y\n        ];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * @return r the product of a point on G1 and a scalar, i.e.\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\n     *         points p.\n     */\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input = [p.X, p.Y, s];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /* @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        uint256[24] memory input = [\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\n        ];\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n}\n\ncontract TreeUpdateVerifier {\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n    using Pairing for *;\n\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[5] IC;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(uint256(20746404117788435838188142510700622569533031787485945419367188967965230824814), uint256(5574669526184307006117554065833124620875662874782996787028562048301970040544));\n        vk.beta2 = Pairing.G2Point([uint256(11240411316301963491917861168169557281796846321669440122296263026078130202896), uint256(10576481654157731319584435141501519089834237563846497435656840707848748732062)], [uint256(11101439535638989317703476078646005485107699014218351915509808154645023556752), uint256(16659151812536506718009033942248028521401022780430643298325789398858662302517)]);\n        vk.gamma2 = Pairing.G2Point([uint256(21112387308233603288518975646754247088987644156629224485183871404376089426883), uint256(15394122061830107080392591058604681507311156159717950579038362326533788036341)], [uint256(10968191664481788657899652139677975226036895216845086870888987923289626307084), uint256(13939850659708891024364616949603649230430611107374510551281066534210770881811)]);\n        vk.delta2 = Pairing.G2Point([uint256(6002865756626756918925780911592979350970805502158355820620125107926881043973), uint256(6658718289786654668526358232199812075296709201651778438750765294708432875475)], [uint256(20866390995528467478661169142558158866330627663523098675366996675062232756326), uint256(18295775545059644727164117148086109728313232626874786874470564320196145332160)]);\n        vk.IC[0] = Pairing.G1Point(uint256(13268632555499178025252335311633741479152648287387387946096082447182793337695), uint256(1782530892715263568925059959143419355695139956177149045682785553820927593860));\n        vk.IC[1] = Pairing.G1Point(uint256(18605734480230939380180148981664216683489897945838499770915208440367981382180), uint256(11610724947533108273652563116440011943393011507037802047545391652849619823394));\n        vk.IC[2] = Pairing.G1Point(uint256(2457506596930113259505016830828482825102462451987102359848862963725471082286), uint256(10171715795285831214182654256904528966013820362582644117606529531173016723106));\n        vk.IC[3] = Pairing.G1Point(uint256(1796115300508707274416810658410948528670879498320188467165848816139118491013), uint256(16835658584129451587972479671577049271664595138228110206201984740010116827197));\n        vk.IC[4] = Pairing.G1Point(uint256(13278444889080895683431060569326021217639136713145754222669463879550905578731), uint256(7489720191593232587998681409678411761250796898963522709965625436604255476963));\n\n    }\n\n    /*\n     * @returns Whether the proof is valid given the hardcoded verifying key\n     *          above and the public inputs\n     */\n    function verifyProof(\n        bytes memory proof,\n        uint256[4] memory input\n    ) public view returns (bool) {\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\n        for (uint8 i = 0; i < p.length; i++) {\n            // Make sure that each element in the proof is less than the prime q\n            require(p[i] < PRIME_Q, \"verifier-proof-element-gte-prime-q\");\n        }\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\n\n        VerifyingKey memory vk = verifyingKey();\n        // Compute the linear combination vkX\n        Pairing.G1Point memory vkX = vk.IC[0];\n        for (uint256 i = 0; i < input.length; i++) {\n            // Make sure that every input is less than the snark scalar field\n            require(input[i] < SNARK_SCALAR_FIELD, \"verifier-input-gte-snark-scalar-field\");\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\n        }\n\n        return Pairing.pairing(\n            Pairing.negate(proofA),\n            proofB,\n            vk.alfa1,\n            vk.beta2,\n            vkX,\n            vk.gamma2,\n            proofC,\n            vk.delta2\n        );\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}