{
  "language": "Solidity",
  "sources": {
    "contracts/verifiers/WithdrawVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nlibrary Pairing {\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /*\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\n        }\n    }\n\n    /*\n     * @return r the sum of two points of G1\n     */\n    function plus(\n        G1Point memory p1,\n        G1Point memory p2\n    ) internal view returns (G1Point memory r) {\n        uint256[4] memory input = [\n            p1.X, p1.Y,\n            p2.X, p2.Y\n        ];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * @return r the product of a point on G1 and a scalar, i.e.\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\n     *         points p.\n     */\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input = [p.X, p.Y, s];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /* @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        uint256[24] memory input = [\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\n        ];\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n}\n\ncontract WithdrawVerifier {\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n    using Pairing for *;\n\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[8] IC;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(uint256(15540120345449947505299080187067931629598527921351252737033990193042380682945), uint256(8523251510391691808302438917334181810823234027014421923767352562784949770040));\n        vk.beta2 = Pairing.G2Point([uint256(5633856421012522574887370906436955687122585322387616854449109134843678981228), uint256(981277233986796854936768504722223338699708951416501446553124376798596359708)], [uint256(1304343559969075177189349793451641473062045650296110111391911955880239250222), uint256(3362418206888381247449825205735988788683677468055000155322908639470756431360)]);\n        vk.gamma2 = Pairing.G2Point([uint256(13888079064107411847028651442901376978330316520133779493133229960931433278131), uint256(8649494206786632921210043413246368006638244087450217155592541183320336354013)], [uint256(364691332512283463799028384857378158045854294668677002588655505762208338168), uint256(7533431922199912017895566561282954768589026034832602507860702856096431639368)]);\n        vk.delta2 = Pairing.G2Point([uint256(15039311771287847602480374424493056260887768033986497968985089167494630727483), uint256(4603971675911395478986446615723463091706502458187233161423727026013252426038)], [uint256(21816795277479586902486868054469614474941361690266959488231998922789786708771), uint256(4449495842370790452929651076719926116035876934986100302232975416233225246418)]);\n        vk.IC[0] = Pairing.G1Point(uint256(12344779728425970146381806631978913595420181218009012273574820003182872310895), uint256(8237285253648109063511194806983958790719235948072583360407937150916642207291));\n        vk.IC[1] = Pairing.G1Point(uint256(14697253909423005031368062321101879586610507207701870062687010166024515094383), uint256(5676280596089458627821029243519235596373789907232542312840717295900892507598));\n        vk.IC[2] = Pairing.G1Point(uint256(14844185319121245167150509295864256979297728311586281807071361710097610813059), uint256(10007004570288704143130330210235966798812133101114468964092571496856422199065));\n        vk.IC[3] = Pairing.G1Point(uint256(9971701808402797958530093667464064569731205992837944215855477976494676069332), uint256(5870046352548475709097802390745253308359865283225967375221437730303225473035));\n        vk.IC[4] = Pairing.G1Point(uint256(3876907876966104420022879704779376467004649281349350898282176681130097968426), uint256(12907626886313665136964177229966929867054616562600277015696645002656590713336));\n        vk.IC[5] = Pairing.G1Point(uint256(10829462360371373028716457987788733407969770512008117033841976422372606674619), uint256(2143234818021919918421380386877376238990786539053707422082347321896344177732));\n        vk.IC[6] = Pairing.G1Point(uint256(20297415516132448112660509958669228811476568251062868511468723750107968101093), uint256(17421560242651555455743453541739064300552577178552037689580534242587368101065));\n        vk.IC[7] = Pairing.G1Point(uint256(8955386165271624704162871021932204913101015391468854515812405790300760419465), uint256(6310752536841021454674695555874468050222511979124036847875720869488006234184));\n\n    }\n\n    /*\n     * @returns Whether the proof is valid given the hardcoded verifying key\n     *          above and the public inputs\n     */\n    function verifyProof(\n        bytes memory proof,\n        uint256[7] memory input\n    ) public view returns (bool) {\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\n        for (uint8 i = 0; i < p.length; i++) {\n            // Make sure that each element in the proof is less than the prime q\n            require(p[i] < PRIME_Q, \"verifier-proof-element-gte-prime-q\");\n        }\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\n\n        VerifyingKey memory vk = verifyingKey();\n        // Compute the linear combination vkX\n        Pairing.G1Point memory vkX = vk.IC[0];\n        for (uint256 i = 0; i < input.length; i++) {\n            // Make sure that every input is less than the snark scalar field\n            require(input[i] < SNARK_SCALAR_FIELD, \"verifier-input-gte-snark-scalar-field\");\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\n        }\n\n        return Pairing.pairing(\n            Pairing.negate(proofA),\n            proofB,\n            vk.alfa1,\n            vk.beta2,\n            vkX,\n            vk.gamma2,\n            proofC,\n            vk.delta2\n        );\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}