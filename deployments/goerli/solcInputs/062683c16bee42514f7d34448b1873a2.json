{
  "language": "Solidity",
  "sources": {
    "contracts/verifiers/TreeUpdateVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.6.0;\n\nlibrary Pairing {\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n\n    struct G1Point {\n        uint256 X;\n        uint256 Y;\n    }\n\n    // Encoding of field elements is: X[0] * z + X[1]\n    struct G2Point {\n        uint256[2] X;\n        uint256[2] Y;\n    }\n\n    /*\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\n     */\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\n        // The prime q in the base field F_q for G1\n        if (p.X == 0 && p.Y == 0) {\n            return G1Point(0, 0);\n        } else {\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\n        }\n    }\n\n    /*\n     * @return r the sum of two points of G1\n     */\n    function plus(\n        G1Point memory p1,\n        G1Point memory p2\n    ) internal view returns (G1Point memory r) {\n        uint256[4] memory input = [\n            p1.X, p1.Y,\n            p2.X, p2.Y\n        ];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-add-failed\");\n    }\n\n    /*\n     * @return r the product of a point on G1 and a scalar, i.e.\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\n     *         points p.\n     */\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\n        uint256[3] memory input = [p.X, p.Y, s];\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-mul-failed\");\n    }\n\n    /* @return The result of computing the pairing check\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\n     *         For example,\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\n     */\n    function pairing(\n        G1Point memory a1,\n        G2Point memory a2,\n        G1Point memory b1,\n        G2Point memory b2,\n        G1Point memory c1,\n        G2Point memory c2,\n        G1Point memory d1,\n        G2Point memory d2\n    ) internal view returns (bool) {\n        uint256[24] memory input = [\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\n        ];\n        uint256[1] memory out;\n        bool success;\n\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\n            // Use \"invalid\" to make gas estimation work\n            switch success case 0 { invalid() }\n        }\n\n        require(success, \"pairing-opcode-failed\");\n        return out[0] != 0;\n    }\n}\n\ncontract TreeUpdateVerifier {\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\n    using Pairing for *;\n\n    struct VerifyingKey {\n        Pairing.G1Point alfa1;\n        Pairing.G2Point beta2;\n        Pairing.G2Point gamma2;\n        Pairing.G2Point delta2;\n        Pairing.G1Point[5] IC;\n    }\n\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\n        vk.alfa1 = Pairing.G1Point(uint256(9489640840752914925986375401189670487686185787300195869011991641321560341642), uint256(19710191485452971195918124552050096136912471576134001803539616265988777161280));\n        vk.beta2 = Pairing.G2Point([uint256(14110428173245042419217011258097569732703420124673699365526455512673986404396), uint256(21585825404930297496348715739649646541705409284865367415410920933882126483274)], [uint256(3172322739795838374115140414313257642417461849264680911153485066416093573218), uint256(12323504501755337297514433237987638463650699243125093212680014300426975476719)]);\n        vk.gamma2 = Pairing.G2Point([uint256(19109724787066342612495166053246420846510893351379582892421729418469649583361), uint256(21624433491903693895866802244850461209947621049712299728552939831475392723181)], [uint256(21633237373346144887762028978255163091607277743675216839843964712284554388998), uint256(484409027508094513574561313651801345968843579205202846384971366731812640036)]);\n        vk.delta2 = Pairing.G2Point([uint256(11278174816516659946165198309976873868206167082495169571352955273220393739658), uint256(6533054851111064727009488621067478603225330797874564841381485214368113786293)], [uint256(19343877574543726997577476146634240476207422184155237101105327199449923801189), uint256(17343249975111067126101857723301741214345387209869525654223520097335015965666)]);\n        vk.IC[0] = Pairing.G1Point(uint256(14558767918933769697468372634823792936243549360399814096771972615509241647044), uint256(7058388473132799419144655667963988149375011124546232221672446483066647276570));\n        vk.IC[1] = Pairing.G1Point(uint256(5548220178993112867238810920317593272706535340821299155228060925235971093140), uint256(13339543197017302895963545621230735038106391272792818150353050214086247376146));\n        vk.IC[2] = Pairing.G1Point(uint256(5846428521210422551650641705641640423177687674915446522132743834625512651591), uint256(6946849182836284240263115190289093725706732116277221224538656956353058077970));\n        vk.IC[3] = Pairing.G1Point(uint256(13139235728646144013930168400047923802907098087253710764196528879722110703942), uint256(16470731901076238718844655807035963923780899493857012676098218145649354566817));\n        vk.IC[4] = Pairing.G1Point(uint256(7647927944279368786116583056382367897801910309161597451063677547815340829058), uint256(2864516266549478125578914288820055492786202988562034820135802008489966923342));\n\n    }\n\n    /*\n     * @returns Whether the proof is valid given the hardcoded verifying key\n     *          above and the public inputs\n     */\n    function verifyProof(\n        bytes memory proof,\n        uint256[4] memory input\n    ) public view returns (bool) {\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\n        for (uint8 i = 0; i < p.length; i++) {\n            // Make sure that each element in the proof is less than the prime q\n            require(p[i] < PRIME_Q, \"verifier-proof-element-gte-prime-q\");\n        }\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\n\n        VerifyingKey memory vk = verifyingKey();\n        // Compute the linear combination vkX\n        Pairing.G1Point memory vkX = vk.IC[0];\n        for (uint256 i = 0; i < input.length; i++) {\n            // Make sure that every input is less than the snark scalar field\n            require(input[i] < SNARK_SCALAR_FIELD, \"verifier-input-gte-snark-scalar-field\");\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\n        }\n\n        return Pairing.pairing(\n            Pairing.negate(proofA),\n            proofB,\n            vk.alfa1,\n            vk.beta2,\n            vkX,\n            vk.gamma2,\n            proofC,\n            vk.delta2\n        );\n    }\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}