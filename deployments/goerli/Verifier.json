{
  "address": "0xc3AD3578F67eb5640Cd1630C6DA3Dd99874E3b7b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[6]",
          "name": "input",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc63aa73dc62efbcd62defe3a6bf46d82d08031a65bf389fa335e56d80c1bc983",
  "receipt": {
    "to": null,
    "from": "0xE356854c04927202C0188830424283ef1e34BAb0",
    "contractAddress": "0xc3AD3578F67eb5640Cd1630C6DA3Dd99874E3b7b",
    "transactionIndex": 41,
    "gasUsed": "993101",
    "logsBloom": "0x
    "blockHash": "0x1780a3b8abb14883c5377cea42e407b3212158ebdc4a52fddebbca0129291c8d",
    "transactionHash": "0xc63aa73dc62efbcd62defe3a6bf46d82d08031a65bf389fa335e56d80c1bc983",
    "logs": [],
    "blockNumber": 9321947,
    "cumulativeGasUsed": "6805569",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "14983fa83c315ed6b0f2bb049230558b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[6]\",\"name\":\"input\",\"type\":\"uint256[6]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tornado-core/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/tornado-core/Verifier.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2020-05-12\\n */\\n\\n// https://tornado.cash Verifier.sol generated by trusted setup ceremony.\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n     *         points p.\\n     */\\n    function scalar_mul(\\n        G1Point memory p,\\n        uint256 s\\n    ) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n        uint256 inputSize = 24;\\n        uint256[] memory input = new uint256[](inputSize);\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(\\n                sub(gas(), 2000),\\n                8,\\n                add(input, 0x20),\\n                mul(inputSize, 0x20),\\n                out,\\n                0x20\\n            )\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract Verifier {\\n    uint256 constant SNARK_SCALAR_FIELD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q =\\n        21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[7] IC;\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            uint256(\\n                20692898189092739278193869274495556617788530808486270118371701516666252877969\\n            ),\\n            uint256(\\n                11713062878292653967971378194351968039596396853904572879488166084231740557279\\n            )\\n        );\\n        vk.beta2 = Pairing.G2Point(\\n            [\\n                uint256(\\n                    12168528810181263706895252315640534818222943348193302139358377162645029937006\\n                ),\\n                uint256(\\n                    281120578337195720357474965979947690431622127986816839208576358024608803542\\n                )\\n            ],\\n            [\\n                uint256(\\n                    16129176515713072042442734839012966563817890688785805090011011570989315559913\\n                ),\\n                uint256(\\n                    9011703453772030375124466642203641636825223906145908770308724549646909480510\\n                )\\n            ]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [\\n                uint256(\\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634\\n                ),\\n                uint256(\\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\\n                )\\n            ],\\n            [\\n                uint256(\\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531\\n                ),\\n                uint256(\\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\\n                )\\n            ]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [\\n                uint256(\\n                    21280594949518992153305586783242820682644996932183186320680800072133486887432\\n                ),\\n                uint256(\\n                    150879136433974552800030963899771162647715069685890547489132178314736470662\\n                )\\n            ],\\n            [\\n                uint256(\\n                    1081836006956609894549771334721413187913047383331561601606260283167615953295\\n                ),\\n                uint256(\\n                    11434086686358152335540554643130007307617078324975981257823476472104616196090\\n                )\\n            ]\\n        );\\n        vk.IC[0] = Pairing.G1Point(\\n            uint256(\\n                16225148364316337376768119297456868908427925829817748684139175309620217098814\\n            ),\\n            uint256(\\n                5167268689450204162046084442581051565997733233062478317813755636162413164690\\n            )\\n        );\\n        vk.IC[1] = Pairing.G1Point(\\n            uint256(\\n                12882377842072682264979317445365303375159828272423495088911985689463022094260\\n            ),\\n            uint256(\\n                19488215856665173565526758360510125932214252767275816329232454875804474844786\\n            )\\n        );\\n        vk.IC[2] = Pairing.G1Point(\\n            uint256(\\n                13083492661683431044045992285476184182144099829507350352128615182516530014777\\n            ),\\n            uint256(\\n                602051281796153692392523702676782023472744522032670801091617246498551238913\\n            )\\n        );\\n        vk.IC[3] = Pairing.G1Point(\\n            uint256(\\n                9732465972180335629969421513785602934706096902316483580882842789662669212890\\n            ),\\n            uint256(\\n                2776526698606888434074200384264824461688198384989521091253289776235602495678\\n            )\\n        );\\n        vk.IC[4] = Pairing.G1Point(\\n            uint256(\\n                8586364274534577154894611080234048648883781955345622578531233113180532234842\\n            ),\\n            uint256(\\n                21276134929883121123323359450658320820075698490666870487450985603988214349407\\n            )\\n        );\\n        vk.IC[5] = Pairing.G1Point(\\n            uint256(\\n                4910628533171597675018724709631788948355422829499855033965018665300386637884\\n            ),\\n            uint256(\\n                20532468890024084510431799098097081600480376127870299142189696620752500664302\\n            )\\n        );\\n        vk.IC[6] = Pairing.G1Point(\\n            uint256(\\n                15335858102289947642505450692012116222827233918185150176888641903531542034017\\n            ),\\n            uint256(\\n                5311597067667671581646709998171703828965875677637292315055030353779531404812\\n            )\\n        );\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        bytes memory proof,\\n        uint256[6] memory input\\n    ) public view returns (bool) {\\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n\\n        // Make sure that each element in the proof is less than the prime q\\n        for (uint8 i = 0; i < p.length; i++) {\\n            require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n        }\\n\\n        Proof memory _proof;\\n        _proof.A = Pairing.G1Point(p[0], p[1]);\\n        _proof.B = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n        _proof.C = Pairing.G1Point(p[6], p[7]);\\n\\n        VerifyingKey memory vk = verifyingKey();\\n\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        vk_x = Pairing.plus(vk_x, vk.IC[0]);\\n\\n        // Make sure that every input is less than the snark scalar field\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(\\n                input[i] < SNARK_SCALAR_FIELD,\\n                \\\"verifier-gte-snark-scalar-field\\\"\\n            );\\n            vk_x = Pairing.plus(\\n                vk_x,\\n                Pairing.scalar_mul(vk.IC[i + 1], input[i])\\n            );\\n        }\\n\\n        return\\n            Pairing.pairing(\\n                Pairing.negate(_proof.A),\\n                _proof.B,\\n                vk.alfa1,\\n                vk.beta2,\\n                vk_x,\\n                vk.gamma2,\\n                _proof.C,\\n                vk.delta2\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x898e03fe620be8102bc8ecefea874ea77ac2fb8446a6bb9ff83e2b8871cfcac9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}