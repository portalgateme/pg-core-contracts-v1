{
  "address": "0x9d22B1813446ff42E3cE9A9219B41999Be819a39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVerifier",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_denomination",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_merkleTreeHeight",
          "type": "uint32"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leafIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "denomination",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_nullifierHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "isSpentArray",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "spent",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refund",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc395b5a09a92156d0b8181f63f11e85e484dfd2146ac07a387dc4a30dddd3055",
  "receipt": {
    "to": null,
    "from": "0x777BEeF85E717Ab18e44cd054B1a1E33a4A93b83",
    "contractAddress": "0x9d22B1813446ff42E3cE9A9219B41999Be819a39",
    "transactionIndex": 15,
    "gasUsed": "2890705",
    "logsBloom": "0x
    "blockHash": "0x0e77db35f1be03da92b1170387c82101e488f5f34ded6bfdeda873aa77cc0393",
    "transactionHash": "0xc395b5a09a92156d0b8181f63f11e85e484dfd2146ac07a387dc4a30dddd3055",
    "logs": [],
    "blockNumber": 9604883,
    "cumulativeGasUsed": "4045427",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x50edC60BFC0be71E6DB26d71E9C7B93911e28ba1",
    "0xA67701878419e9f998aaB3f18FF4c60f079A645e",
    "1000000000000000000000000000000",
    20,
    "0xc8079E6AA1d7785dC57AfC178211314164B5B138"
  ],
  "numDeployments": 2,
  "solcInputHash": "8beda19219579723a38f17825df12756",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_denomination\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_merkleTreeHeight\",\"type\":\"uint32\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leafIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denomination\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_nullifierHashes\",\"type\":\"bytes32[]\"}],\"name\":\"isSpentArray\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"spent\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(bytes32)\":{\"details\":\"Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.\",\"params\":{\"_commitment\":\"the note commitment, which is PedersenHash(nullifier + secret)\"}},\"getLastRoot()\":{\"details\":\"Returns the last root\"},\"hashLeftRight(bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns poseidon(_left, _right)\"},\"isKnownRoot(bytes32)\":{\"details\":\"Whether the root is present in the root history\"},\"isSpent(bytes32)\":{\"details\":\"whether a note is already spent \"},\"isSpentArray(bytes32[])\":{\"details\":\"whether an array of notes is already spent \"},\"withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)\":{\"details\":\"Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tornado-core/ERC20Tornado.sol\":\"ERC20Tornado\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/IHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IHasher {\\n  function poseidon(bytes32[2] calldata inputs) external pure returns (bytes32);\\n\\n  function poseidon(bytes32[3] calldata inputs) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x467095fa43569e497a5e1b1f63324a80b06c8575523c114b67d228c2f6202173\",\"license\":\"MIT\"},\"contracts/tornado-core/ERC20Tornado.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Tornado.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ERC20Tornado is Tornado {\\n    using SafeERC20 for IERC20;\\n    IERC20 public token;\\n\\n    constructor(\\n        IVerifier _verifier,\\n        IHasher _hasher,\\n        uint256 _denomination,\\n        uint32 _merkleTreeHeight,\\n        IERC20 _token\\n    ) Tornado(_verifier, _hasher, _denomination, _merkleTreeHeight) {\\n        token = _token;\\n    }\\n\\n    function _processDeposit() internal override {\\n        require(\\n            msg.value == 0,\\n            \\\"ETH value is supposed to be 0 for ERC20 instance\\\"\\n        );\\n        token.safeTransferFrom(msg.sender, address(this), denomination);\\n    }\\n\\n    function _processWithdraw(\\n        address payable _recipient,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _refund\\n    ) internal override {\\n        require(\\n            msg.value == _refund,\\n            \\\"Incorrect refund amount received by the contract\\\"\\n        );\\n\\n        token.safeTransfer(_recipient, denomination - _fee);\\n        if (_fee > 0) {\\n            token.safeTransfer(_relayer, _fee);\\n        }\\n\\n        if (_refund > 0) {\\n            (bool success, ) = _recipient.call{value: _refund}(\\\"\\\");\\n            if (!success) {\\n                // let's return _refund back to the relayer\\n                _relayer.transfer(_refund);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa693df7f6f6862969a694ba8d34f857bfa28ffa3ebf6dac9dcc96ed634ca4394\",\"license\":\"MIT\"},\"contracts/tornado-core/MerkleTreeWithHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IHasher.sol\\\";\\n\\ncontract MerkleTreeWithHistory {\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n\\n  uint32 public immutable levels;\\n  IHasher public hasher;\\n\\n  bytes32[] public filledSubtrees;\\n  bytes32[] public zeros;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n  uint32 public constant ROOT_HISTORY_SIZE = 10;\\n  bytes32[ROOT_HISTORY_SIZE] public roots;\\n\\n  constructor(uint32 _treeLevels, IHasher _hasher) {\\n    require(_treeLevels > 0, \\\"_treeLevels should be greater than zero\\\");\\n    require(_treeLevels < 32, \\\"_treeLevels should be less than 32\\\");\\n    levels = _treeLevels;\\n    hasher = _hasher;\\n\\n    bytes32 currentZero = bytes32(ZERO_VALUE);\\n    zeros.push(currentZero);\\n    filledSubtrees.push(currentZero);\\n\\n    for (uint32 i = 1; i < _treeLevels; i++) {\\n      currentZero = hashLeftRight(currentZero, currentZero);\\n      zeros.push(currentZero);\\n      filledSubtrees.push(currentZero);\\n    }\\n\\n    filledSubtrees.push(hashLeftRight(currentZero, currentZero));\\n    roots[0] = filledSubtrees[_treeLevels];\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns poseidon(_left, _right)\\n  */\\n  function hashLeftRight(bytes32 _left, bytes32 _right) public view returns (bytes32) {\\n    return hasher.poseidon([_left, _right]);\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 currentIndex = nextIndex;\\n    require(currentIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    nextIndex = currentIndex + 1;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros[i];\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n\\n      currentLevelHash = hashLeftRight(left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    currentRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    roots[currentRootIndex] = currentLevelHash;\\n    return nextIndex - 1;\\n  }\\n\\n  function _bulkInsert(bytes32[] memory _leaves) internal {\\n    uint32 insertIndex = nextIndex;\\n    require(insertIndex + _leaves.length <= uint32(2)**levels, \\\"Merkle doesn't have enough capacity to add specified leaves\\\");\\n\\n    bytes32[] memory subtrees = new bytes32[](levels);\\n    bool[] memory modifiedSubtrees = new bool[](levels);\\n    for (uint32 j = 0; j < _leaves.length - 1; j++) {\\n      uint256 index = insertIndex + j;\\n      bytes32 currentLevelHash = _leaves[j];\\n\\n      for (uint32 i = 0; ; i++) {\\n        if (index % 2 == 0) {\\n          modifiedSubtrees[i] = true;\\n          subtrees[i] = currentLevelHash;\\n          break;\\n        }\\n\\n        if (subtrees[i] == bytes32(0)) {\\n          subtrees[i] = filledSubtrees[i];\\n        }\\n        currentLevelHash = hashLeftRight(subtrees[i], currentLevelHash);\\n        index /= 2;\\n      }\\n    }\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      // using local map to save on gas on writes if elements were not modified\\n      if (modifiedSubtrees[i]) {\\n        filledSubtrees[i] = subtrees[i];\\n      }\\n    }\\n\\n    nextIndex = uint32(insertIndex + _leaves.length - 1);\\n    _insert(_leaves[_leaves.length - 1]);\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 i = currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n}\\n\",\"keccak256\":\"0x0d5a84318d0ff3109857e25970ca91e1f248e90940a8b68f5eaf82aa6bca1dfb\",\"license\":\"MIT\"},\"contracts/tornado-core/Tornado.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MerkleTreeWithHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        bytes memory _proof,\\n        uint256[6] memory _input\\n    ) external returns (bool);\\n}\\n\\nabstract contract Tornado is MerkleTreeWithHistory, ReentrancyGuard {\\n    IVerifier public immutable verifier;\\n    uint256 public denomination;\\n\\n    mapping(bytes32 => bool) public nullifierHashes;\\n    // we store all commitments just to prevent accidental deposits with the same commitment\\n    mapping(bytes32 => bool) public commitments;\\n\\n    event Deposit(\\n        bytes32 indexed commitment,\\n        uint32 leafIndex,\\n        uint256 timestamp\\n    );\\n    event Withdrawal(\\n        address to,\\n        bytes32 nullifierHash,\\n        address indexed relayer,\\n        uint256 fee\\n    );\\n\\n    /**\\n@dev The constructor\\n    @param _verifier the address of SNARK verifier for this contract\\n    @param _hasher the address of MiMC hash contract\\n    @param _denomination transfer amount for each deposit\\n    @param _merkleTreeHeight the height of deposits' Merkle Tree\\n  */\\n    constructor(\\n        IVerifier _verifier,\\n        IHasher _hasher,\\n        uint256 _denomination,\\n        uint32 _merkleTreeHeight\\n    ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\\n        require(_denomination > 0, \\\"denomination should be greater than 0\\\");\\n        verifier = _verifier;\\n        denomination = _denomination;\\n    }\\n\\n    /**\\n@dev Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n  */\\n    function deposit(bytes32 _commitment) external payable nonReentrant {\\n        require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n        uint32 insertedIndex = _insert(_commitment);\\n        commitments[_commitment] = true;\\n        _processDeposit();\\n\\n        emit Deposit(_commitment, insertedIndex, block.timestamp);\\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processDeposit() internal virtual;\\n\\n    /**\\n@dev Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\\n    `input` array consists of:\\n      - merkle root of all deposits in the contract\\n      - hash of unique deposit nullifier to prevent double spends\\n      - the recipient of funds\\n      - optional fee that goes to the transaction sender (usually a relay)\\n  */\\n    function withdraw(\\n        bytes calldata _proof,\\n        bytes32 _root,\\n        bytes32 _nullifierHash,\\n        address payable _recipient,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _refund\\n    ) external payable nonReentrant {\\n        require(_fee <= denomination, \\\"Fee exceeds transfer value\\\");\\n        require(\\n            !nullifierHashes[_nullifierHash],\\n            \\\"The note has been already spent\\\"\\n        );\\n        require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one\\n        require(\\n            verifier.verifyProof(\\n                _proof,\\n                [\\n                    uint256(_root),\\n                    uint256(_nullifierHash),\\n                    uint256(keccak256(abi.encodePacked(_recipient))),\\n                    uint256(keccak256(abi.encodePacked(_relayer))),\\n                    _fee,\\n                    _refund\\n                ]\\n            ),\\n            \\\"Invalid withdraw proof\\\"\\n        );\\n\\n        nullifierHashes[_nullifierHash] = true;\\n        _processWithdraw(_recipient, _relayer, _fee, _refund);\\n        emit Withdrawal(_recipient, _nullifierHash, _relayer, _fee);\\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processWithdraw(\\n        address payable _recipient,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _refund\\n    ) internal virtual;\\n\\n    /** @dev whether a note is already spent */\\n    function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n        return nullifierHashes[_nullifierHash];\\n    }\\n\\n    /** @dev whether an array of notes is already spent */\\n    function isSpentArray(\\n        bytes32[] calldata _nullifierHashes\\n    ) external view returns (bool[] memory spent) {\\n        spent = new bool[](_nullifierHashes.length);\\n        for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n            if (isSpent(_nullifierHashes[i])) {\\n                spent[i] = true;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fce1f6ff8b8a53ceabb0dbe63ff110a249f5b97ead1905fb22bd81ed24e5c29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600380546001600160401b03191690553480156200002157600080fd5b5060405162001d7738038062001d778339810160408190526200004491620003ac565b84848484808360008263ffffffff1611620000b65760405162461bcd60e51b815260206004820152602760248201527f5f747265654c6576656c732073686f756c642062652067726561746572207468604482015266616e207a65726f60c81b60648201526084015b60405180910390fd5b60208263ffffffff1610620001195760405162461bcd60e51b815260206004820152602260248201527f5f747265654c6576656c732073686f756c64206265206c657373207468616e20604482015261199960f11b6064820152608401620000ad565b63ffffffff8216608052600080546001600160a01b0319166001600160a01b0383161781556002805460018181019092557f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c60008051602062001d37833981519152909101819055815480830183559282905260008051602062001d578339815191529092018290555b8363ffffffff168163ffffffff1610156200021c57620001c4828062000305565b60028054600181810190925560008051602062001d37833981519152018290558054808201825560009190915260008051602062001d5783398151915201819055915080620002138162000428565b915050620001a3565b5060016200022b828062000305565b815460018181018455600093845260209093200155805463ffffffff85169081106200025b576200025b6200045a565b60009182526020909120015460045550506001600e555081620002cf5760405162461bcd60e51b815260206004820152602560248201527f64656e6f6d696e6174696f6e2073686f756c6420626520677265617465722074604482015264068616e20360dc1b6064820152608401620000ad565b506001600160a01b0392831660a052600f5550601280546001600160a01b0319169290911691909117905550620004bd92505050565b6000805460408051808201825285815260208101859052905163014cf2b360e51b81526001600160a01b039092169163299e566091620003489160040162000470565b602060405180830381865afa15801562000366573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038c9190620004a3565b9392505050565b6001600160a01b0381168114620003a957600080fd5b50565b600080600080600060a08688031215620003c557600080fd5b8551620003d28162000393565b6020870151909550620003e58162000393565b60408701516060880151919550935063ffffffff811681146200040757600080fd5b60808701519092506200041a8162000393565b809150509295509295909350565b600063ffffffff8083168181036200045057634e487b7160e01b600052601160045260246000fd5b6001019392505050565b634e487b7160e01b600052603260045260246000fd5b60408101818360005b60028110156200049a57815183526020928301929091019060010162000479565b50505092915050565b600060208284031215620004b657600080fd5b5051919050565b60805160a05161183f620004f8600039600081816101a601526105b601526000818161025401528181610ca50152610d78015261183f6000f3fe6080604052600436106101355760003560e01c8063b214faa5116100ab578063e82955881161006f578063e8295588146103c8578063ec732959146103e8578063ed33639f1461041c578063f178e47c1461043c578063fc0c546a1461045c578063fc7e9c6f1461047c57600080fd5b8063b214faa51461033b578063ba70f7571461034e578063c2b40ae414610363578063cd87a3b414610383578063e5285dcc1461039857600080fd5b80634ecf518b116100fd5780634ecf518b146102425780636d9833e31461028b578063839df945146102ab5780638bca6d16146102db57806390eeb02b146102f15780639fa12d0b1461030e57600080fd5b806317cc915c1461013a57806321a0adb61461017f5780632b7ac3f31461019457806338bf282e146101e0578063414a37ba1461020e575b600080fd5b34801561014657600080fd5b5061016a610155366004611271565b60106020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61019261018d3660046112a6565b6104a1565b005b3480156101a057600080fd5b506101c87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610176565b3480156101ec57600080fd5b506102006101fb36600461135c565b6107ba565b604051908152602001610176565b34801561021a57600080fd5b506102007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b34801561024e57600080fd5b506102767f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610176565b34801561029757600080fd5b5061016a6102a6366004611271565b610845565b3480156102b757600080fd5b5061016a6102c6366004611271565b60116020526000908152604090205460ff1681565b3480156102e757600080fd5b50610200600f5481565b3480156102fd57600080fd5b506003546102769063ffffffff1681565b34801561031a57600080fd5b5061032e61032936600461137e565b6108c7565b60405161017691906113f3565b610192610349366004611271565b61098d565b34801561035a57600080fd5b50610200610a7a565b34801561036f57600080fd5b5061020061037e366004611271565b610aa0565b34801561038f57600080fd5b50610276600a81565b3480156103a457600080fd5b5061016a6103b3366004611271565b60009081526010602052604090205460ff1690565b3480156103d457600080fd5b506102006103e3366004611271565b610ab7565b3480156103f457600080fd5b506102007f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561042857600080fd5b506000546101c8906001600160a01b031681565b34801561044857600080fd5b50610200610457366004611271565b610ad8565b34801561046857600080fd5b506012546101c8906001600160a01b031681565b34801561048857600080fd5b5060035461027690640100000000900463ffffffff1681565b6104a9610ae8565b600f548211156105005760405162461bcd60e51b815260206004820152601a60248201527f4665652065786365656473207472616e736665722076616c756500000000000060448201526064015b60405180910390fd5b60008581526010602052604090205460ff161561055f5760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016104f7565b61056886610845565b6105b45760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016104f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663695ef6f989896040518060c001604052808b60001c81526020018a60001c81526020018960405160200161062b919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f1981840301815291815281516020928301208352516bffffffffffffffffffffffff1960608c901b16818301529101906034016040516020818303038152906040528051906020012060001c8152602001878152602001868152506040518463ffffffff1660e01b81526004016106aa93929190611439565b6020604051808303816000875af11580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190611497565b6107325760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016104f7565b6000858152601060205260409020805460ff1916600117905561075784848484610b41565b604080516001600160a01b03868116825260208201889052918101849052908416907fe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c349319060600160405180910390a26107b06001600e55565b5050505050505050565b6000805460408051808201825285815260208101859052905163014cf2b360e51b81526001600160a01b039092169163299e5660916107fb916004016114c0565b602060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083c91906114f1565b90505b92915050565b600081810361085657506000919050565b60035463ffffffff165b60048163ffffffff16600a81106108795761087961150a565b0154830361088a5750600192915050565b8063ffffffff1660000361089c5750600a5b806108a681611536565b60035490925063ffffffff9081169083160390506108605750600092915050565b60608167ffffffffffffffff8111156108e2576108e2611556565b60405190808252806020026020018201604052801561090b578160200160208202803683370190505b50905060005b828110156109865761094a84848381811061092e5761092e61150a565b9050602002013560009081526010602052604090205460ff1690565b156109745760018282815181106109635761096361150a565b911515602092830291909101909101525b8061097e8161156c565b915050610911565b5092915050565b610995610ae8565b60008181526011602052604090205460ff16156109fe5760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016104f7565b6000610a0982610c8c565b6000838152601160205260409020805460ff191660011790559050610a2c610ee4565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a250610a776001600e55565b50565b60035460009060049063ffffffff16600a8110610a9957610a9961150a565b0154905090565b600481600a8110610ab057600080fd5b0154905081565b60028181548110610ac757600080fd5b600091825260209091200154905081565b60018181548110610ac757600080fd5b6002600e5403610b3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f7565b6002600e55565b803414610ba95760405162461bcd60e51b815260206004820152603060248201527f496e636f727265637420726566756e6420616d6f756e7420726563656976656460448201526f08189e481d1a194818dbdb9d1c9858dd60821b60648201526084016104f7565b610bce8483600f54610bbb9190611585565b6012546001600160a01b03169190610f6c565b8115610beb57601254610beb906001600160a01b03168484610f6c565b8015610c86576000846001600160a01b03168260405160006040518083038185875af1925050503d8060008114610c3e576040519150601f19603f3d011682016040523d82523d6000602084013e610c43565b606091505b5050905080610c84576040516001600160a01b0385169083156108fc029084906000818181858888f19350505050158015610c82573d6000803e3d6000fd5b505b505b50505050565b600354600090640100000000900463ffffffff16610ccb7f000000000000000000000000000000000000000000000000000000000000000060026116ad565b63ffffffff168163ffffffff1603610d3e5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016104f7565b610d498160016116c2565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905582600080805b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015610e6b57610db5600286611700565b63ffffffff16600003610e165783925060028163ffffffff1681548110610dde57610dde61150a565b906000526020600020015491508360018263ffffffff1681548110610e0557610e0561150a565b600091825260209091200155610e40565b60018163ffffffff1681548110610e2f57610e2f61150a565b906000526020600020015492508391505b610e4a83836107ba565b9350610e57600286611723565b945080610e6381611746565b915050610d76565b50600354600a90610e839063ffffffff1660016116c2565b610e8d9190611700565b6003805463ffffffff191663ffffffff9290921691821790558390600490600a8110610ebb57610ebb61150a565b0155600354610eda90600190640100000000900463ffffffff16611769565b9695505050505050565b3415610f4b5760405162461bcd60e51b815260206004820152603060248201527f4554482076616c756520697320737570706f73656420746f206265203020666f60448201526f7220455243323020696e7374616e636560801b60648201526084016104f7565b600f54601254610f6a916001600160a01b039091169033903090610fd4565b565b6040516001600160a01b038316602482015260448101829052610fcf90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261100c565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c869085906323b872dd60e01b90608401610f98565b6000611061826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110e19092919063ffffffff16565b90508051600014806110825750808060200190518101906110829190611497565b610fcf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104f7565b60606110f084846000856110f8565b949350505050565b6060824710156111595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104f7565b600080866001600160a01b0316858760405161117591906117ba565b60006040518083038185875af1925050503d80600081146111b2576040519150601f19603f3d011682016040523d82523d6000602084013e6111b7565b606091505b50915091506111c8878383876111d3565b979650505050505050565b6060831561124257825160000361123b576001600160a01b0385163b61123b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f7565b50816110f0565b6110f083838151156112575781518083602001fd5b8060405162461bcd60e51b81526004016104f791906117d6565b60006020828403121561128357600080fd5b5035919050565b80356001600160a01b03811681146112a157600080fd5b919050565b60008060008060008060008060e0898b0312156112c257600080fd5b883567ffffffffffffffff808211156112da57600080fd5b818b0191508b601f8301126112ee57600080fd5b8135818111156112fd57600080fd5b8c602082850101111561130f57600080fd5b60209283019a5098505089013595506040890135945061133160608a0161128a565b935061133f60808a0161128a565b925060a0890135915060c089013590509295985092959890939650565b6000806040838503121561136f57600080fd5b50508035926020909101359150565b6000806020838503121561139157600080fd5b823567ffffffffffffffff808211156113a957600080fd5b818501915085601f8301126113bd57600080fd5b8135818111156113cc57600080fd5b8660208260051b85010111156113e157600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101561142d57835115158352928401929184019160010161140f565b50909695505050505050565b60e081528260e08201526000610100848682850137600081868501015280601f19601f87011684010191505060208083018460005b600681101561148b5781518352918301919083019060010161146e565b50505050949350505050565b6000602082840312156114a957600080fd5b815180151581146114b957600080fd5b9392505050565b60408101818360005b60028110156114e85781518352602092830192909101906001016114c9565b50505092915050565b60006020828403121561150357600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff82168061154c5761154c611520565b6000190192915050565b634e487b7160e01b600052604160045260246000fd5b60006001820161157e5761157e611520565b5060010190565b60008282101561159757611597611520565b500390565b600181815b808511156115d9578163ffffffff048211156115bf576115bf611520565b808516156115cc57918102915b93841c93908002906115a1565b509250929050565b6000826115f05750600161083f565b816115fd5750600061083f565b8160018114611613576002811461161d5761164e565b600191505061083f565b60ff84111561162e5761162e611520565b6001841b915063ffffffff82111561164857611648611520565b5061083f565b5060208310610133831016604e8410600b8410161715611685575081810a63ffffffff81111561168057611680611520565b61083f565b61168f838361159c565b8063ffffffff048211156116a5576116a5611520565b029392505050565b600063ffffffff6110f08185168285166115e1565b600063ffffffff8083168185168083038211156116e1576116e1611520565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff80841680611717576117176116ea565b92169190910692915050565b600063ffffffff8084168061173a5761173a6116ea565b92169190910492915050565b600063ffffffff80831681810361175f5761175f611520565b6001019392505050565b600063ffffffff8381169083168181101561178657611786611520565b039392505050565b60005b838110156117a9578181015183820152602001611791565b83811115610c865750506000910152565b600082516117cc81846020870161178e565b9190910192915050565b60208152600082518060208401526117f581604085016020870161178e565b601f01601f1916919091016040019291505056fea2646970667358221220f9393c00319e46ce19f1cfd802cb300624a433f96dd7189fff49e33f101af22e64736f6c634300080e0033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5aceb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c8063b214faa5116100ab578063e82955881161006f578063e8295588146103c8578063ec732959146103e8578063ed33639f1461041c578063f178e47c1461043c578063fc0c546a1461045c578063fc7e9c6f1461047c57600080fd5b8063b214faa51461033b578063ba70f7571461034e578063c2b40ae414610363578063cd87a3b414610383578063e5285dcc1461039857600080fd5b80634ecf518b116100fd5780634ecf518b146102425780636d9833e31461028b578063839df945146102ab5780638bca6d16146102db57806390eeb02b146102f15780639fa12d0b1461030e57600080fd5b806317cc915c1461013a57806321a0adb61461017f5780632b7ac3f31461019457806338bf282e146101e0578063414a37ba1461020e575b600080fd5b34801561014657600080fd5b5061016a610155366004611271565b60106020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61019261018d3660046112a6565b6104a1565b005b3480156101a057600080fd5b506101c87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610176565b3480156101ec57600080fd5b506102006101fb36600461135c565b6107ba565b604051908152602001610176565b34801561021a57600080fd5b506102007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b34801561024e57600080fd5b506102767f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610176565b34801561029757600080fd5b5061016a6102a6366004611271565b610845565b3480156102b757600080fd5b5061016a6102c6366004611271565b60116020526000908152604090205460ff1681565b3480156102e757600080fd5b50610200600f5481565b3480156102fd57600080fd5b506003546102769063ffffffff1681565b34801561031a57600080fd5b5061032e61032936600461137e565b6108c7565b60405161017691906113f3565b610192610349366004611271565b61098d565b34801561035a57600080fd5b50610200610a7a565b34801561036f57600080fd5b5061020061037e366004611271565b610aa0565b34801561038f57600080fd5b50610276600a81565b3480156103a457600080fd5b5061016a6103b3366004611271565b60009081526010602052604090205460ff1690565b3480156103d457600080fd5b506102006103e3366004611271565b610ab7565b3480156103f457600080fd5b506102007f2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c81565b34801561042857600080fd5b506000546101c8906001600160a01b031681565b34801561044857600080fd5b50610200610457366004611271565b610ad8565b34801561046857600080fd5b506012546101c8906001600160a01b031681565b34801561048857600080fd5b5060035461027690640100000000900463ffffffff1681565b6104a9610ae8565b600f548211156105005760405162461bcd60e51b815260206004820152601a60248201527f4665652065786365656473207472616e736665722076616c756500000000000060448201526064015b60405180910390fd5b60008581526010602052604090205460ff161561055f5760405162461bcd60e51b815260206004820152601f60248201527f546865206e6f746520686173206265656e20616c7265616479207370656e740060448201526064016104f7565b61056886610845565b6105b45760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f740000000060448201526064016104f7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663695ef6f989896040518060c001604052808b60001c81526020018a60001c81526020018960405160200161062b919060609190911b6bffffffffffffffffffffffff1916815260140190565b60408051601f1981840301815291815281516020928301208352516bffffffffffffffffffffffff1960608c901b16818301529101906034016040516020818303038152906040528051906020012060001c8152602001878152602001868152506040518463ffffffff1660e01b81526004016106aa93929190611439565b6020604051808303816000875af11580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190611497565b6107325760405162461bcd60e51b815260206004820152601660248201527524b73b30b634b2103bb4ba34323930bb90383937b7b360511b60448201526064016104f7565b6000858152601060205260409020805460ff1916600117905561075784848484610b41565b604080516001600160a01b03868116825260208201889052918101849052908416907fe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c349319060600160405180910390a26107b06001600e55565b5050505050505050565b6000805460408051808201825285815260208101859052905163014cf2b360e51b81526001600160a01b039092169163299e5660916107fb916004016114c0565b602060405180830381865afa158015610818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083c91906114f1565b90505b92915050565b600081810361085657506000919050565b60035463ffffffff165b60048163ffffffff16600a81106108795761087961150a565b0154830361088a5750600192915050565b8063ffffffff1660000361089c5750600a5b806108a681611536565b60035490925063ffffffff9081169083160390506108605750600092915050565b60608167ffffffffffffffff8111156108e2576108e2611556565b60405190808252806020026020018201604052801561090b578160200160208202803683370190505b50905060005b828110156109865761094a84848381811061092e5761092e61150a565b9050602002013560009081526010602052604090205460ff1690565b156109745760018282815181106109635761096361150a565b911515602092830291909101909101525b8061097e8161156c565b915050610911565b5092915050565b610995610ae8565b60008181526011602052604090205460ff16156109fe5760405162461bcd60e51b815260206004820152602160248201527f54686520636f6d6d69746d656e7420686173206265656e207375626d697474656044820152601960fa1b60648201526084016104f7565b6000610a0982610c8c565b6000838152601160205260409020805460ff191660011790559050610a2c610ee4565b6040805163ffffffff8316815242602082015283917fa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196910160405180910390a250610a776001600e55565b50565b60035460009060049063ffffffff16600a8110610a9957610a9961150a565b0154905090565b600481600a8110610ab057600080fd5b0154905081565b60028181548110610ac757600080fd5b600091825260209091200154905081565b60018181548110610ac757600080fd5b6002600e5403610b3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104f7565b6002600e55565b803414610ba95760405162461bcd60e51b815260206004820152603060248201527f496e636f727265637420726566756e6420616d6f756e7420726563656976656460448201526f08189e481d1a194818dbdb9d1c9858dd60821b60648201526084016104f7565b610bce8483600f54610bbb9190611585565b6012546001600160a01b03169190610f6c565b8115610beb57601254610beb906001600160a01b03168484610f6c565b8015610c86576000846001600160a01b03168260405160006040518083038185875af1925050503d8060008114610c3e576040519150601f19603f3d011682016040523d82523d6000602084013e610c43565b606091505b5050905080610c84576040516001600160a01b0385169083156108fc029084906000818181858888f19350505050158015610c82573d6000803e3d6000fd5b505b505b50505050565b600354600090640100000000900463ffffffff16610ccb7f000000000000000000000000000000000000000000000000000000000000000060026116ad565b63ffffffff168163ffffffff1603610d3e5760405162461bcd60e51b815260206004820152603060248201527f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160448201526f1d995cc818d85b88189948185919195960821b60648201526084016104f7565b610d498160016116c2565b6003805463ffffffff929092166401000000000267ffffffff000000001990921691909117905582600080805b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168163ffffffff161015610e6b57610db5600286611700565b63ffffffff16600003610e165783925060028163ffffffff1681548110610dde57610dde61150a565b906000526020600020015491508360018263ffffffff1681548110610e0557610e0561150a565b600091825260209091200155610e40565b60018163ffffffff1681548110610e2f57610e2f61150a565b906000526020600020015492508391505b610e4a83836107ba565b9350610e57600286611723565b945080610e6381611746565b915050610d76565b50600354600a90610e839063ffffffff1660016116c2565b610e8d9190611700565b6003805463ffffffff191663ffffffff9290921691821790558390600490600a8110610ebb57610ebb61150a565b0155600354610eda90600190640100000000900463ffffffff16611769565b9695505050505050565b3415610f4b5760405162461bcd60e51b815260206004820152603060248201527f4554482076616c756520697320737570706f73656420746f206265203020666f60448201526f7220455243323020696e7374616e636560801b60648201526084016104f7565b600f54601254610f6a916001600160a01b039091169033903090610fd4565b565b6040516001600160a01b038316602482015260448101829052610fcf90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261100c565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c869085906323b872dd60e01b90608401610f98565b6000611061826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110e19092919063ffffffff16565b90508051600014806110825750808060200190518101906110829190611497565b610fcf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104f7565b60606110f084846000856110f8565b949350505050565b6060824710156111595760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104f7565b600080866001600160a01b0316858760405161117591906117ba565b60006040518083038185875af1925050503d80600081146111b2576040519150601f19603f3d011682016040523d82523d6000602084013e6111b7565b606091505b50915091506111c8878383876111d3565b979650505050505050565b6060831561124257825160000361123b576001600160a01b0385163b61123b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f7565b50816110f0565b6110f083838151156112575781518083602001fd5b8060405162461bcd60e51b81526004016104f791906117d6565b60006020828403121561128357600080fd5b5035919050565b80356001600160a01b03811681146112a157600080fd5b919050565b60008060008060008060008060e0898b0312156112c257600080fd5b883567ffffffffffffffff808211156112da57600080fd5b818b0191508b601f8301126112ee57600080fd5b8135818111156112fd57600080fd5b8c602082850101111561130f57600080fd5b60209283019a5098505089013595506040890135945061133160608a0161128a565b935061133f60808a0161128a565b925060a0890135915060c089013590509295985092959890939650565b6000806040838503121561136f57600080fd5b50508035926020909101359150565b6000806020838503121561139157600080fd5b823567ffffffffffffffff808211156113a957600080fd5b818501915085601f8301126113bd57600080fd5b8135818111156113cc57600080fd5b8660208260051b85010111156113e157600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b8181101561142d57835115158352928401929184019160010161140f565b50909695505050505050565b60e081528260e08201526000610100848682850137600081868501015280601f19601f87011684010191505060208083018460005b600681101561148b5781518352918301919083019060010161146e565b50505050949350505050565b6000602082840312156114a957600080fd5b815180151581146114b957600080fd5b9392505050565b60408101818360005b60028110156114e85781518352602092830192909101906001016114c9565b50505092915050565b60006020828403121561150357600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff82168061154c5761154c611520565b6000190192915050565b634e487b7160e01b600052604160045260246000fd5b60006001820161157e5761157e611520565b5060010190565b60008282101561159757611597611520565b500390565b600181815b808511156115d9578163ffffffff048211156115bf576115bf611520565b808516156115cc57918102915b93841c93908002906115a1565b509250929050565b6000826115f05750600161083f565b816115fd5750600061083f565b8160018114611613576002811461161d5761164e565b600191505061083f565b60ff84111561162e5761162e611520565b6001841b915063ffffffff82111561164857611648611520565b5061083f565b5060208310610133831016604e8410600b8410161715611685575081810a63ffffffff81111561168057611680611520565b61083f565b61168f838361159c565b8063ffffffff048211156116a5576116a5611520565b029392505050565b600063ffffffff6110f08185168285166115e1565b600063ffffffff8083168185168083038211156116e1576116e1611520565b01949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff80841680611717576117176116ea565b92169190910692915050565b600063ffffffff8084168061173a5761173a6116ea565b92169190910492915050565b600063ffffffff80831681810361175f5761175f611520565b6001019392505050565b600063ffffffff8381169083168181101561178657611786611520565b039392505050565b60005b838110156117a9578181015183820152602001611791565b83811115610c865750506000910152565b600082516117cc81846020870161178e565b9190910192915050565b60208152600082518060208401526117f581604085016020870161178e565b601f01601f1916919091016040019291505056fea2646970667358221220f9393c00319e46ce19f1cfd802cb300624a433f96dd7189fff49e33f101af22e64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(bytes32)": {
        "details": "Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.",
        "params": {
          "_commitment": "the note commitment, which is PedersenHash(nullifier + secret)"
        }
      },
      "getLastRoot()": {
        "details": "Returns the last root"
      },
      "hashLeftRight(bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns poseidon(_left, _right)"
      },
      "isKnownRoot(bytes32)": {
        "details": "Whether the root is present in the root history"
      },
      "isSpent(bytes32)": {
        "details": "whether a note is already spent "
      },
      "isSpentArray(bytes32[])": {
        "details": "whether an array of notes is already spent "
      },
      "withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)": {
        "details": "Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs `input` array consists of: - merkle root of all deposits in the contract - hash of unique deposit nullifier to prevent double spends - the recipient of funds - optional fee that goes to the transaction sender (usually a relay)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24193,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "hasher",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IHasher)6522"
      },
      {
        "astId": 24196,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 24199,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "zeros",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 24202,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 24205,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "nextIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 24212,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "roots",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)10_storage"
      },
      {
        "astId": 1919,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "_status",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 25868,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "denomination",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 25872,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 25876,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "commitments",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 23936,
        "contract": "contracts/tornado-core/ERC20Tornado.sol:ERC20Tornado",
        "label": "token",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IERC20)2638"
      }
    ],
    "types": {
      "t_array(t_bytes32)10_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2638": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHasher)6522": {
        "encoding": "inplace",
        "label": "contract IHasher",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}