{
  "address": "0x5Ff7758B2d501f74018C0dbbF5Be47d6E1ADe18B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[12]",
          "name": "input",
          "type": "uint256[12]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ae01239215a4a9a3dc96acd09a5ab7697a5cbfc022dd3c8e27ba4b41d687c5d",
  "receipt": {
    "to": null,
    "from": "0x777BEeF85E717Ab18e44cd054B1a1E33a4A93b83",
    "contractAddress": "0x5Ff7758B2d501f74018C0dbbF5Be47d6E1ADe18B",
    "transactionIndex": 47,
    "gasUsed": "913567",
    "logsBloom": "0x
    "blockHash": "0xe622c61210c305fef647390f02b2d470c4c5564ad38d6d940b0fb1dc88a43683",
    "transactionHash": "0x0ae01239215a4a9a3dc96acd09a5ab7697a5cbfc022dd3c8e27ba4b41d687c5d",
    "logs": [],
    "blockNumber": 9604948,
    "cumulativeGasUsed": "15052863",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a07ecff1223e8b81cd788aa57e9ab846",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[12]\",\"name\":\"input\",\"type\":\"uint256[12]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/RewardVerifier.sol\":\"RewardVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/RewardVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input = [\\n            p1.X, p1.Y,\\n            p2.X, p2.Y\\n        ];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n     *         points p.\\n     */\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input = [p.X, p.Y, s];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        uint256[24] memory input = [\\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract RewardVerifier {\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[13] IC;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(uint256(21767931899953041681759601379837797584457457282453337227656829866095582529264), uint256(9466436435023955222455576225738606765539482440554283094915986072822730787233));\\n        vk.beta2 = Pairing.G2Point([uint256(1330265914530177073028840669185761750979879464345604278879476550491244348457), uint256(441002670633819971226826329498090721132349810583954426643170308780448495692)], [uint256(12690372317138182900040347965530152427328493310439662224906485992425479650602), uint256(973122018465981542820364311153317269202723761184347164196351293494173610515)]);\\n        vk.gamma2 = Pairing.G2Point([uint256(5110542380301897940114447967721561579168740270522740378562958349240441190484), uint256(20759283826259115606086648410926369638332522864824607975730937745472716916266)], [uint256(4687844688719783951452431839314668347514786516327220255264045605779386427230), uint256(8119277948275866708666453571685907253040085557721531228516006929085317281148)]);\\n        vk.delta2 = Pairing.G2Point([uint256(6207442708719601143350946501402672591480207534616860232079032684839678667377), uint256(11431947886789837829473969517525605396322738191990832604142968073317601137430)], [uint256(17063582622500709416080133663482805990029860333107667717017061026552010708908), uint256(19391815225082231888829952390468033327170707219869957775786290578399374111435)]);\\n        vk.IC[0] = Pairing.G1Point(uint256(2865147057917990777320753618226745276517613100159470009305094177002749190110), uint256(12179625807639549964880867976515865378121490432973570189450976296301335140804));\\n        vk.IC[1] = Pairing.G1Point(uint256(19206308104257391081460687173068265154292961337207670407458040953709818095189), uint256(8816518260891228337829150663512801399293017878594185742466238481419986146751));\\n        vk.IC[2] = Pairing.G1Point(uint256(8345183369914217739750364832598373337990557879944980415857678379305515568370), uint256(2851927953597632076205162377780959158366417050294577014871075053100190134929));\\n        vk.IC[3] = Pairing.G1Point(uint256(19100670749990169196303811175343092080409738060244012272021009840826077538637), uint256(2906071904744376183052195983576044395170944988035714905469984643662877459071));\\n        vk.IC[4] = Pairing.G1Point(uint256(4406552687686839725412430304010875269858973180872393791514479224040301828756), uint256(21759398509985869905338211312312399636225962289356902642126755092183603318385));\\n        vk.IC[5] = Pairing.G1Point(uint256(19768624138315902378809085444496505744282639543002092384883248072373052493769), uint256(12029401483131543710544860726662531712516700628500386514388446862668650504361));\\n        vk.IC[6] = Pairing.G1Point(uint256(17182470511009684268337899492133222500795904425887652074809473187027335339567), uint256(7173468811871551206444905229640387793131713664401116776855971150956693450180));\\n        vk.IC[7] = Pairing.G1Point(uint256(1056586803112479137469985189000689354177977967136901345739108248087390630653), uint256(5574351679981638167587639183832962518591477454193086834952724322023893744399));\\n        vk.IC[8] = Pairing.G1Point(uint256(364027875581336045105959044071120791570503246327955970535634438689701435867), uint256(17648151551420595666236809248417454310445762878473518974022930710078528127213));\\n        vk.IC[9] = Pairing.G1Point(uint256(19182071465208031981148947368635865581981172597968448460532872516545979609829), uint256(2297873816430136843860747740444820324671714852818729916310566774715898993041));\\n        vk.IC[10] = Pairing.G1Point(uint256(10992425124276072728773297311096842923469347549039305037438137693623273063299), uint256(16172652711330632259955821904444647608970869947990342070069161878895350934476));\\n        vk.IC[11] = Pairing.G1Point(uint256(15130180832261033122548013692142625477465988280712897766817927156277848920011), uint256(6333999738665181509705542841567875509829348430911518854491084659374296861454));\\n        vk.IC[12] = Pairing.G1Point(uint256(19825433435326586685041966504926970246441663221872651107151085674281128129952), uint256(3524583184174380994840140720222698995878660855557870779871199620060280243883));\\n\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        bytes memory proof,\\n        uint256[12] memory input\\n    ) public view returns (bool) {\\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n        for (uint8 i = 0; i < p.length; i++) {\\n            // Make sure that each element in the proof is less than the prime q\\n            require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n        }\\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\\n\\n        VerifyingKey memory vk = verifyingKey();\\n        // Compute the linear combination vkX\\n        Pairing.G1Point memory vkX = vk.IC[0];\\n        for (uint256 i = 0; i < input.length; i++) {\\n            // Make sure that every input is less than the snark scalar field\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-input-gte-snark-scalar-field\\\");\\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\\n        }\\n\\n        return Pairing.pairing(\\n            Pairing.negate(proofA),\\n            proofB,\\n            vk.alfa1,\\n            vk.beta2,\\n            vkX,\\n            vk.gamma2,\\n            proofC,\\n            vk.delta2\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0xe86afbb4f78b8bb744bd9f252b286bd9118dc5da01f44c8426516878afc21f3d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806372774f7214610030575b600080fd5b61010460048036036101a081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051610180818101909252939695948181019493509150600c9083908390808284376000920191909152509194506101189350505050565b604080519115158252519081900360200190f35b6000610122610da5565b8380602001905161010081101561013857600080fd5b50905060005b60088160ff1610156101c3577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017a57fe5b6020020151106101bb5760405162461bcd60e51b8152600401808060200182810382526022815260200180610f356022913960400191505060405180910390fd5b60010161013e565b506101cc610dc4565b506040805180820190915281518152602080830151908201526101ed610dde565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610238610dc4565b506040805180820190915260c0840151815260e0840151602082015261025c610e03565b610264610369565b905061026e610dc4565b5060808101515160005b600c811015610333577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600c81106102ae57fe5b6020020151106102ef5760405162461bcd60e51b8152600401808060200182810382526025815260200180610f106025913960400191505060405180910390fd5b61032982610324856080015184600101600d811061030957fe5b60200201518c85600c811061031a57fe5b6020020151610a37565b610adc565b9150600101610278565b5061035c61034086610b80565b8584600001518560200151858760400151898960600151610c27565b9998505050505050505050565b610371610e03565b6040805180820182527f3020367ce91704ccf1090790ccdd0e5d55c91909f05ebc8631b50eae7f7646f081527f14edd02a7fb2e771ba945dca0719b0635ef9072070cd945ceb49cbea15b509a16020808301919091529083528151608080820184527f02f0e7611f4be190fcc1db7c8edc47ed294910f8212722a280e04fb7a24444298285019081527ef999422f107eacb5948809ae04426bdd73b8621f1736745865c63fb12f384c606080850191909152908352845180860186527f1c0e7f06884ce4ffb446975abac2799281f393f09eed6931bb3a33561e26bd2a81527f0226c47dc33bf7852be89dd4010c00409e38bdcfb140ef3e5775e7775e2fb213818601528385015285840192909252835180820185527f0b4c76e84dbbb3982591369dc11c4e37c8fa23a682867e85bf87a52ca50b38548186019081527f2de5569885b2f9876f4aaa693fddc64ffe7c6250bf05bc324e0edfa7b48dc62a828501528152845180860186527f0a5d39df8756c65e35e46796dbe3a094573dfea232cd9bfa327f50140c88675e81527f11f359350c81d252378edb05f9c74eb10369ddf939604e34c50c04bcac04757c818601528185015285850152835180820185527f0db949bec091d6aefdd2ca7b8ee75221295405bd1e8d6d6034578f8147726a718186019081527f194640d229022b712969091fa7985674ad1d3ed69753b76df879589bef1e5316828501528152845180860186527f25b9a54029533c218391e272562afd3ad1a0df9130312cebc5ed3826b93b17ac81527f2adf60e30f064e596bb108ea6cd1c6501740ed6db55fc7015e75b655ce8072cb818601528185015282860152835180850185527f06559da2e6064fce0e7e30d76e5b0a66b69bdbf853e64a0b31ec6f581aa45fde81527f1aed6c8596721ca66e6dbce87f7552d0675f2f5ef18144e036938bc81883d9c481850152818601805191909152845180860186527f2a76629985e958a38e7b542336958775e3f13fb06e9a9e0b8b4f96803d39265581527f137df8f59c0561b77f44319063163b65d06ced8ee5747f66820c6d0da49615bf818601528151850152845180860186527f127334d6d7cefa76773ca8311c0811336f2c12bc60adb69eee22b6492f5f4cf281527f064e224f1169949012c32450cef412e4176aefa825625812e02916eb231bf291818601528151860152845180860186527f2a3a98b647fbf978fa103de0ca88dec94afab6121a0b09e4d16c18a2cfd9e94d81527f066cc745d58ca826186fc8d1999de07958256c0d8be57548231d77f93bfa827f81860152815190930192909252835180850185527f09be053b5330b7f8810537b17072c999e5c1deff6699347551b090ec222c9a9481527f301b6213e28e3f1afdedc987e28ca0d86f97a89afa4afc0efc027909f6d18e7181850152825190910152825180840184527f2bb4a50e71d750d451c717f8df41152abac5e430b64c223ec163124e044dcfc981527f1a986663b404db5d31d9defbdd4e0e4c58060d5fcc5b201172c8464c571be0a981840152815160a00152825180840184527f25fcef0508cffc6378c71fc626b0bc582ea240fe23608330199e28289de95e2f81527f0fdc0a1a6338ab87a23ed75a86cb82974e7944293f34dc73664c8fa994fa6dc481840152815160c00152825180840184527f025601c6b03af5fa80457de60f6845a833e2fc84ee914b71a5efe819bcd4b2fd81527f0c52f8a35ff4a19ca0ec57eefb86ccaa124b4e49c03a24dfe84df37f484dbb0f81840152815160e00152825180840184527ece085059ed76e7b49393a333245ca4efcc56a437c927883a68b2f44aa719db81527f27047ff2d3f33db94d4f7f2b09a4a54984b127bffb1946b3f3e92a7ff8e380ed8184015281516101000152825180840184527f2a68aaee9de387e0826ff55eaaec407de83929183aa719a9c9eb5b072313f2e581527f05148cecef1eb704305ab7a9c6506679bcd86a8df33e7c48027adde4f96d19918184015281516101200152825180840184527f184d7dfcd1c169fd489bd20b1c70c87f5662734d83c68ab4187262b5ea3f038381527f23c165a51915fe21b4d8a5952284a48dc8c319b9953f02c4d8b490a169ba6bcc8184015281516101400152825180840184527f217360fe0a54bd551cd3660720df979e837b6322221313dbebefba86aa594fcb81527f0e00eab3e41ebe58dac1daee7973b6f6fc05e9eb1ef8de44a66603d8306b0b0e818401528151610160015282518084019093527f2bd4cc346231eccd4704c732d244f2488339ef7b3e818e9b77faa967b8e375a083527f07cad7e840e4c450769e7eb5b57419c30e468437e354eb56b7887f57c327c6ab9183019190915251610180015290565b610a3f610dc4565b610a47610e4a565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa9050808015610a8a57610a8c565bfe5b5080610ad4576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610ae4610dc4565b610aec610e68565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa9050808015610a8a575080610ad4576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b610b88610dc4565b8151158015610b9957506020820151155b15610bb857506040805180820190915260008082526020820152610c22565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015181610bfa57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610c31610e86565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610d2e610ea5565b60006020826103008560086107d05a03fa9050808015610a8a575080610d93576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610df1610ec3565b8152602001610dfe610ec3565b905290565b6040518060a00160405280610e16610dc4565b8152602001610e23610dde565b8152602001610e30610dde565b8152602001610e3d610dde565b8152602001610dfe610ee1565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b604051806101a00160405280600d905b610ef9610dc4565b815260200190600190039081610ef1579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a2646970667358221220fc47781977812a2ef17413893a0e237552aaba8d4bbfce12a7594798aecb30c464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}