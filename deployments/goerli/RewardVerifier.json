{
  "address": "0xFfB2B74B491901F4dada1B48608cFDb25b724DA1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[12]",
          "name": "input",
          "type": "uint256[12]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3ce8dde326e125c9a4579cab5b397c6f0deef64176b6a94378c99b2181c99b0",
  "receipt": {
    "to": null,
    "from": "0xE356854c04927202C0188830424283ef1e34BAb0",
    "contractAddress": "0xFfB2B74B491901F4dada1B48608cFDb25b724DA1",
    "transactionIndex": 27,
    "gasUsed": "913951",
    "logsBloom": "0x
    "blockHash": "0xe4d031d9810bfddb536ca217a0dbf9fe3896a09b12a0e9639a100cc40dab9d00",
    "transactionHash": "0xe3ce8dde326e125c9a4579cab5b397c6f0deef64176b6a94378c99b2181c99b0",
    "logs": [],
    "blockNumber": 9173649,
    "cumulativeGasUsed": "3744495",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8b8a88da93027fb8f772f3eea5474da1",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[12]\",\"name\":\"input\",\"type\":\"uint256[12]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/RewardVerifier.sol\":\"RewardVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/verifiers/RewardVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return r the sum of two points of G1\\n     */\\n    function plus(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint256[4] memory input = [\\n            p1.X, p1.Y,\\n            p2.X, p2.Y\\n        ];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return r the product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n     *         points p.\\n     */\\n    function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input = [p.X, p.Y, s];\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        uint256[24] memory input = [\\n            a1.X, a1.Y, a2.X[0], a2.X[1], a2.Y[0], a2.Y[1],\\n            b1.X, b1.Y, b2.X[0], b2.X[1], b2.Y[0], b2.Y[1],\\n            c1.X, c1.Y, c2.X[0], c2.X[1], c2.Y[0], c2.Y[1],\\n            d1.X, d1.Y, d2.X[0], d2.X[1], d2.Y[0], d2.Y[1]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, mul(24, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success case 0 { invalid() }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract RewardVerifier {\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n    using Pairing for *;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[13] IC;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(uint256(9016853131130524280600013457650441868326993889332624615373261560582301639331), uint256(21652679118988487859361010119355132007789267145592297860793646240578634923266));\\n        vk.beta2 = Pairing.G2Point([uint256(9211269180003816010421781698176309051268872761644056799477765384924782432313), uint256(7238949485834373537967993990165534438143225748106218192824608548749352256390)], [uint256(10710125212563030161053433689997261717013313394527547145514002508245740489685), uint256(21322466284482026391348765702688839389074076321253937105456216774509302001157)]);\\n        vk.gamma2 = Pairing.G2Point([uint256(8628480591786769823793131146381134187265468213191978844421339217910338365963), uint256(14373611499443317122240573976123034363617018758484101063959573068909222860196)], [uint256(14997297531551520970562729946570369575310546129989689810819262321579534319850), uint256(21671752469522982606961419901301608162755539312343972549282780615557179097910)]);\\n        vk.delta2 = Pairing.G2Point([uint256(13574760911025976629984980423465520354729066273397640321078839082180448991233), uint256(10873608073353648307187206891179240466103246508505903616588670140655037993566)], [uint256(7733146097897412866626629522663024875140387666505583760768820451202976753473), uint256(7980417134450464821114388697695336238514767320802737397082537168699252750045)]);\\n        vk.IC[0] = Pairing.G1Point(uint256(19663282859429747737472349683220765048133081417274726529163710169011378560496), uint256(3287785119258962747661413311549989086309777312733183418121400647592955102766));\\n        vk.IC[1] = Pairing.G1Point(uint256(16022170558682867007338609466472610604956024507746043756008727949450688448736), uint256(8199168629671949800051747213661206008888949086310742605937254059127142064228));\\n        vk.IC[2] = Pairing.G1Point(uint256(4343812558978130991650538678156261630313190259567792744332715927967946964542), uint256(5305486263461447709786775669796467512316676298533309600256490591538020441253));\\n        vk.IC[3] = Pairing.G1Point(uint256(19652677556104832322950539251243952316710685327010576989079943249483818888967), uint256(6864429151102354784027401849859164706805774530849016672821614748595343711567));\\n        vk.IC[4] = Pairing.G1Point(uint256(18969066534111601423769045389232751297061065944095450700523423197897057972174), uint256(17601604307262544607025703497199373548561891905502773594860004786574887990592));\\n        vk.IC[5] = Pairing.G1Point(uint256(6666366747309751556666122262858909279952419706958962953798293216584065859141), uint256(9996671397288617450596037586817855018252853068587235229795711788578698860052));\\n        vk.IC[6] = Pairing.G1Point(uint256(19880127648972196326603200382945253829281439223321587200057798575051275228918), uint256(2732698149515388430389534858148620835435292957829362146949228848616070264042));\\n        vk.IC[7] = Pairing.G1Point(uint256(19631732139022619174389576441402699528119155425246887085232531740065007436557), uint256(17316914061514843900123469213788875804972782676302810916394403716682833893386));\\n        vk.IC[8] = Pairing.G1Point(uint256(20762622233247511923695936235097668624236267066286198324889650888129013889247), uint256(18808079956460127806449929826355374365201492306347097052012324812670410791938));\\n        vk.IC[9] = Pairing.G1Point(uint256(6076683886643845371094500326016184106500086888084108657525314933663507672309), uint256(6752616616170354357064571790863753737747382057410087755033556515433242724330));\\n        vk.IC[10] = Pairing.G1Point(uint256(9032662365021851977462887613989195468122326720464514116812417560381385624210), uint256(16232611910528943000119678040135575572131902668301172239232125212158355014651));\\n        vk.IC[11] = Pairing.G1Point(uint256(18068229708999959426710558289916249304460200610443231963830617361283253436734), uint256(9067387427579569310615300681137878866376956153770242076971439003207939563883));\\n        vk.IC[12] = Pairing.G1Point(uint256(14134267451967483563327412728182246766086937141699262838161313807164220661151), uint256(18685441237563498472729990368213511084727533846916701322375499917172962985087));\\n\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        bytes memory proof,\\n        uint256[12] memory input\\n    ) public view returns (bool) {\\n        uint256[8] memory p = abi.decode(proof, (uint256[8]));\\n        for (uint8 i = 0; i < p.length; i++) {\\n            // Make sure that each element in the proof is less than the prime q\\n            require(p[i] < PRIME_Q, \\\"verifier-proof-element-gte-prime-q\\\");\\n        }\\n        Pairing.G1Point memory proofA = Pairing.G1Point(p[0], p[1]);\\n        Pairing.G2Point memory proofB = Pairing.G2Point([p[2], p[3]], [p[4], p[5]]);\\n        Pairing.G1Point memory proofC = Pairing.G1Point(p[6], p[7]);\\n\\n        VerifyingKey memory vk = verifyingKey();\\n        // Compute the linear combination vkX\\n        Pairing.G1Point memory vkX = vk.IC[0];\\n        for (uint256 i = 0; i < input.length; i++) {\\n            // Make sure that every input is less than the snark scalar field\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-input-gte-snark-scalar-field\\\");\\n            vkX = Pairing.plus(vkX, Pairing.scalarMul(vk.IC[i + 1], input[i]));\\n        }\\n\\n        return Pairing.pairing(\\n            Pairing.negate(proofA),\\n            proofB,\\n            vk.alfa1,\\n            vk.beta2,\\n            vkX,\\n            vk.gamma2,\\n            proofC,\\n            vk.delta2\\n        );\\n    }\\n}\\n\\n\",\"keccak256\":\"0x7f39f7b36098d6e82341c426866c4e87581cb2ba9735b032b78f3afecdc3487d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806372774f7214610030575b600080fd5b61010460048036036101a081101561004757600080fd5b81019060208101813564010000000081111561006257600080fd5b82018360208201111561007457600080fd5b8035906020019184600183028401116401000000008311171561009657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051610180818101909252939695948181019493509150600c9083908390808284376000920191909152509194506101189350505050565b604080519115158252519081900360200190f35b6000610122610da7565b8380602001905161010081101561013857600080fd5b50905060005b60088160ff1610156101c3577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828260ff166008811061017a57fe5b6020020151106101bb5760405162461bcd60e51b8152600401808060200182810382526022815260200180610f376022913960400191505060405180910390fd5b60010161013e565b506101cc610dc6565b506040805180820190915281518152602080830151908201526101ed610de0565b506040805160808082018352848301518284019081526060808701519084015282528251808401909352840151825260a0840151602080840191909152810191909152610238610dc6565b506040805180820190915260c0840151815260e0840151602082015261025c610e05565b610264610369565b905061026e610dc6565b5060808101515160005b600c811015610333577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018982600c81106102ae57fe5b6020020151106102ef5760405162461bcd60e51b8152600401808060200182810382526025815260200180610f126025913960400191505060405180910390fd5b61032982610324856080015184600101600d811061030957fe5b60200201518c85600c811061031a57fe5b6020020151610a39565b610ade565b9150600101610278565b5061035c61034086610b82565b8584600001518560200151858760400151898960600151610c29565b9998505050505050505050565b610371610e05565b6040805180820182527f13ef5ba6f0375c848bef4face55a4ef9f4795d025da040d05c10eceb026962a381527f2fdefb69ab8dc49465426c878b50ba8099d05649ef0817eec445ab0fd03e3d026020808301919091529083528151608080820184527f145d64c2fb27d1cd415947aa9247a1c3c887b7ac4ffd5e007e28b3b480cc90398285019081527f100119a792df944b2db29fc01860fa839acd8c867dfd3a500980bf46ed864386606080850191909152908352845180860186527f17adb74f21765a73e3a04d08513622aafb2510e12e145887032b6e36c2c70bd581527f2f241696e6fa7254050dc68da6866072e882dc7718e60a404a86a834d20e2e05818601528385015285840192909252835180820185527f13138c04d248ed627a818afc61754b8078a47dc8108650aa6b76c532101f2a0b8186019081527f1fc72d01d032339444954018a95090fce0a7b8365a786d765e9b76197c0895a4828501528152845180860186527f21282b6a7a29e64a8744f68334927a59ce8b2a0da73e3768d5c51901f93c00ea81527f2fe9c6f78fb154c22762c9aa813a432eda3fdc24e2cfe96a6d223d899515c336818601528185015285850152835180820185527f1e030adaa723a04f4a09f0e28a5886274d89fa902f7d80a0f95e461dd61db8018186019081527f180a3e7b755ec8beef76f765ee70da4822abc3dc2beb29f9535d195fc6c6525e828501528152845180860186527f1118ce3ab471633f7dca8c6350b0fb76487d0255eb75fa54dce9738092f8a74181527f11a4c18b3398bf8fc7d31e12f6b09e7edfb6375e3c41ed37cf58b14d2c9336dd818601528185015282860152835180850185527f2b7906113fc0abaa3176b5ec8d3aaef10e5938fba481405225d3e45bc9019df081527f0744d207dd6ca8194c37b55855d1a732c20e70f01b2f16f7f71e6f46f0b8462e81850152818601805191909152845180860186527f236c3a27d6175e91b656597b53ed2dc3eca408467e3a20b933fb4720ad59c8e081527f122090a31df562847afd987fcbc7d75cdaa515c52f2429759f96b461fc63a064818601528151850152845180860186527f099a82c29ca8b9154fe06e639d6e92903c66c4835d15ca258f2f0dc85ceefe3e81527f0bbacc7ecee56d2650af004c71642261d85719826fbc62ad137d604999855ca5818601528151860152845180860186527f2b730574af9109a55f5794850d381475b501a5e275a906b7686d14ab39946f0781527f0f2d21144842c6251af5d72baeb3375950f7f3fdcf3e86cbac6fae835355dd4f81860152815190930192909252835180850185527f29f01c769c7b53298075b96e948757ae7310e92492e43d9ae48d454794a12fce81527f26ea27ad95ab4145a8a476728a9d9247b8d8a2332c501bb5d91e77f28813b54081850152825190910152825180840184527f0ebd07a56b28fee7274d61c6655a0493c5aaf316381511f8699ad7d13cd7be4581527f1619ea5e550da75838471557f867ac621e312987079a39e59d7c12efa832961481840152815160a00152825180840184527f2bf3c0e5852affd0a79813f0741acd6dd648da99b5626e1bbe0c43e03703d6f681527f060aa6ffd76f914514cca3e3a143ec744daeb6614b8152caa848d079432934ea81840152815160c00152825180840184527f2b672aa7fcb2ff07a8a7fa2aad3b22ab3edae8cb5c8da46c69c4e78a3c5c830d81527f264906a97a9d5ad43a4083da80306abb1007187abb1c7a82945cb0456c9e980a81840152815160e00152825180840184527f2de73a4ceb6b9c65d70b21c1b99e93ddbfe4595c4ebe17ea7e65e804492838df81527f2994fefa923bf139ecf3c54a09102015a4510b9c5ff365352c6fd5e528919c028184015281516101000152825180840184527f0d6f47fc7b318f319e9eee53ea80c0f4b06ecdf7cf42adde64d7442441e3ecf581527f0eedd876dbfd280518864b6c5345216934033b7b1b3dc156fa563620333887ea8184015281516101200152825180840184527f13f84e4403a3d1c2243de94119a0f072de32f47fc519812eaa2e6925f0744a9281527f23e3552f670e12db746361463d87394b55be39b14bed8dfbd448d945ea4f83fb8184015281516101400152825180840184527f27f2416fafc24bcee2c85c06a7440202865e19d4288b7c95807e012c5b7e813e81527f140bf59c2ba1e9a4e8bb07403dde40ffe80fd45e47b3e7f4d41aa7edba4aa16b818401528151610160015282518084019093527f1f3fb63daed8501cca832f0c0d64cb4f5526b98742fff8f19984d8268afc5d9f83527f294f95bfaab2b1007f460fb8a1186b4594a76df04a755edff8b56112dd4f847f9183019190915251610180015290565b610a41610dc6565b610a49610e4c565b60405180606001604052808560000151815260200185602001518152602001848152509050600060608360808460076107d05a03fa9050808015610a8c57610a8e565bfe5b5080610ad6576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5b5d5b0b59985a5b195960721b604482015290519081900360640190fd5b505092915050565b610ae6610dc6565b610aee610e6a565b604051806080016040528085600001518152602001856020015181526020018460000151815260200184602001518152509050600060608360c08460066107d05a03fa9050808015610a8c575080610ad6576040805162461bcd60e51b81526020600482015260126024820152711c185a5c9a5b99cb5859190b59985a5b195960721b604482015290519081900360640190fd5b610b8a610dc6565b8151158015610b9b57506020820151155b15610bba57506040805180820190915260008082526020820152610c24565b6040518060400160405280836000015181526020017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47846020015181610bfc57fe5b067f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703905290505b919050565b6000610c33610e88565b5060408051610300810182528a5181526020808c0151818301528a5151928201929092528951820151606082015289820180515160808301525182015160a0820152885160c08201528882015160e08201528751516101008201528751820151610120820152878201805151610140830152518201516101608201528651610180820152868201516101a08201528551516101c082015285518201516101e08201528582018051516102008301525182015161022082015284516102408201528482015161026082015283515161028082015283518201516102a08201528382018051516102c083015251909101516102e0820152610d30610ea7565b60006020826103008560086107d05a03fa9050808015610a8c575080610d95576040805162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b604482015290519081900360640190fd5b505115159a9950505050505050505050565b6040518061010001604052806008906020820280368337509192915050565b604051806040016040528060008152602001600081525090565b6040518060400160405280610df3610ec5565b8152602001610e00610ec5565b905290565b6040518060a00160405280610e18610dc6565b8152602001610e25610de0565b8152602001610e32610de0565b8152602001610e3f610de0565b8152602001610e00610ee3565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b604051806101a00160405280600d905b610efb610dc6565b815260200190600190039081610ef3579050509056fe76657269666965722d696e7075742d6774652d736e61726b2d7363616c61722d6669656c6476657269666965722d70726f6f662d656c656d656e742d6774652d7072696d652d71a264697066735822122087193ba8e2dbad44dcff5fd2805837e17efbbdbef9ab55557a956f54ea75c76264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}