{
  "address": "0x39517c4F6e00C6Bb292e043Cb6Db69a969bc86AE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tornadoTrees",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_instanceRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayerRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedNote",
          "type": "bytes"
        }
      ],
      "name": "EncryptedNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ITornadoTrees",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "TornadoTreesUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveExactToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_encryptedNotes",
          "type": "bytes[]"
        }
      ],
      "name": "backupNotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITornadoInstance",
          "name": "_tornado",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_commitment",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_encryptedNote",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tornadoTrees",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_instanceRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayerRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instanceRegistry",
      "outputs": [
        {
          "internalType": "contract InstanceRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerRegistry",
      "outputs": [
        {
          "internalType": "contract RelayerRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govAddr",
          "type": "address"
        }
      ],
      "name": "setNewGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITornadoTrees",
          "name": "_tornadoTrees",
          "type": "address"
        }
      ],
      "name": "setTornadoTreesContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tornadoTrees",
      "outputs": [
        {
          "internalType": "contract ITornadoTrees",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITornadoInstance",
          "name": "_tornado",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_nullifierHash",
          "type": "bytes32"
        },
        {
          "internalType": "address payable",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refund",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24c213f61697b3ccb5ee006a7e18e28356beafde5bd815f74da7ae899684fe4c",
  "receipt": {
    "to": null,
    "from": "0x777BEeF85E717Ab18e44cd054B1a1E33a4A93b83",
    "contractAddress": "0x39517c4F6e00C6Bb292e043Cb6Db69a969bc86AE",
    "transactionIndex": 38,
    "gasUsed": "1435153",
    "logsBloom": "0x
    "blockHash": "0x25c11442cef57c863d7f4c5435a521cb07242d9fd628b35698a5c4431147640e",
    "transactionHash": "0x24c213f61697b3ccb5ee006a7e18e28356beafde5bd815f74da7ae899684fe4c",
    "logs": [],
    "blockNumber": 9604922,
    "cumulativeGasUsed": "7385546",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0x777BEeF85E717Ab18e44cd054B1a1E33a4A93b83",
    "0x64E6Fb4D08ceDe6F71A98d351aE3538e793d1842",
    "0xdbf502EBD8606eD0677987017acb40b018520d59"
  ],
  "numDeployments": 9,
  "solcInputHash": "8beda19219579723a38f17825df12756",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tornadoTrees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_instanceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayerRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedNote\",\"type\":\"bytes\"}],\"name\":\"EncryptedNote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITornadoTrees\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"TornadoTreesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveExactToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_encryptedNotes\",\"type\":\"bytes[]\"}],\"name\":\"backupNotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITornadoInstance\",\"name\":\"_tornado\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_encryptedNote\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tornadoTrees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_instanceRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayerRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instanceRegistry\",\"outputs\":[{\"internalType\":\"contract InstanceRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerRegistry\",\"outputs\":[{\"internalType\":\"contract RelayerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddr\",\"type\":\"address\"}],\"name\":\"setNewGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITornadoTrees\",\"name\":\"_tornadoTrees\",\"type\":\"address\"}],\"name\":\"setTornadoTreesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tornadoTrees\",\"outputs\":[{\"internalType\":\"contract ITornadoTrees\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITornadoInstance\",\"name\":\"_tornado\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_nullifierHash\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refund\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveExactToken(address,address,uint256)\":{\"details\":\"Sets `amount` allowance of `_spender` over the router's (this contract) tokens.\"},\"deposit(address,bytes32,bytes,address)\":{\"params\":{\"_commitment\":\"the note commitment, which is PedersenHash(nullifier + secret)\",\"_encryptedNote\":\"the encrypted note\",\"_tornado\":\"PortralGate pool instance address\",\"sender\":\"the sender address (used in cases when the sender is not the caller e.g. zapper contract)\"}},\"rescueTokens(address,address,uint256)\":{\"details\":\"Method to claim junk and accidentally sent tokens\"},\"setNewGovernance(address)\":{\"params\":{\"_govAddr\":\"new governance address\"}},\"setTornadoTreesContract(address)\":{\"details\":\"Update new tornado tree instance.\",\"params\":{\"_tornadoTrees\":\"new tornado tree instance address\"}},\"withdraw(address,bytes,bytes32,bytes32,address,address,uint256,uint256)\":{\"params\":{\"_fee\":\"the token amount sent to relayer as fee\",\"_nullifierHash\":\"hash of unique deposit nullifier to prevent double spends\",\"_proof\":\"is a zkSNARK proof data, and input is an array of circuit public inputs `input` array\",\"_recipient\":\"the recipient address to recieve the token\",\"_refund\":\"the eth amount sent to recipient as gas\",\"_relayer\":\"the relayer address\",\"_root\":\"merkle root of all deposits in the contract\",\"_tornado\":\"TC pool instance address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"backupNotes(bytes[])\":{\"notice\":\"Manually backup encrypted notes\"},\"deposit(address,bytes32,bytes,address)\":{\"notice\":\"Deposit funds into the contract.\"},\"initialize(address,address,address,address)\":{\"notice\":\"For proxy pattern\"},\"setNewGovernance(address)\":{\"notice\":\"Set new governance address.\"},\"withdraw(address,bytes,bytes32,bytes32,address,address,uint256,uint256)\":{\"notice\":\"Withdraw a deposit from the contract. Relayer withdrawn should have different _relayer and _recipient addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/portalgate/PGRouter.sol\":\"PGRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/interfaces/IHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IHasher {\\n  function poseidon(bytes32[2] calldata inputs) external pure returns (bytes32);\\n\\n  function poseidon(bytes32[3] calldata inputs) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x467095fa43569e497a5e1b1f63324a80b06c8575523c114b67d228c2f6202173\",\"license\":\"MIT\"},\"contracts/interfaces/ITornadoInstance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITornadoInstance {\\n    function token() external view returns (address);\\n\\n    function denomination() external view returns (uint256);\\n\\n    function deposit(bytes32 commitment) external payable;\\n\\n    function withdraw(\\n        bytes calldata proof,\\n        bytes32 root,\\n        bytes32 nullifierHash,\\n        address payable recipient,\\n        address payable relayer,\\n        uint256 fee,\\n        uint256 refund\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x4a0f58599aec2c7f72665fcaf3edbe0d36157fd1a327ceaed6769782992850bf\",\"license\":\"MIT\"},\"contracts/interfaces/ITornadoTrees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITornadoTrees {\\n  function registerDeposit(address instance, bytes32 commitment) external;\\n\\n  function registerWithdrawal(address instance, bytes32 nullifier) external;\\n}\\n\",\"keccak256\":\"0x0109982aa5804c46fa5f05791f87663bac22dbf7e62b13cf4ab5ddf9a9012502\",\"license\":\"MIT\"},\"contracts/portalgate/InstanceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/ITornadoInstance.sol\\\";\\nimport \\\"./PGRouter.sol\\\";\\n\\ncontract InstanceRegistry {\\n  using SafeERC20 for IERC20;\\n\\n  enum InstanceState {\\n    DISABLED,\\n    ENABLED, // is enabled but mining is disabled\\n    MINABLE // is enabled and mining is enabled\\n  }\\n\\n  struct Instance {\\n    bool isERC20;\\n    IERC20 token;\\n    InstanceState state;\\n    // the fee of the uniswap pool which will be used to get a TWAP\\n    uint24 uniswapPoolSwappingFee;\\n    // the fee the protocol takes from relayer, it should be multiplied by PROTOCOL_FEE_DIVIDER from FeeManager.sol\\n    uint32 protocolFeePercentage;\\n    uint256 maxDepositAmount;\\n  }\\n\\n  struct TornadoConfig {\\n    ITornadoInstance addr;\\n    Instance instance;\\n  }\\n\\n  address public governance;\\n  PGRouter public router;\\n\\n  mapping(ITornadoInstance => Instance) public instances;\\n  ITornadoInstance[] public instanceIds;\\n\\n  event InstanceStateUpdated(ITornadoInstance indexed instance, InstanceState state);\\n  event RouterRegistered(address pgRouter);\\n\\n  modifier onlyGovernance() {\\n    require(msg.sender == governance, \\\"Not authorized\\\");\\n    _;\\n  }\\n\\n  constructor(address _governance) {\\n    governance = _governance;\\n  }\\n\\n  /**\\n   * @dev initialise a set of tornado instances.\\n   */\\n  function initInstances(TornadoConfig[] memory _instances) external onlyGovernance {\\n    for (uint256 i = 0; i < _instances.length; i++) {\\n      _updateInstance(_instances[i]);\\n      instanceIds.push(_instances[i].addr);\\n    }\\n  }\\n\\n  /**\\n   * @dev Update an instance state.\\n   */\\n  function updateInstanceState(ITornadoInstance _addr, InstanceState _state) external virtual onlyGovernance {\\n    Instance storage _instance = instances[_addr];\\n    _instance.state = _state;\\n    emit InstanceStateUpdated(_addr, _state);\\n  }\\n\\n  /**\\n   * @dev Add or update an instance.\\n   */\\n  function updateInstance(TornadoConfig calldata _tornadoConf) external virtual onlyGovernance {\\n    require(_tornadoConf.instance.state != InstanceState.DISABLED, \\\"Use removeInstance() for remove\\\");\\n\\n    Instance memory _inst = instances[_tornadoConf.addr];\\n    if (_inst.state == InstanceState.DISABLED && address(_inst.token) == address(0) && _inst.maxDepositAmount == 0) {\\n      // make sure it's a new instance.\\n      instanceIds.push(_tornadoConf.addr);\\n    }\\n    _updateInstance(_tornadoConf);\\n  }\\n\\n  /**\\n   * @dev Remove an instance.\\n   * @param _instanceId The instance id in `instanceIds` mapping to remove.\\n   */\\n  function removeInstance(uint256 _instanceId) external virtual onlyGovernance {\\n    ITornadoInstance _instance = instanceIds[_instanceId];\\n    (bool isERC20, IERC20 token) = (instances[_instance].isERC20, instances[_instance].token);\\n\\n    if (isERC20) {\\n      uint256 allowance = token.allowance(address(router), address(_instance));\\n      if (allowance != 0) {\\n        router.approveExactToken(token, address(_instance), 0);\\n      }\\n    }\\n\\n    delete instances[_instance];\\n    instanceIds[_instanceId] = instanceIds[instanceIds.length - 1];\\n    instanceIds.pop();\\n    emit InstanceStateUpdated(_instance, InstanceState.DISABLED);\\n  }\\n\\n  /**\\n   * @notice This function should allow governance to set a new protocol fee for relayers\\n   * @param instance the to update\\n   * @param newFee the new fee to use\\n   * */\\n  function setProtocolFee(ITornadoInstance instance, uint32 newFee) external onlyGovernance {\\n    instances[instance].protocolFeePercentage = newFee;\\n  }\\n\\n  /**\\n   * @notice This function should allow governance to set a new tornado proxy address\\n   * @param routerAddress address of the new proxy\\n   * */\\n  function setPGRouter(address routerAddress) external onlyGovernance {\\n    router = PGRouter(routerAddress);\\n    emit RouterRegistered(routerAddress);\\n  }\\n\\n  function _updateInstance(TornadoConfig memory _tornadoConf) internal virtual {\\n    instances[_tornadoConf.addr] = _tornadoConf.instance;\\n\\n    if (_tornadoConf.instance.isERC20) {\\n      IERC20 token = IERC20(_tornadoConf.addr.token());\\n      require(token == _tornadoConf.instance.token, \\\"Incorrect token\\\");\\n      uint256 allowance = token.allowance(address(router), address(_tornadoConf.addr));\\n\\n      if (allowance == 0) {\\n        router.approveExactToken(token, address(_tornadoConf.addr), type(uint256).max);\\n      }\\n    }\\n    emit InstanceStateUpdated(_tornadoConf.addr, _tornadoConf.instance.state);\\n  }\\n\\n  /**\\n   * @dev Returns all instance configs\\n   */\\n  function getAllInstances() public view returns (TornadoConfig[] memory result) {\\n    result = new TornadoConfig[](instanceIds.length);\\n    for (uint256 i = 0; i < instanceIds.length; i++) {\\n      ITornadoInstance _instance = instanceIds[i];\\n      result[i] = TornadoConfig({ addr: _instance, instance: instances[_instance] });\\n    }\\n  }\\n\\n  /**\\n   * @notice Set new governance address.\\n   * @param _govAddr new governance address\\n   */\\n  function setNewGovernance(address _govAddr) external onlyGovernance {\\n    governance = _govAddr;\\n  }\\n\\n  /**\\n   * @dev Returns all instance addresses\\n   */\\n  function getAllInstanceAddresses() public view returns (ITornadoInstance[] memory result) {\\n    result = new ITornadoInstance[](instanceIds.length);\\n    for (uint256 i = 0; i < instanceIds.length; i++) {\\n      result[i] = instanceIds[i];\\n    }\\n  }\\n\\n  /**\\n   * @notice get erc20 tornado instance token\\n   * @param instance the interface (contract) key to the instance data\\n   */\\n  function getPoolToken(ITornadoInstance instance) external view returns (address) {\\n    return address(instances[instance].token);\\n  }\\n}\\n\",\"keccak256\":\"0x2288a04610d9b21cb8162f8cd34237ae38e8383003cf811be06df9cce58fb6f0\",\"license\":\"MIT\"},\"contracts/portalgate/PGRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./RelayerRegistry.sol\\\";\\nimport \\\"./InstanceRegistry.sol\\\";\\nimport \\\"../interfaces/ITornadoInstance.sol\\\";\\nimport \\\"../tornado-core/Tornado.sol\\\";\\nimport \\\"../interfaces/ITornadoTrees.sol\\\";\\n\\ncontract PGRouter is Initializable {\\n  using SafeERC20 for IERC20;\\n\\n  event EncryptedNote(address indexed sender, bytes encryptedNote);\\n  event TornadoTreesUpdated(ITornadoTrees addr);\\n\\n  address public governance;\\n  InstanceRegistry public instanceRegistry;\\n  RelayerRegistry public relayerRegistry;\\n  ITornadoTrees public tornadoTrees;\\n\\n  modifier onlyGovernance() {\\n    require(msg.sender == governance, \\\"Not authorized\\\");\\n    _;\\n  }\\n\\n  modifier onlyInstanceRegistry() {\\n    require(msg.sender == address(instanceRegistry), \\\"Not authorized\\\");\\n    _;\\n  }\\n\\n  constructor(address _tornadoTrees, address _governance, address _instanceRegistry, address _relayerRegistry) {\\n    tornadoTrees = ITornadoTrees(_tornadoTrees);\\n    governance = _governance;\\n    instanceRegistry = InstanceRegistry(_instanceRegistry);\\n    relayerRegistry = RelayerRegistry(_relayerRegistry);\\n  }\\n\\n  /**\\n    @notice For proxy pattern\\n  */\\n  function initialize(\\n    address _tornadoTrees,\\n    address _governance,\\n    address _instanceRegistry,\\n    address _relayerRegistry\\n  ) public initializer {\\n    tornadoTrees = ITornadoTrees(_tornadoTrees);\\n    governance = _governance;\\n    instanceRegistry = InstanceRegistry(_instanceRegistry);\\n    relayerRegistry = RelayerRegistry(_relayerRegistry);\\n  }\\n\\n  /**\\n    @notice Deposit funds into the contract.\\n    @param _tornado PortralGate pool instance address\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n    @param _encryptedNote the encrypted note\\n    @param sender the sender address (used in cases when the sender is not the caller e.g. zapper contract)\\n  */\\n  function deposit(\\n    ITornadoInstance _tornado,\\n    bytes32 _commitment,\\n    bytes memory _encryptedNote,\\n    address sender\\n  ) public payable virtual {\\n    (bool isERC20, IERC20 token, InstanceRegistry.InstanceState state, , , uint256 maxDepositAmount) = instanceRegistry.instances(\\n      _tornado\\n    );\\n    require(state != InstanceRegistry.InstanceState.DISABLED, \\\"The instance is not supported\\\");\\n    require(token.balanceOf(address(_tornado)) < maxDepositAmount, \\\"Exceed deposit Cap for the pool\\\");\\n\\n    if (isERC20) {\\n      token.safeTransferFrom(msg.sender, address(this), _tornado.denomination());\\n    }\\n    _tornado.deposit{ value: msg.value }(_commitment);\\n\\n    if (state == InstanceRegistry.InstanceState.MINABLE) {\\n      tornadoTrees.registerDeposit(address(_tornado), _commitment);\\n    }\\n\\n    emit EncryptedNote(sender, _encryptedNote);\\n  }\\n\\n  /**\\n    @notice Withdraw a deposit from the contract. Relayer withdrawn should have different _relayer and _recipient addresses.\\n    @param _tornado TC pool instance address\\n    @param _proof is a zkSNARK proof data, and input is an array of circuit public inputs `input` array\\n    @param _root merkle root of all deposits in the contract\\n    @param _nullifierHash hash of unique deposit nullifier to prevent double spends\\n    @param _recipient the recipient address to recieve the token\\n    @param _relayer the relayer address\\n    @param _fee the token amount sent to relayer as fee\\n    @param _refund the eth amount sent to recipient as gas\\n  */\\n  function withdraw(\\n    ITornadoInstance _tornado,\\n    bytes calldata _proof,\\n    bytes32 _root,\\n    bytes32 _nullifierHash,\\n    address payable _recipient,\\n    address payable _relayer,\\n    uint256 _fee,\\n    uint256 _refund\\n  ) public payable virtual {\\n    (, , InstanceRegistry.InstanceState state, , , ) = instanceRegistry.instances(_tornado);\\n    require(state != InstanceRegistry.InstanceState.DISABLED, \\\"The instance is not supported\\\");\\n\\n    if (_relayer != _recipient) {\\n      require(relayerRegistry.isRelayerRegistered(_relayer) && msg.sender == _relayer, \\\"Invalid Relayer.\\\");\\n    }\\n\\n    _tornado.withdraw{ value: msg.value }(_proof, _root, _nullifierHash, _recipient, _relayer, _fee, _refund);\\n\\n    if (state == InstanceRegistry.InstanceState.MINABLE) {\\n      tornadoTrees.registerWithdrawal(address(_tornado), _nullifierHash);\\n    }\\n  }\\n\\n  /**\\n   @dev Sets `amount` allowance of `_spender` over the router's (this contract) tokens.\\n  */\\n  function approveExactToken(IERC20 _token, address _spender, uint256 _amount) external onlyInstanceRegistry {\\n    _token.safeApprove(_spender, _amount);\\n  }\\n\\n  /**\\n   @notice Manually backup encrypted notes\\n  */\\n  function backupNotes(bytes[] calldata _encryptedNotes) external virtual {\\n    for (uint256 i = 0; i < _encryptedNotes.length; i++) {\\n      emit EncryptedNote(msg.sender, _encryptedNotes[i]);\\n    }\\n  }\\n\\n  /**\\n    @dev Update new tornado tree instance.\\n    @param _tornadoTrees new tornado tree instance address\\n  */\\n  function setTornadoTreesContract(ITornadoTrees _tornadoTrees) external virtual onlyGovernance {\\n    tornadoTrees = _tornadoTrees;\\n    emit TornadoTreesUpdated(_tornadoTrees);\\n  }\\n\\n  /**\\n    @notice Set new governance address.\\n    @param _govAddr new governance address\\n  */\\n  function setNewGovernance(address _govAddr) external onlyGovernance {\\n    governance = _govAddr;\\n  }\\n\\n  /// @dev Method to claim junk and accidentally sent tokens\\n  function rescueTokens(IERC20 _token, address payable _to, uint256 _amount) external virtual onlyGovernance {\\n    require(_to != address(0), \\\"PG: can not send to zero address\\\");\\n\\n    if (address(_token) == address(0)) {\\n      // for Ether\\n      uint256 totalBalance = address(this).balance;\\n      uint256 balance = Math.min(totalBalance, _amount);\\n      (bool sent, ) = _to.call{ value: balance }(\\\"\\\");\\n      require(sent, \\\"Failed to send Ether\\\");\\n    } else {\\n      // any other erc20\\n      uint256 totalBalance = _token.balanceOf(address(this));\\n      uint256 balance = Math.min(totalBalance, _amount);\\n      require(balance > 0, \\\"PG: trying to send 0 balance\\\");\\n      _token.safeTransfer(_to, balance);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf50f7141aa9f961ef41c54924d0a06b9e7db87731b362d013497e2eb04efb41d\",\"license\":\"MIT\"},\"contracts/portalgate/RelayerRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RelayerRegistry is Ownable {\\n  mapping(address => bool) public isRelayer;\\n\\n  event RelayerAdded(address indexed relayer);\\n  event RelayerRemoved(address indexed relayer);\\n\\n  /**\\n      @dev Add a new relayer.\\n      @param _relayer A new relayer address\\n    */\\n  function add(address _relayer) public onlyOwner {\\n    require(!isRelayer[_relayer], \\\"The relayer already exists\\\");\\n    isRelayer[_relayer] = true;\\n    emit RelayerAdded(_relayer);\\n  }\\n\\n  /**\\n      @dev Remove a new relayer.\\n      @param _relayer A new relayer address to remove\\n    */\\n  function remove(address _relayer) public onlyOwner {\\n    require(isRelayer[_relayer], \\\"The relayer does not exist\\\");\\n    isRelayer[_relayer] = false;\\n    emit RelayerRemoved(_relayer);\\n  }\\n\\n  /**\\n      @dev Check address intance is a relayer?\\n      @param _relayer A relayer address to check\\n      @return true or false\\n    */\\n  function isRelayerRegistered(address _relayer) external view returns (bool) {\\n    return isRelayer[_relayer];\\n  }\\n}\\n\",\"keccak256\":\"0x4df866a5a6e7e59559490aed5ac75e25e32ba5b67304ceccdb6af950d3afc5bc\",\"license\":\"MIT\"},\"contracts/tornado-core/MerkleTreeWithHistory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IHasher.sol\\\";\\n\\ncontract MerkleTreeWithHistory {\\n  uint256 public constant FIELD_SIZE = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n  uint256 public constant ZERO_VALUE = 21663839004416932945382355908790599225266501822907911457504978515578255421292; // = keccak256(\\\"tornado\\\") % FIELD_SIZE\\n\\n  uint32 public immutable levels;\\n  IHasher public hasher;\\n\\n  bytes32[] public filledSubtrees;\\n  bytes32[] public zeros;\\n  uint32 public currentRootIndex = 0;\\n  uint32 public nextIndex = 0;\\n  uint32 public constant ROOT_HISTORY_SIZE = 10;\\n  bytes32[ROOT_HISTORY_SIZE] public roots;\\n\\n  constructor(uint32 _treeLevels, IHasher _hasher) {\\n    require(_treeLevels > 0, \\\"_treeLevels should be greater than zero\\\");\\n    require(_treeLevels < 32, \\\"_treeLevels should be less than 32\\\");\\n    levels = _treeLevels;\\n    hasher = _hasher;\\n\\n    bytes32 currentZero = bytes32(ZERO_VALUE);\\n    zeros.push(currentZero);\\n    filledSubtrees.push(currentZero);\\n\\n    for (uint32 i = 1; i < _treeLevels; i++) {\\n      currentZero = hashLeftRight(currentZero, currentZero);\\n      zeros.push(currentZero);\\n      filledSubtrees.push(currentZero);\\n    }\\n\\n    filledSubtrees.push(hashLeftRight(currentZero, currentZero));\\n    roots[0] = filledSubtrees[_treeLevels];\\n  }\\n\\n  /**\\n    @dev Hash 2 tree leaves, returns poseidon(_left, _right)\\n  */\\n  function hashLeftRight(bytes32 _left, bytes32 _right) public view returns (bytes32) {\\n    return hasher.poseidon([_left, _right]);\\n  }\\n\\n  function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n    uint32 currentIndex = nextIndex;\\n    require(currentIndex != uint32(2)**levels, \\\"Merkle tree is full. No more leaves can be added\\\");\\n    nextIndex = currentIndex + 1;\\n    bytes32 currentLevelHash = _leaf;\\n    bytes32 left;\\n    bytes32 right;\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      if (currentIndex % 2 == 0) {\\n        left = currentLevelHash;\\n        right = zeros[i];\\n        filledSubtrees[i] = currentLevelHash;\\n      } else {\\n        left = filledSubtrees[i];\\n        right = currentLevelHash;\\n      }\\n\\n      currentLevelHash = hashLeftRight(left, right);\\n      currentIndex /= 2;\\n    }\\n\\n    currentRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n    roots[currentRootIndex] = currentLevelHash;\\n    return nextIndex - 1;\\n  }\\n\\n  function _bulkInsert(bytes32[] memory _leaves) internal {\\n    uint32 insertIndex = nextIndex;\\n    require(insertIndex + _leaves.length <= uint32(2)**levels, \\\"Merkle doesn't have enough capacity to add specified leaves\\\");\\n\\n    bytes32[] memory subtrees = new bytes32[](levels);\\n    bool[] memory modifiedSubtrees = new bool[](levels);\\n    for (uint32 j = 0; j < _leaves.length - 1; j++) {\\n      uint256 index = insertIndex + j;\\n      bytes32 currentLevelHash = _leaves[j];\\n\\n      for (uint32 i = 0; ; i++) {\\n        if (index % 2 == 0) {\\n          modifiedSubtrees[i] = true;\\n          subtrees[i] = currentLevelHash;\\n          break;\\n        }\\n\\n        if (subtrees[i] == bytes32(0)) {\\n          subtrees[i] = filledSubtrees[i];\\n        }\\n        currentLevelHash = hashLeftRight(subtrees[i], currentLevelHash);\\n        index /= 2;\\n      }\\n    }\\n\\n    for (uint32 i = 0; i < levels; i++) {\\n      // using local map to save on gas on writes if elements were not modified\\n      if (modifiedSubtrees[i]) {\\n        filledSubtrees[i] = subtrees[i];\\n      }\\n    }\\n\\n    nextIndex = uint32(insertIndex + _leaves.length - 1);\\n    _insert(_leaves[_leaves.length - 1]);\\n  }\\n\\n  /**\\n    @dev Whether the root is present in the root history\\n  */\\n  function isKnownRoot(bytes32 _root) public view returns (bool) {\\n    if (_root == 0) {\\n      return false;\\n    }\\n    uint32 i = currentRootIndex;\\n    do {\\n      if (_root == roots[i]) {\\n        return true;\\n      }\\n      if (i == 0) {\\n        i = ROOT_HISTORY_SIZE;\\n      }\\n      i--;\\n    } while (i != currentRootIndex);\\n    return false;\\n  }\\n\\n  /**\\n    @dev Returns the last root\\n  */\\n  function getLastRoot() public view returns (bytes32) {\\n    return roots[currentRootIndex];\\n  }\\n}\\n\",\"keccak256\":\"0x0d5a84318d0ff3109857e25970ca91e1f248e90940a8b68f5eaf82aa6bca1dfb\",\"license\":\"MIT\"},\"contracts/tornado-core/Tornado.sol\":{\"content\":\"// https://tornado.cash\\n/*\\n * d888888P                                           dP              a88888b.                   dP\\n *    88                                              88             d8'   `88                   88\\n *    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\\n *    88    88'  `88 88'  `88 88'  `88 88'  `88 88'  `88 88'  `88    88        88'  `88 Y8ooooo. 88'  `88\\n *    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\\n *    dP    `88888P' dP       dP    dP `88888P8 `88888P8 `88888P' 88  Y88888P' `88888P8 `88888P' dP    dP\\n * ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./MerkleTreeWithHistory.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        bytes memory _proof,\\n        uint256[6] memory _input\\n    ) external returns (bool);\\n}\\n\\nabstract contract Tornado is MerkleTreeWithHistory, ReentrancyGuard {\\n    IVerifier public immutable verifier;\\n    uint256 public denomination;\\n\\n    mapping(bytes32 => bool) public nullifierHashes;\\n    // we store all commitments just to prevent accidental deposits with the same commitment\\n    mapping(bytes32 => bool) public commitments;\\n\\n    event Deposit(\\n        bytes32 indexed commitment,\\n        uint32 leafIndex,\\n        uint256 timestamp\\n    );\\n    event Withdrawal(\\n        address to,\\n        bytes32 nullifierHash,\\n        address indexed relayer,\\n        uint256 fee\\n    );\\n\\n    /**\\n@dev The constructor\\n    @param _verifier the address of SNARK verifier for this contract\\n    @param _hasher the address of MiMC hash contract\\n    @param _denomination transfer amount for each deposit\\n    @param _merkleTreeHeight the height of deposits' Merkle Tree\\n  */\\n    constructor(\\n        IVerifier _verifier,\\n        IHasher _hasher,\\n        uint256 _denomination,\\n        uint32 _merkleTreeHeight\\n    ) MerkleTreeWithHistory(_merkleTreeHeight, _hasher) {\\n        require(_denomination > 0, \\\"denomination should be greater than 0\\\");\\n        verifier = _verifier;\\n        denomination = _denomination;\\n    }\\n\\n    /**\\n@dev Deposit funds into the contract. The caller must send (for ETH) or approve (for ERC20) value equal to or `denomination` of this instance.\\n    @param _commitment the note commitment, which is PedersenHash(nullifier + secret)\\n  */\\n    function deposit(bytes32 _commitment) external payable nonReentrant {\\n        require(!commitments[_commitment], \\\"The commitment has been submitted\\\");\\n\\n        uint32 insertedIndex = _insert(_commitment);\\n        commitments[_commitment] = true;\\n        _processDeposit();\\n\\n        emit Deposit(_commitment, insertedIndex, block.timestamp);\\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processDeposit() internal virtual;\\n\\n    /**\\n@dev Withdraw a deposit from the contract. `proof` is a zkSNARK proof data, and input is an array of circuit public inputs\\n    `input` array consists of:\\n      - merkle root of all deposits in the contract\\n      - hash of unique deposit nullifier to prevent double spends\\n      - the recipient of funds\\n      - optional fee that goes to the transaction sender (usually a relay)\\n  */\\n    function withdraw(\\n        bytes calldata _proof,\\n        bytes32 _root,\\n        bytes32 _nullifierHash,\\n        address payable _recipient,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _refund\\n    ) external payable nonReentrant {\\n        require(_fee <= denomination, \\\"Fee exceeds transfer value\\\");\\n        require(\\n            !nullifierHashes[_nullifierHash],\\n            \\\"The note has been already spent\\\"\\n        );\\n        require(isKnownRoot(_root), \\\"Cannot find your merkle root\\\"); // Make sure to use a recent one\\n        require(\\n            verifier.verifyProof(\\n                _proof,\\n                [\\n                    uint256(_root),\\n                    uint256(_nullifierHash),\\n                    uint256(keccak256(abi.encodePacked(_recipient))),\\n                    uint256(keccak256(abi.encodePacked(_relayer))),\\n                    _fee,\\n                    _refund\\n                ]\\n            ),\\n            \\\"Invalid withdraw proof\\\"\\n        );\\n\\n        nullifierHashes[_nullifierHash] = true;\\n        _processWithdraw(_recipient, _relayer, _fee, _refund);\\n        emit Withdrawal(_recipient, _nullifierHash, _relayer, _fee);\\n    }\\n\\n    /** @dev this function is defined in a child contract */\\n    function _processWithdraw(\\n        address payable _recipient,\\n        address payable _relayer,\\n        uint256 _fee,\\n        uint256 _refund\\n    ) internal virtual;\\n\\n    /** @dev whether a note is already spent */\\n    function isSpent(bytes32 _nullifierHash) public view returns (bool) {\\n        return nullifierHashes[_nullifierHash];\\n    }\\n\\n    /** @dev whether an array of notes is already spent */\\n    function isSpentArray(\\n        bytes32[] calldata _nullifierHashes\\n    ) external view returns (bool[] memory spent) {\\n        spent = new bool[](_nullifierHashes.length);\\n        for (uint256 i = 0; i < _nullifierHashes.length; i++) {\\n            if (isSpent(_nullifierHashes[i])) {\\n                spent[i] = true;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fce1f6ff8b8a53ceabb0dbe63ff110a249f5b97ead1905fb22bd81ed24e5c29\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018cb380380620018cb8339810160408190526200003491620000b5565b600380546001600160a01b039586166001600160a01b03199182161790915560008054948616620100000262010000600160b01b03199095169490941790935560018054928516928416929092179091556002805491909316911617905562000112565b80516001600160a01b0381168114620000b057600080fd5b919050565b60008060008060808587031215620000cc57600080fd5b620000d78562000098565b9350620000e76020860162000098565b9250620000f76040860162000098565b9150620001076060860162000098565b905092959194509250565b6117a980620001226000396000f3fe6080604052600436106100a75760003560e01c80636485ba2a116100645780636485ba2a14610183578063b438689f146101a3578063cea9d26f146101b6578063e2658c9c146101d6578063e7d460bb146101f6578063f8c8765e1461021657600080fd5b806314e18376146100ac57806336a3874b146100c15780633cb837fd146100fd5780633ef107831461011d57806347ff589d1461013d5780635aa6e6751461015d575b600080fd5b6100bf6100ba3660046111e7565b610236565b005b3480156100cd57600080fd5b506001546100e1906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b34801561010957600080fd5b506003546100e1906001600160a01b031681565b34801561012957600080fd5b506100bf6101383660046112c5565b610593565b34801561014957600080fd5b506002546100e1906001600160a01b031681565b34801561016957600080fd5b506000546100e1906201000090046001600160a01b031681565b34801561018f57600080fd5b506100bf61019e366004611306565b6105d6565b6100bf6101b136600461137b565b61064f565b3480156101c257600080fd5b506100bf6101d13660046112c5565b610908565b3480156101e257600080fd5b506100bf6101f1366004611448565b610b33565b34801561020257600080fd5b506100bf610211366004611448565b610bb7565b34801561022257600080fd5b506100bf610231366004611465565b610c11565b60015460405163032bb44360e01b81526001600160a01b038681166004830152600092839283928392169063032bb4439060240160c060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab91906114d1565b95505050935093509350600060028111156102c8576102c8611560565b8260028111156102da576102da611560565b0361032c5760405162461bcd60e51b815260206004820152601d60248201527f54686520696e7374616e6365206973206e6f7420737570706f7274656400000060448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b0389811660048301528291908516906370a0823190602401602060405180830381865afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190611576565b106103e65760405162461bcd60e51b815260206004820152601f60248201527f457863656564206465706f7369742043617020666f722074686520706f6f6c006044820152606401610323565b83156104655761046533308a6001600160a01b0316638bca6d166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104539190611576565b6001600160a01b038716929190610d76565b60405163b214faa560e01b8152600481018890526001600160a01b0389169063b214faa59034906024016000604051808303818588803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b50600293506104ca92505050565b8260028111156104dc576104dc611560565b036105485760035460405163c6758d6b60e01b81526001600160a01b038a81166004830152602482018a90529091169063c6758d6b90604401600060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b505050505b846001600160a01b03167ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b40088760405161058191906115e7565b60405180910390a25050505050505050565b6001546001600160a01b031633146105bd5760405162461bcd60e51b8152600401610323906115fa565b6105d16001600160a01b0384168383610de7565b505050565b60005b818110156105d157337ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b400884848481811061061557610615611622565b90506020028101906106279190611638565b6040516106359291906116af565b60405180910390a280610647816116c3565b9150506105d9565b60015460405163032bb44360e01b81526001600160a01b038b81166004830152600092169063032bb4439060240160c060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be91906114d1565b50919450600093506106cf92505050565b8160028111156106e1576106e1611560565b0361072e5760405162461bcd60e51b815260206004820152601d60248201527f54686520696e7374616e6365206973206e6f7420737570706f727465640000006044820152606401610323565b846001600160a01b0316846001600160a01b0316146108085760025460405163fb04c93960e01b81526001600160a01b0386811660048301529091169063fb04c93990602401602060405180830381865afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906116ea565b80156107c95750336001600160a01b038516145b6108085760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2102932b630bcb2b91760811b6044820152606401610323565b6040516310d056db60e11b81526001600160a01b038b16906321a0adb6903490610844908d908d908d908d908d908d908d908d90600401611705565b6000604051808303818588803b15801561085d57600080fd5b505af1158015610871573d6000803e3d6000fd5b506002935061087f92505050565b81600281111561089157610891611560565b036108fc57600354604051620d70c960e51b81526001600160a01b038c8116600483015260248201899052909116906301ae192090604401600060405180830381600087803b1580156108e357600080fd5b505af11580156108f7573d6000803e3d6000fd5b505050505b50505050505050505050565b6000546201000090046001600160a01b031633146109385760405162461bcd60e51b8152600401610323906115fa565b6001600160a01b03821661098e5760405162461bcd60e51b815260206004820181905260248201527f50473a2063616e206e6f742073656e6420746f207a65726f20616464726573736044820152606401610323565b6001600160a01b038316610a4d574760006109a98284610efc565b90506000846001600160a01b03168260405160006040518083038185875af1925050503d80600081146109f8576040519150601f19603f3d011682016040523d82523d6000602084013e6109fd565b606091505b5050905080610a455760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610323565b505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190611576565b90506000610ac68284610efc565b905060008111610b185760405162461bcd60e51b815260206004820152601c60248201527f50473a20747279696e6720746f2073656e6420302062616c616e6365000000006044820152606401610323565b610b2c6001600160a01b0386168583610f14565b5050505050565b6000546201000090046001600160a01b03163314610b635760405162461bcd60e51b8152600401610323906115fa565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fd5ef75672982cb39cc849450302ce426d1655271003cae8a66cb533c12f86ecc9060200160405180910390a150565b6000546201000090046001600160a01b03163314610be75760405162461bcd60e51b8152600401610323906115fa565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b600054610100900460ff1615808015610c315750600054600160ff909116105b80610c4b5750303b158015610c4b575060005460ff166001145b610cae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610323565b6000805460ff191660011790558015610cd1576000805461ff0019166101001790555b600380546001600160a01b03199081166001600160a01b03888116919091179092556000805462010000600160b01b0319166201000088851602179055600180548216868416179055600280549091169184169190911790558015610b2c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610de19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f44565b50505050565b801580610e615750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f9190611576565b155b610ecc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610323565b6040516001600160a01b0383166024820152604481018290526105d190849063095ea7b360e01b90606401610daa565b6000818310610f0b5781610f0d565b825b9392505050565b6040516001600160a01b0383166024820152604481018290526105d190849063a9059cbb60e01b90606401610daa565b6000610f99826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110199092919063ffffffff16565b9050805160001480610fba575080806020019051810190610fba91906116ea565b6105d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610323565b60606110288484600085611030565b949350505050565b6060824710156110915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610323565b600080866001600160a01b031685876040516110ad9190611757565b60006040518083038185875af1925050503d80600081146110ea576040519150601f19603f3d011682016040523d82523d6000602084013e6110ef565b606091505b50915091506111008783838761110b565b979650505050505050565b6060831561117a578251600003611173576001600160a01b0385163b6111735760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610323565b5081611028565b611028838381511561118f5781518083602001fd5b8060405162461bcd60e51b815260040161032391906115e7565b6001600160a01b03811681146111be57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80356111e2816111a9565b919050565b600080600080608085870312156111fd57600080fd5b8435611208816111a9565b935060208501359250604085013567ffffffffffffffff8082111561122c57600080fd5b818701915087601f83011261124057600080fd5b813581811115611252576112526111c1565b604051601f8201601f19908116603f0116810190838211818310171561127a5761127a6111c1565b816040528281528a602084870101111561129357600080fd5b8260208601602083013760006020848301015280965050505050506112ba606086016111d7565b905092959194509250565b6000806000606084860312156112da57600080fd5b83356112e5816111a9565b925060208401356112f5816111a9565b929592945050506040919091013590565b6000806020838503121561131957600080fd5b823567ffffffffffffffff8082111561133157600080fd5b818501915085601f83011261134557600080fd5b81358181111561135457600080fd5b8660208260051b850101111561136957600080fd5b60209290920196919550909350505050565b60008060008060008060008060006101008a8c03121561139a57600080fd5b89356113a5816111a9565b985060208a013567ffffffffffffffff808211156113c257600080fd5b818c0191508c601f8301126113d657600080fd5b8135818111156113e557600080fd5b8d60208285010111156113f757600080fd5b602083019a5080995050505060408a0135955060608a0135945061141d60808b016111d7565b935061142b60a08b016111d7565b925060c08a0135915060e08a013590509295985092959850929598565b60006020828403121561145a57600080fd5b8135610f0d816111a9565b6000806000806080858703121561147b57600080fd5b8435611486816111a9565b93506020850135611496816111a9565b925060408501356114a6816111a9565b915060608501356114b6816111a9565b939692955090935050565b805180151581146111e257600080fd5b60008060008060008060c087890312156114ea57600080fd5b6114f3876114c1565b95506020870151611503816111a9565b60408801519095506003811061151857600080fd5b606088015190945062ffffff8116811461153157600080fd5b608088015190935063ffffffff8116811461154b57600080fd5b8092505060a087015190509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561158857600080fd5b5051919050565b60005b838110156115aa578181015183820152602001611592565b83811115610de15750506000910152565b600081518084526115d381602086016020860161158f565b601f01601f19169290920160200192915050565b602081526000610f0d60208301846115bb565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261164f57600080fd5b83018035915067ffffffffffffffff82111561166a57600080fd5b60200191503681900382131561167f57600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611028602083018486611686565b6000600182016116e357634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156116fc57600080fd5b610f0d826114c1565b60e08152600061171960e083018a8c611686565b60208301989098525060408101959095526001600160a01b03938416606086015291909216608084015260a083019190915260c09091015292915050565b6000825161176981846020870161158f565b919091019291505056fea26469706673582212209e721fff305b260434c545d31c23d67f514f64be4dfed087e1679d98833bb5b464736f6c634300080e0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80636485ba2a116100645780636485ba2a14610183578063b438689f146101a3578063cea9d26f146101b6578063e2658c9c146101d6578063e7d460bb146101f6578063f8c8765e1461021657600080fd5b806314e18376146100ac57806336a3874b146100c15780633cb837fd146100fd5780633ef107831461011d57806347ff589d1461013d5780635aa6e6751461015d575b600080fd5b6100bf6100ba3660046111e7565b610236565b005b3480156100cd57600080fd5b506001546100e1906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b34801561010957600080fd5b506003546100e1906001600160a01b031681565b34801561012957600080fd5b506100bf6101383660046112c5565b610593565b34801561014957600080fd5b506002546100e1906001600160a01b031681565b34801561016957600080fd5b506000546100e1906201000090046001600160a01b031681565b34801561018f57600080fd5b506100bf61019e366004611306565b6105d6565b6100bf6101b136600461137b565b61064f565b3480156101c257600080fd5b506100bf6101d13660046112c5565b610908565b3480156101e257600080fd5b506100bf6101f1366004611448565b610b33565b34801561020257600080fd5b506100bf610211366004611448565b610bb7565b34801561022257600080fd5b506100bf610231366004611465565b610c11565b60015460405163032bb44360e01b81526001600160a01b038681166004830152600092839283928392169063032bb4439060240160c060405180830381865afa158015610287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ab91906114d1565b95505050935093509350600060028111156102c8576102c8611560565b8260028111156102da576102da611560565b0361032c5760405162461bcd60e51b815260206004820152601d60248201527f54686520696e7374616e6365206973206e6f7420737570706f7274656400000060448201526064015b60405180910390fd5b6040516370a0823160e01b81526001600160a01b0389811660048301528291908516906370a0823190602401602060405180830381865afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190611576565b106103e65760405162461bcd60e51b815260206004820152601f60248201527f457863656564206465706f7369742043617020666f722074686520706f6f6c006044820152606401610323565b83156104655761046533308a6001600160a01b0316638bca6d166040518163ffffffff1660e01b8152600401602060405180830381865afa15801561042f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104539190611576565b6001600160a01b038716929190610d76565b60405163b214faa560e01b8152600481018890526001600160a01b0389169063b214faa59034906024016000604051808303818588803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b50600293506104ca92505050565b8260028111156104dc576104dc611560565b036105485760035460405163c6758d6b60e01b81526001600160a01b038a81166004830152602482018a90529091169063c6758d6b90604401600060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b505050505b846001600160a01b03167ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b40088760405161058191906115e7565b60405180910390a25050505050505050565b6001546001600160a01b031633146105bd5760405162461bcd60e51b8152600401610323906115fa565b6105d16001600160a01b0384168383610de7565b505050565b60005b818110156105d157337ffa28df43db3553771f7209dcef046f3bdfea15870ab625dcda30ac58b82b400884848481811061061557610615611622565b90506020028101906106279190611638565b6040516106359291906116af565b60405180910390a280610647816116c3565b9150506105d9565b60015460405163032bb44360e01b81526001600160a01b038b81166004830152600092169063032bb4439060240160c060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be91906114d1565b50919450600093506106cf92505050565b8160028111156106e1576106e1611560565b0361072e5760405162461bcd60e51b815260206004820152601d60248201527f54686520696e7374616e6365206973206e6f7420737570706f727465640000006044820152606401610323565b846001600160a01b0316846001600160a01b0316146108085760025460405163fb04c93960e01b81526001600160a01b0386811660048301529091169063fb04c93990602401602060405180830381865afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906116ea565b80156107c95750336001600160a01b038516145b6108085760405162461bcd60e51b815260206004820152601060248201526f24b73b30b634b2102932b630bcb2b91760811b6044820152606401610323565b6040516310d056db60e11b81526001600160a01b038b16906321a0adb6903490610844908d908d908d908d908d908d908d908d90600401611705565b6000604051808303818588803b15801561085d57600080fd5b505af1158015610871573d6000803e3d6000fd5b506002935061087f92505050565b81600281111561089157610891611560565b036108fc57600354604051620d70c960e51b81526001600160a01b038c8116600483015260248201899052909116906301ae192090604401600060405180830381600087803b1580156108e357600080fd5b505af11580156108f7573d6000803e3d6000fd5b505050505b50505050505050505050565b6000546201000090046001600160a01b031633146109385760405162461bcd60e51b8152600401610323906115fa565b6001600160a01b03821661098e5760405162461bcd60e51b815260206004820181905260248201527f50473a2063616e206e6f742073656e6420746f207a65726f20616464726573736044820152606401610323565b6001600160a01b038316610a4d574760006109a98284610efc565b90506000846001600160a01b03168260405160006040518083038185875af1925050503d80600081146109f8576040519150601f19603f3d011682016040523d82523d6000602084013e6109fd565b606091505b5050905080610a455760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b6044820152606401610323565b505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015610a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab89190611576565b90506000610ac68284610efc565b905060008111610b185760405162461bcd60e51b815260206004820152601c60248201527f50473a20747279696e6720746f2073656e6420302062616c616e6365000000006044820152606401610323565b610b2c6001600160a01b0386168583610f14565b5050505050565b6000546201000090046001600160a01b03163314610b635760405162461bcd60e51b8152600401610323906115fa565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fd5ef75672982cb39cc849450302ce426d1655271003cae8a66cb533c12f86ecc9060200160405180910390a150565b6000546201000090046001600160a01b03163314610be75760405162461bcd60e51b8152600401610323906115fa565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b600054610100900460ff1615808015610c315750600054600160ff909116105b80610c4b5750303b158015610c4b575060005460ff166001145b610cae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610323565b6000805460ff191660011790558015610cd1576000805461ff0019166101001790555b600380546001600160a01b03199081166001600160a01b03888116919091179092556000805462010000600160b01b0319166201000088851602179055600180548216868416179055600280549091169184169190911790558015610b2c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610de19085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f44565b50505050565b801580610e615750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610e3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5f9190611576565b155b610ecc5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610323565b6040516001600160a01b0383166024820152604481018290526105d190849063095ea7b360e01b90606401610daa565b6000818310610f0b5781610f0d565b825b9392505050565b6040516001600160a01b0383166024820152604481018290526105d190849063a9059cbb60e01b90606401610daa565b6000610f99826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166110199092919063ffffffff16565b9050805160001480610fba575080806020019051810190610fba91906116ea565b6105d15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610323565b60606110288484600085611030565b949350505050565b6060824710156110915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610323565b600080866001600160a01b031685876040516110ad9190611757565b60006040518083038185875af1925050503d80600081146110ea576040519150601f19603f3d011682016040523d82523d6000602084013e6110ef565b606091505b50915091506111008783838761110b565b979650505050505050565b6060831561117a578251600003611173576001600160a01b0385163b6111735760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610323565b5081611028565b611028838381511561118f5781518083602001fd5b8060405162461bcd60e51b815260040161032391906115e7565b6001600160a01b03811681146111be57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80356111e2816111a9565b919050565b600080600080608085870312156111fd57600080fd5b8435611208816111a9565b935060208501359250604085013567ffffffffffffffff8082111561122c57600080fd5b818701915087601f83011261124057600080fd5b813581811115611252576112526111c1565b604051601f8201601f19908116603f0116810190838211818310171561127a5761127a6111c1565b816040528281528a602084870101111561129357600080fd5b8260208601602083013760006020848301015280965050505050506112ba606086016111d7565b905092959194509250565b6000806000606084860312156112da57600080fd5b83356112e5816111a9565b925060208401356112f5816111a9565b929592945050506040919091013590565b6000806020838503121561131957600080fd5b823567ffffffffffffffff8082111561133157600080fd5b818501915085601f83011261134557600080fd5b81358181111561135457600080fd5b8660208260051b850101111561136957600080fd5b60209290920196919550909350505050565b60008060008060008060008060006101008a8c03121561139a57600080fd5b89356113a5816111a9565b985060208a013567ffffffffffffffff808211156113c257600080fd5b818c0191508c601f8301126113d657600080fd5b8135818111156113e557600080fd5b8d60208285010111156113f757600080fd5b602083019a5080995050505060408a0135955060608a0135945061141d60808b016111d7565b935061142b60a08b016111d7565b925060c08a0135915060e08a013590509295985092959850929598565b60006020828403121561145a57600080fd5b8135610f0d816111a9565b6000806000806080858703121561147b57600080fd5b8435611486816111a9565b93506020850135611496816111a9565b925060408501356114a6816111a9565b915060608501356114b6816111a9565b939692955090935050565b805180151581146111e257600080fd5b60008060008060008060c087890312156114ea57600080fd5b6114f3876114c1565b95506020870151611503816111a9565b60408801519095506003811061151857600080fd5b606088015190945062ffffff8116811461153157600080fd5b608088015190935063ffffffff8116811461154b57600080fd5b8092505060a087015190509295509295509295565b634e487b7160e01b600052602160045260246000fd5b60006020828403121561158857600080fd5b5051919050565b60005b838110156115aa578181015183820152602001611592565b83811115610de15750506000910152565b600081518084526115d381602086016020860161158f565b601f01601f19169290920160200192915050565b602081526000610f0d60208301846115bb565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261164f57600080fd5b83018035915067ffffffffffffffff82111561166a57600080fd5b60200191503681900382131561167f57600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611028602083018486611686565b6000600182016116e357634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156116fc57600080fd5b610f0d826114c1565b60e08152600061171960e083018a8c611686565b60208301989098525060408101959095526001600160a01b03938416606086015291909216608084015260a083019190915260c09091015292915050565b6000825161176981846020870161158f565b919091019291505056fea26469706673582212209e721fff305b260434c545d31c23d67f514f64be4dfed087e1679d98833bb5b464736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveExactToken(address,address,uint256)": {
        "details": "Sets `amount` allowance of `_spender` over the router's (this contract) tokens."
      },
      "deposit(address,bytes32,bytes,address)": {
        "params": {
          "_commitment": "the note commitment, which is PedersenHash(nullifier + secret)",
          "_encryptedNote": "the encrypted note",
          "_tornado": "PortralGate pool instance address",
          "sender": "the sender address (used in cases when the sender is not the caller e.g. zapper contract)"
        }
      },
      "rescueTokens(address,address,uint256)": {
        "details": "Method to claim junk and accidentally sent tokens"
      },
      "setNewGovernance(address)": {
        "params": {
          "_govAddr": "new governance address"
        }
      },
      "setTornadoTreesContract(address)": {
        "details": "Update new tornado tree instance.",
        "params": {
          "_tornadoTrees": "new tornado tree instance address"
        }
      },
      "withdraw(address,bytes,bytes32,bytes32,address,address,uint256,uint256)": {
        "params": {
          "_fee": "the token amount sent to relayer as fee",
          "_nullifierHash": "hash of unique deposit nullifier to prevent double spends",
          "_proof": "is a zkSNARK proof data, and input is an array of circuit public inputs `input` array",
          "_recipient": "the recipient address to recieve the token",
          "_refund": "the eth amount sent to recipient as gas",
          "_relayer": "the relayer address",
          "_root": "merkle root of all deposits in the contract",
          "_tornado": "TC pool instance address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "backupNotes(bytes[])": {
        "notice": "Manually backup encrypted notes"
      },
      "deposit(address,bytes32,bytes,address)": {
        "notice": "Deposit funds into the contract."
      },
      "initialize(address,address,address,address)": {
        "notice": "For proxy pattern"
      },
      "setNewGovernance(address)": {
        "notice": "Set new governance address."
      },
      "withdraw(address,bytes,bytes32,bytes32,address,address,uint256,uint256)": {
        "notice": "Withdraw a deposit from the contract. Relayer withdrawn should have different _relayer and _recipient addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 533,
        "contract": "contracts/portalgate/PGRouter.sol:PGRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 536,
        "contract": "contracts/portalgate/PGRouter.sol:PGRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22974,
        "contract": "contracts/portalgate/PGRouter.sol:PGRouter",
        "label": "governance",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22977,
        "contract": "contracts/portalgate/PGRouter.sol:PGRouter",
        "label": "instanceRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(InstanceRegistry)22282"
      },
      {
        "astId": 22980,
        "contract": "contracts/portalgate/PGRouter.sol:PGRouter",
        "label": "relayerRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(RelayerRegistry)23619"
      },
      {
        "astId": 22983,
        "contract": "contracts/portalgate/PGRouter.sol:PGRouter",
        "label": "tornadoTrees",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITornadoTrees)6633"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITornadoTrees)6633": {
        "encoding": "inplace",
        "label": "contract ITornadoTrees",
        "numberOfBytes": "20"
      },
      "t_contract(InstanceRegistry)22282": {
        "encoding": "inplace",
        "label": "contract InstanceRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(RelayerRegistry)23619": {
        "encoding": "inplace",
        "label": "contract RelayerRegistry",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}